// Basic service worker implementation without external dependencies
const CACHE_NAME = 'asapdigest-cache-v1';
const OFFLINE_PAGE = '/offline.html';

// Files to cache initially
const INITIAL_CACHED_RESOURCES = [
    '/',
    '/offline.html',
    '/favicon.png',
    '/manifest.json',
    '/icons/icon-192x192.png',
    '/icons/icon-512x512.png'
];

// Install event handler
self.addEventListener('install', (event) => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then((cache) => {
                return cache.addAll(INITIAL_CACHED_RESOURCES);
            })
            .then(() => {
                return self.skipWaiting();
            })
    );
});

// Activate event handler
self.addEventListener('activate', (event) => {
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (cacheName !== CACHE_NAME) {
                        return caches.delete(cacheName);
                    }
                })
            );
        }).then(() => {
            return self.clients.claim();
        })
    );
});

// Message event handler
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
});

// Fetch event handler with network-first strategy
self.addEventListener('fetch', (event) => {
    // Skip non-GET requests
    if (event.request.method !== 'GET') return;

    // Skip cross-origin requests
    if (!event.request.url.startsWith(self.location.origin)) return;

    // Skip WebSocket connections
    if (event.request.url.includes('/ws') ||
        event.request.url.includes('/socket') ||
        event.request.headers?.get('upgrade') === 'websocket') {
        return;
    }

    event.respondWith(
        fetch(event.request)
            .then((response) => {
                // Only cache successful responses with valid content
                if (response && response.status === 200 && response.type === 'basic') {
                    const responseClone = response.clone();
                    caches.open(CACHE_NAME).then((cache) => {
                        cache.put(event.request, responseClone);
                    });
                }
                return response;
            })
            .catch(() => {
                // If network fails, try cache
                return caches.match(event.request)
                    .then((cacheResponse) => {
                        // Return cached response or offline page
                        return cacheResponse || caches.match(OFFLINE_PAGE);
                    });
            })
    );
});

// Push notification handler
self.addEventListener('push', (event) => {
    if (!event.data) return;

    try {
        const data = event.data.json();

        const options = {
            body: data.body || 'New update from ASAP Digest',
            icon: '/icons/icon-192x192.png',
            badge: '/icons/icon-192x192.png',
            data: {
                url: data.url || '/'
            }
        };

        event.waitUntil(
            self.registration.showNotification(data.title || 'ASAP Digest', options)
        );
    } catch (error) {
        console.error('Error processing push notification:', error);
    }
});

// Click handler for notifications
self.addEventListener('notificationclick', (event) => {
    event.notification.close();

    event.waitUntil(
        clients.openWindow(event.notification.data?.url || '/')
    );
}); 