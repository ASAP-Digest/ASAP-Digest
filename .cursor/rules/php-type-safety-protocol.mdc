---
description: 
globs: 
alwaysApply: false
---
# PHP Type Safety Protocol v1.0

## 1. Purpose and Scope

This protocol extends the existing `wordpress-method-parameter-protocol` to establish comprehensive standards for type safety in WordPress plugin development. It focuses specifically on explicit type casting requirements to prevent type-related errors, especially during data transfer between different parts of an application.

## 2. Explicit Type Casting Requirements

### 2.1 Type Casting Points (MUST)

Explicit type casting MUST be applied at these critical points:

1. **Parameter Reception**
   - When accepting parameters from external functions
   - When retrieving data from the database
   - When processing user input or API responses

2. **Mathematical Operations**
   - Before performing calculations, especially with decimal values
   - When division is involved
   - When comparing numeric values

3. **Return Value Preparation**
   - Before returning values that have a specific expected type
   - When preparing data for storage
   - When passing data to third-party APIs

4. **Type Transitions**
   - Whenever data moves between contexts (e.g., database to memory, API to local)
   - When data passes between plugin components with different type expectations

### 2.2 Explicit Type Casting Syntax (MUST)

PHP provides multiple ways to cast types. For consistency and clarity:

```php
// PREFERRED: Type casting operators
$int_value = (int) $string_input;    // Cast to integer
$float_value = (float) $decimal;     // Cast to float
$bool_value = (bool) $option;        // Cast to boolean
$string_value = (string) $number;    // Cast to string
$array_value = (array) $object;      // Cast to array

// ACCEPTABLE: Type casting functions
$int_value = intval($string_input);   // Cast to integer
$float_value = floatval($decimal);    // Cast to float
$bool_value = boolval($option);       // Cast to boolean (PHP 5.5+)
```

### 2.3 Type Safety for Common WordPress Functions (MUST)

WordPress core functions often return mixed types or change return types based on parameters. Always cast these:

```php
// Options API
$limit = (int) get_option('my_plugin_items_per_page', 10);
$is_enabled = (bool) get_option('my_plugin_feature_enabled', false);
$api_key = (string) get_option('my_plugin_api_key', '');

// Post Meta
$view_count = (int) get_post_meta($post_id, 'view_count', true);
$rating = (float) get_post_meta($post_id, 'rating', true);
$tags = (array) get_post_meta($post_id, 'custom_tags', true);

// User Meta
$user_level = (int) get_user_meta($user_id, 'user_level', true);
$custom_caps = (array) get_user_meta($user_id, 'custom_capabilities', true);
```

### 2.4 Numeric Operations (MUST)

All numeric operations that could involve type juggling MUST use explicit casting:

```php
// Division - ensure float results when needed
$ratio = (float) ($count / $total);
$percentage = (float) ($count * 100 / $total);

// Rounding and conversion
$rounded = (int) round($float_value);
$ceiling = (int) ceil($float_value);
$floor = (int) floor($float_value);

// Mix of integer and float operations
$final_score = (float) ($base_score + $bonus_points);
$average = (float) array_sum($scores) / (count($scores) ?: 1);
```

## 3. Defensive Type Validation

### 3.1 Input Validation (SHOULD)

Beyond casting, you SHOULD validate that values meet expectations for their type:

```php
/**
 * Process score value with validation.
 *
 * @param mixed $score Raw score input.
 * @return float|WP_Error Validated score or error.
 */
function process_score($score) {
    // Type casting
    $score = (float) $score;
    
    // Validation
    if ($score < 0 || $score > 100) {
        return new WP_Error(
            'invalid_score',
            sprintf(
                __('Score must be between 0 and 100, %s given.', 'text-domain'),
                $score
            )
        );
    }
    
    return $score;
}
```

### 3.2 Type-Safe Array Access (MUST)

Array operations MUST include type safety measures:

```php
// Safe array access
$user_id = isset($data['user_id']) ? (int) $data['user_id'] : 0;

// With null coalescing (PHP 7.0+)
$user_id = (int) ($data['user_id'] ?? 0);

// For arrays of values
$post_ids = array_map('intval', $input_ids);
```

### 3.3 Options Sanitization (SHOULD)

Options SHOULD be sanitized with appropriate type casting:

```php
/**
 * Sanitize plugin options with type enforcement.
 *
 * @param array $input Raw input values
 * @return array Sanitized values with enforced types
 */
function sanitize_my_plugin_options($input) {
    $defaults = [
        'items_per_page' => 10,         // integer
        'cache_lifetime' => 3600,       // integer
        'enable_feature' => false,      // boolean
        'api_url' => '',                // string
        'allowed_roles' => ['editor'],  // array
    ];
    
    $output = [];
    
    // Type-aware sanitization
    $output['items_per_page'] = isset($input['items_per_page']) 
        ? (int) $input['items_per_page'] 
        : $defaults['items_per_page'];
        
    $output['cache_lifetime'] = isset($input['cache_lifetime']) 
        ? (int) $input['cache_lifetime'] 
        : $defaults['cache_lifetime'];
        
    $output['enable_feature'] = isset($input['enable_feature']) 
        ? (bool) $input['enable_feature'] 
        : $defaults['enable_feature'];
        
    $output['api_url'] = isset($input['api_url']) 
        ? esc_url_raw($input['api_url']) 
        : $defaults['api_url'];
        
    $output['allowed_roles'] = isset($input['allowed_roles']) && is_array($input['allowed_roles'])
        ? array_map('sanitize_text_field', $input['allowed_roles'])
        : $defaults['allowed_roles'];
        
    return $output;
}
```

## 4. Implementation Examples

### 4.1 Database Interaction Example

```php
/**
 * Retrieve and process user statistics.
 *
 * @param int $user_id User ID
 * @return array Processed statistics
 */
function get_user_statistics($user_id) {
    global $wpdb;
    
    // Ensure user_id is an integer
    $user_id = (int) $user_id;
    
    // Query with prepared statement for safety
    $results = $wpdb->get_results(
        $wpdb->prepare(
            "SELECT stat_name, stat_value FROM {$wpdb->prefix}user_stats WHERE user_id = %d",
            $user_id
        )
    );
    
    $stats = [];
    
    if ($results) {
        foreach ($results as $row) {
            $name = (string) $row->stat_name;
            
            // Type cast based on the known statistic type
            switch ($name) {
                case 'login_count':
                case 'posts_count':
                case 'comments_count':
                    $stats[$name] = (int) $row->stat_value;
                    break;
                    
                case 'average_rating':
                case 'engagement_score':
                    $stats[$name] = (float) $row->stat_value;
                    break;
                    
                case 'is_verified':
                case 'has_avatar':
                    $stats[$name] = (bool) $row->stat_value;
                    break;
                    
                case 'badges':
                case 'permissions':
                    $stats[$name] = (array) maybe_unserialize($row->stat_value);
                    break;
                    
                default:
                    $stats[$name] = (string) $row->stat_value;
            }
        }
    }
    
    return $stats;
}
```

### 4.2 API Integration Example

```php
/**
 * Process API response data with strict type enforcement.
 * 
 * @param array $response Raw API response
 * @return array Processed data with enforced types
 */
function process_api_response($response) {
    $data = [];
    
    // Validate and cast user data
    if (isset($response['user'])) {
        $user = $response['user'];
        
        $data['user'] = [
            'id'         => isset($user['id']) ? (int) $user['id'] : 0,
            'name'       => isset($user['name']) ? (string) $user['name'] : '',
            'email'      => isset($user['email']) ? (string) $user['email'] : '',
            'is_active'  => isset($user['is_active']) ? (bool) $user['is_active'] : false,
            'created_at' => isset($user['created_at']) ? (string) $user['created_at'] : '',
            'role'       => isset($user['role']) ? (string) $user['role'] : 'subscriber',
            'meta'       => isset($user['meta']) && is_array($user['meta']) ? 
                            (array) $user['meta'] : [],
        ];
    }
    
    // Validate and cast metrics data
    if (isset($response['metrics']) && is_array($response['metrics'])) {
        $metrics = $response['metrics'];
        
        $data['metrics'] = [
            'total_items'    => isset($metrics['total_items']) ? (int) $metrics['total_items'] : 0,
            'average_score'  => isset($metrics['average_score']) ? (float) $metrics['average_score'] : 0.0,
            'completion_rate' => isset($metrics['completion_rate']) ? (float) $metrics['completion_rate'] : 0.0,
            'last_updated'   => isset($metrics['last_updated']) ? (string) $metrics['last_updated'] : '',
        ];
    }
    
    return $data;
}
```

## 5. Verification Checklist

When reviewing code for type safety, verify:

- [ ] All numeric operations use explicit type casting
- [ ] WordPress API function results are explicitly cast to expected types
- [ ] User input and API responses are always validated and cast
- [ ] Array operations include appropriate type safety measures
- [ ] Plugin options and settings use type-aware sanitization
- [ ] Return values have consistent, documented types
- [ ] Mathematical operations, especially division, use proper type casting

## 6. Common Issues This Prevents

1. **Float to Int Conversion Warnings**
   - Implicit conversion from float 7.5 to int loses precision
   - Unexpected truncation of decimal values

2. **Type Juggling Errors**
   - Unexpected behavior when comparing "0" to 0
   - String concatenation instead of numeric addition

3. **Database Type Mismatches**
   - Storing numbers as strings and vice versa
   - Boolean values stored inconsistently

4. **Inconsistent Return Values**
   - Functions returning mixed types causing unpredictable behavior
   - Callers unable to reliably use return values