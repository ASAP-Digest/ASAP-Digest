---
description: 
globs: app/src/routes/**/*.svelte, app/src/lib/components/**/*.svelte, app/src/lib/components/ui/**/*.svelte, app/src/lib/components/guards/**/*.svelte, app/src/lib/components/widgets/**/*.svelte, app/src/lib/components/layouts/**/*.svelte, app/src/routes/(auth)/**/*.svelte, app/src/routes/(protected)/**/*.svelte, app/src/routes/api/**/*.svelte, app/src/routes/billing/**/*.svelte, app/src/routes/dashboard/**/*.svelte, app/src/routes/demo/**/*.svelte, app/src/routes/design-system/**/*.svelte, app/src/routes/digest/**/*.svelte, app/src/routes/explore/**/*.svelte, app/src/routes/notifications/**/*.svelte, app/src/routes/plans/**/*.svelte, app/src/routes/profile/**/*.svelte, app/src/routes/settings/**/*.svelte, app/src/routes/today/**/*.svelte, app/src/lib/components/shadcn/**/*.svelte
alwaysApply: false
---
# Svelte 5 Syntax Migration Protocol with Type Definition Integration (SSMP+TDM)

## 1. Pre-Migration Type Analysis
```typescript
// In app.d.ts
declare global {
    namespace App {
        interface Locals {
            user?: User;
            session?: Session;
        }
    }
}
```

## 2. Component Syntax Rules

### 2.1 Props Migration
```javascript
/**
 * @typedef {Object} ComponentProps
 * @property {string} title - The component title
 * @property {(event: MouseEvent) => void} onClick - Click handler
 */

// INCORRECT - Old Svelte 4 style
export let title;

// CORRECT - Svelte 5 with JSDoc types
/** @type {ComponentProps} */
const props = $props();
```

### 2.2 Slot Migration
```javascript
// INCORRECT - Old slot syntax
<slot name="header" />

// CORRECT - New render syntax with JSDoc types
/** @type {import('./types').HeaderProps} */
const headerProps = $props();
{@render headerProps.children()}
```

## 3. Type Definition Requirements

### 3.1 Global Types (app.d.ts)
```typescript
declare global {
    interface ComponentBase {
        class?: string;
        [key: string]: unknown;
    }

    interface User {
        id: string;
        email: string;
        [key: string]: unknown;
    }
}
```

### 3.2 Local Types (JSDoc in .js files)
```javascript
/**
 * @typedef {Object} ButtonProps
 * @property {string} variant - Button variant
 * @property {string} [size] - Optional size
 * @property {() => void} onClick - Click handler
 */

/** @type {ButtonProps} */
const buttonProps = $props();
```

## 4. Implementation Checklist

```plaintext
For each component:
[ ] 1. Add JSDoc types to app.d.ts if global
[ ] 2. Add local types via JSDoc if component-specific
[ ] 3. Update props to use $props() with types
[ ] 4. Migrate slots to {@render} with types
[ ] 5. Update parent components
[ ] 6. Run type checking
[ ] 7. Update documentation
```

## 5. Error Prevention Rules

```plaintext
1. NEVER use TypeScript syntax in .js files
2. ALWAYS use JSDoc for type definitions in .js files
3. ALWAYS define shared types in app.d.ts
4. NEVER mix slot and render syntax
5. ALWAYS use $props() for prop access
6. ALWAYS use {@render} for child content
7. ALWAYS update parent components together
8. ALWAYS run full test suite after changes
```

## 6. Type Location Rules

### 6.1 Global Types
```typescript
// In app.d.ts ONLY
declare global {
    interface GlobalComponent {
        // Type definition here
    }
}
```

### 6.2 Local Types
```javascript
// In component .js files ONLY
/**
 * @typedef {Object} LocalComponent
 * @property {string} prop - Description
 */
```

## 7. Documentation Requirements

### 7.1 Global Type Documentation
```typescript
/**
 * @description Component base interface
 * @since 1.0.0
 */
interface ComponentBase {
    class?: string;
    [key: string]: unknown;
}
```

### 7.2 Local Type Documentation
```javascript
/**
 * @typedef {Object} ComponentProps
 * @property {string} title - The component title
 * @property {boolean} [isActive] - Optional active state
 * @property {(event: MouseEvent) => void} onClick - Click handler
 * @since 1.0.0
 */
```

## 8. Migration Process

### 8.1 Pre-migration Check
```plaintext
1. Scan for existing TypeScript files
2. Document all component props
3. Document all slot usage
4. Create type migration plan
5. Update app.d.ts with shared types
```

### 8.2 Migration Steps
```plaintext
1. Convert props to $props() with types
2. Convert slots to {@render}
3. Update parent components
4. Add missing types
5. Run type checking
6. Test components
7. Update documentation
```

### 8.3 Post-migration Verification
```plaintext
1. Verify no TypeScript syntax in .js
2. Verify all props use $props()
3. Verify all slots use {@render}
4. Verify all types are documented
5. Verify tests pass
6. Verify build succeeds
```

