---
description: 
globs: 
alwaysApply: true
---
# Svelte 5 Syntax Migration Protocol with Type Definition Integration

*(Self-correction: Added checks for prop/snippet passthrough)*

## 1. Pre-Migration Type Analysis
```typescript
// In app.d.ts
declare global {
    namespace App {
        interface Locals {
            user?: User;
            session?: Session;
        }
    }
}
```

## 2. Component Syntax Rules

### 2.1 Props Migration
```javascript
/**
 * @typedef {Object} ComponentProps
 * @property {string} title - The component title
 * @property {(event: MouseEvent) => void} onClick - Click handler
 * @property {import('svelte').Snippet | undefined} [children] - Optional content snippet
 */

// INCORRECT - Old Svelte 4 style
export let title;
export let onClick;

// CORRECT - Svelte 5 with JSDoc types
/** @type {ComponentProps} */
const { title, onClick, children } = $props();
```

### 2.2 Slot Migration
```javascript
// INCORRECT - Old slot syntax
<slot name="header" />
<slot /> <!-- Default slot -->

// CORRECT - New render syntax with JSDoc types
/**
 * @typedef {import('svelte').Snippet<[ItemType]>} RowSnippet
 * @typedef {import('svelte').Snippet} ChildrenSnippet
 */
const {
    header: headerSnippet, // Assuming header is passed as a named prop
    children = undefined,  // Default children snippet
    /** @type {RowSnippet} */ row // Example typed snippet prop
} = $props();

// Render named snippet prop
{#if headerSnippet}
    {@render headerSnippet()}
{/if}

// Render default children snippet
{#if children}
    {@render children()}
{/if}

// Render snippet prop with arguments
{@render row(item)}
```

## 3. Type Definition Requirements

### 3.1 Global Types (app.d.ts)
```typescript
declare global {
    interface ComponentBase {
        class?: string;
        [key: string]: unknown;
    }

    interface User {
        id: string;
        email: string;
        [key: string]: unknown;
    }
}
```

### 3.2 Local Types (JSDoc in .js files)
```javascript
/**
 * @typedef {Object} ButtonProps
 * @property {string} variant - Button variant
 * @property {string} [size] - Optional size
 * @property {() => void} onClick - Click handler
 * @property {import('svelte').Snippet | undefined} [children] - Optional content
 */

/** @type {ButtonProps} */
const { variant, size, onClick, children } = $props();
```

## 4. Implementation Checklist

```plaintext
For each component:
[ ] 1. Add JSDoc types to app.d.ts if global
[ ] 2. Add local types via JSDoc if component-specific
[ ] 3. Update props to use $props() with types (destructure preferred)
[ ] 4. Migrate slots to {@render snippetNameOrChildren()}
[ ] 5. **Verify Prop/Snippet Passthrough:** Ensure wrapper components correctly pass props (esp. `children` or alternatives) to underlying components.
[ ] 6. Update parent components using the migrated component
[ ] 7. Run type checking (e.g., `pnpm check`)
[ ] 8. Update relevant documentation
```

## 5. Error Prevention Rules

```plaintext
1. NEVER use TypeScript syntax in .js files
2. ALWAYS use JSDoc for type definitions in .js files
3. ALWAYS define shared types in app.d.ts
4. NEVER mix slot and render snippet syntax within the same component usage
5. ALWAYS use $props() for prop access in Svelte 5 components
6. ALWAYS use {@render snippetOrChildren()} for rendering passed snippets/content
7. **ALWAYS verify content prop (`children`, `textContent`, etc.) passthrough when creating/refactoring wrapper components.**
8. ALWAYS update parent components when child prop/snippet signatures change
9. ALWAYS run full test suite after changes
10. BE AWARE of potential SSR issues when rendering components accepting `children` snippets within nested named snippets passed through intermediate components; consider explicit content props (like `textContent`) as a workaround if necessary.
```

## 6. Type Location Rules

### 6.1 Global Types
```typescript
// In app.d.ts ONLY
declare global {
    interface GlobalComponent {
        // Type definition here
    }
}
```

### 6.2 Local Types
```javascript
// In component .js/.svelte files ONLY
/**
 * @typedef {Object} LocalComponentProps
 * @property {string} prop - Description
 * @property {import('svelte').Snippet} children - Content snippet
 */
```

## 7. Documentation Requirements

### 7.1 Global Type Documentation
```typescript
/**
 * @description Component base interface defining common optional attributes.
 * @property {string} [class] - Optional CSS class string.
 * @property {unknown} [key: string] - Allows other attributes.
 * @since 1.0.0
 */
interface ComponentBase {
    class?: string;
    [key: string]: unknown;
}
```

### 7.2 Local Type Documentation
```javascript
/**
 * @typedef {Object} ComponentProps Specific props for MyComponent.
 * @property {string} title - The component title (required).
 * @property {boolean} [isActive=false] - Optional active state, defaults to false.
 * @property {(event: MouseEvent) => void} onClick - Click handler (required).
 * @property {import('svelte').Snippet | undefined} [children] - Optional content snippet.
 * @since 1.0.0
 */
```

## 8. Migration Process

### 8.1 Pre-migration Check
```plaintext
1. Scan for existing TypeScript files (`.ts`, `.tsx`) - Should be none for application logic.
2. Document all component props (`export let`) for each component being migrated.
3. Document all slot usage (`<slot>`, `$$slots`) for each component.
4. Create type migration plan (identify global vs local types).
5. Update app.d.ts with necessary shared/global types.
```

### 8.2 Migration Steps
```plaintext
1. Convert props (`export let`) to use a single destructured `$props()` call with JSDoc types.
2. Convert default slots (`<slot>`) to use `{@render children()}` (ensure `children` is in `$props`).
3. Convert named slots (`<slot name="xyz">`) to require a corresponding named snippet prop (e.g., `xyzSnippet`) passed via `$props()` and render with `{@render xyzSnippet()}`.
4. Update parent components passing content/slots to use the new snippet prop syntax.
5. Add missing JSDoc types (local or global).
6. Run type checking (`pnpm check`).
7. Test components visually and functionally.
8. Update component documentation (props, snippets).
```

### 8.3 Post-migration Verification
```plaintext
1. Verify no TypeScript syntax remains in migrated `.js` or `.svelte` files.
2. Verify all props access uses the destructured `const { ... } = $props();` pattern.
3. Verify all slot rendering uses `{@render ...()}` syntax.
4. Verify prop/snippet passthrough in wrapper components.
5. Verify all JSDoc types are present and documented.
6. Verify tests pass.
7. Verify build succeeds (`pnpm build`).
```
