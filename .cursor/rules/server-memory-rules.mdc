---
description: 
globs: 
alwaysApply: true
---
# Server Memory & State Synchronization Protocol v2.2

*(Self-correction: Updated version and integration points, added Error/Blocked state relationship, mandated trigger reason in observations)*

## 1. Purpose
This protocol defines the rules for maintaining the integrity and consistency of the project's operational state, primarily managed through Server Memory entities. It governs how project events, task statuses, work sessions, and status checks are recorded and synchronized with key documentation like `ROADMAP_TASKS.md`. It ensures a reliable "single source of truth" for ongoing work and project history, including the handling of blocking errors.

## 2. Protocol Integration Layer
*(Self-correction: Updated WSMP version, added Error consideration)*
This protocol is tightly integrated with several others, forming the backbone of state management.

````text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. Software Development Meta Protocol   │ // Overall Guidance
│ 2. Rule Execution Protocol              │ // How rules are applied
│ 3. Status Check Protocol (v2.4+)        │ // Input source & entity creation (Updated)
│ 4. Work Session Activation Proto v2.9+  │ // Defines trigger commands (Updated)
│ 5. Work Session Management Proto (v2.13+)│ // Manages session entities & state (Updated)
│ 6. Task Tracking Protocol               │ // Roadmap updates & task lifecycle
│ 7. Memory Maintenance Protocol (This)   │ // Entity/Relation rules (v2.2)
│ 8. Cross-Protocol Comms & Verification  │ // Ensures consistency
│ 9. Universal Error Resolution Protocol  │ // Error entity handling
│ 10. Audit Trail System                  │ // Records state changes
│ 11. Testing & Verification Protocol v1.4+│ // Handles task verification state (Updated)
└─────────────────────────────────────────┘
````

## 3. Mandatory Update Triggers & Entity Creation
Server Memory MUST be updated upon specific events, often triggering the creation or modification of specific entity types.

*(Self-correction: Clarified Error trigger)*
````text
┌─────────────────────┬──────────────────────────────────┬──────────────────────────────────┐
│ Trigger Event       │ Primary Entity Created/Updated   │ Integration Point / Protocol     │
├─────────────────────┼──────────────────────────────────┼──────────────────────────────────┤
│ Status Check (SC)   │ StatusCheck, StatusReport        │ Status Check Protocol            │
│ Begin Work (BWS)    │ WorkSession                      │ WSMP (via WSAP trigger)          │
│ Save Work (SWS)     │ WorkSessionSave                  │ WSMP                             │
│ End Work (EWS)      │ WorkSession (updated), Task(s)   │ WSMP (via WSAP trigger), TVP     │
│ Task Status Change  │ Task, potentially RoadmapEntity  │ Task Tracking Protocol, WSMP, TVP│
│ Code Change         │ Code, potentially Task           │ VCS / File System Hooks / Manual │
│ Error Encountered   │ Error, potentially Task (Blocked)│ UERP, Manual Logging             │
│ Build Result        │ Build, potentially Task          │ Build System Integration         │
└─────────────────────┴──────────────────────────────────┴──────────────────────────────────┘
````
*Note: Updates often involve creating relations between entities (e.g., an `Error` entity `blocks` a `Task` entity).*

## 4. Core Entity Types & Conventions

### 4.1. Entity Templates
These are the primary entity types managed under this protocol.

*(Self-correction: Added status field to Error entity)*
````text
┌─────────────────┬─────────────────────────────┬───────────────────────────────┐
│ Entity Type     │ Required Fields/Observations│ Optional Fields/Observations  │
├─────────────────┼─────────────────────────────┼───────────────────────────────┤
│ StatusCheck     │ timestamp, triggerCommand   │ sourceDocs (e.g., roadmap)    │
│ StatusReport    │ timestamp, summary          │ priorityTask, blockedTasks    │
│ WorkSession     │ startTime, sessionType      │ endTime, status, priorityTask │
│ WorkSessionSave │ saveTime, reason            │ activeTaskID, openFiles       │
│ Task            │ name, status, lastUpdateTs  │ priority, deadline, assignee  │
│ Error           │ type, timestamp, description│ resolutionSteps, impact, status (active/resolved) |
│ Code            │ path, changeDescription, ts │ commitHash, reviewer, tests   │
│ Build           │ result, timestamp           │ metrics, logs, artifactPath   │
│ RoadmapEntity   │ filePath, lastUpdateTs      │ specificSection (e.g., TaskID)│
└─────────────────┴─────────────────────────────┴───────────────────────────────┘
````
*Note: `Observations` often contain human-readable context, timestamps, and links to related entity names.*

### 4.2. Entity Naming Convention
*(No change needed)*
-   **General:** `[EntityType]_[PrimaryIdentifier]_[Timestamp(log_compact)]`
-   **Examples:**
    -   `StatusCheck_SC_20240331_153000`
    -   `WorkSession_AuthFeature_20240331_153100`
    -   `Task_ImplementLoginUI_20240331_160000`
    -   `WorkSessionSave_ContextSwitch_20240331_170000`
    -   `Error_DBConnectionFailure_20250413_183000`

## 5. Task Status Synchronization

### 5.1. Task State Mapping
Server Memory `Task` entity status MUST align with the emojis used in `ROADMAP_TASKS.md`.

*(Self-correction: Added ERROR state mapping)*
````text
┌─────────────────┬────────────────────┬────────────────────────────┐
│ Memory Status   │ ROADMAP Emoji      │ Typical Trigger            │
├─────────────────┼────────────────────┼────────────────────────────┤
│ PENDING         │ ⏳                  │ Initial task creation      │
│ ACTIVE          │ 🔄                  │ Task start / BWS / RWS     │
│ PAUSED          │ ⏸️                  │ SWS (Save Work Session)    │
│ COMPLETED       │ ✅                  │ Task completion / EWS COMPLETED (via TVP AC) |
│ BLOCKED         │ ❌                  │ Linked active Error entity │
│ PENDING_TESTING │ 🔬                  │ EWS TESTING                │
│ TESTING         │ 🧪                  │ ST (Start Testing via TVP) │
│ ERROR           │ 💥 (or similar)     │ Task failed due to error (Optional direct state) |
└─────────────────┴────────────────────┴────────────────────────────┘
````
*Note: A task might be marked `BLOCKED` (`❌`) in the roadmap while its underlying Memory status is still technically `PENDING` or `ACTIVE`, but prevented from progressing due to the linked `Error`.*

### 5.2. Update Process (Example: Task Completion via EWS)
*(Self-correction: Added trigger reason requirement)*
1.  **Trigger:** `EWS COMPLETED` command issued (typically after `AC` in TVP).
2.  **Timestamp:** Get current time (`mcp_mcp-datetime_get_datetime`, format "MM.DD.YY | HH:MM AM/PM TimeZone" for roadmap, `log_compact` for entity names).
3.  **Memory Update (Task):**
    -   Find relevant `Task` entity linked to the active `WorkSession`.
    -   Update its status to `COMPLETED`.
    -   Add observation: **"Status updated to COMPLETED. Trigger: EWS COMPLETED command following AC for VerificationRequest [VR_ID]. Session: [SessionID] at [Timestamp]."** (MUST include trigger reason).
    -   Update `lastUpdateTs` field.
4.  **Memory Update (WorkSession):**
    -   Find active `WorkSession` entity.
    -   Update its status to `ENDED`.
    -   Set `endTime`.
    -   Add observation: `Ended normally, task [TaskID] completed.`.
5.  **Roadmap Update (`ROADMAP_TASKS.md`):**
    -   Call Task Tracking Protocol function.
    -   Locate task line by ID.
    -   Update emoji to ✅.
    -   Append formatted timestamp.
6.  **Verification:** Use Cross-Protocol Verification checks (L1, L2) to ensure memory and roadmap state are consistent.
7.  **Audit:** Record `TASK_COMPLETED`, `SESSION_END` events in Audit Trail.

## 6. Key Relationships
*(Self-correction: Added Error relationship)*
Maintain explicit relationships between entities in Server Memory for context.

````text
- StatusCheck `generated` StatusReport
- WorkSession `initiatedBy` StatusCheck (or StatusReport or RWS Fallback)
- WorkSession `resultedIn` Task (completion/update)
- WorkSessionSave `pauses` WorkSession
- Error `blocks` Task // New Relationship
- Task `blockedBy` Error // Inverse Relationship
- Code `implements` Task
- Build `tests` Code
- VerificationRequest `verifies` Task
- Task `hasVerificationRequest` VerificationRequest
````

## 7. Implementation Examples (Conceptual)
*(Self-correction: Added Error logging example and trigger reason in observations)*

````javascript
// Example 1: Begin Work Session (BWS) Memory Operations
async function handleBWS(triggeringEvent, sessionType, precedingStatusCheckId, targetTask) {
  const startTime = await mcp_mcp_datetime_get_datetime({ format: "datetime" });
  const logTs = await mcp_mcp_datetime_get_datetime({ format: "log_compact" });
  const sessionId = `WS_${sessionType}_${logTs}`;
  const triggerReason = triggeringEvent === 'RWS' ? 'RWS Fallback' : 'Manual BWS';

  await mcp_Server_Memory_create_entities({
    entities: [{
      name: sessionId,
      entityType: "WorkSession",
      observations: [
        `Session started at ${startTime}`,
        `Type: ${sessionType}`,
        `Target Task: ${targetTask.id}`,
        `Trigger: ${triggerReason}`,
        `Status: ACTIVE`
      ]
    }]
  });
  // ... link to StatusCheck if applicable ...
  // ... update Task status if needed, adding observation with trigger reason ...
}

// Example 2: Save Work Session (SWS) Memory Operations (Unchanged)
async function handleSWS(activeSessionId, reason) {
  // ... (logic from v2.1) ...
}

// Example 3: Logging a Blocking Error
async function logBlockingError(errorType, description, impactedTaskId) {
  const errorTime = await mcp_mcp_datetime_get_datetime({ format: "datetime" });
  const logTs = await mcp_mcp_datetime_get_datetime({ format: "log_compact" });
  const errorName = `Error_${errorType}_${logTs}`;

  await mcp_Server_Memory_create_entities({
    entities: [{
      name: errorName,
      entityType: "Error",
      observations: [
        `Error occurred at ${errorTime}`,
        `Type: ${errorType}`,
        `Description: ${description}`,
        `Status: active` // Explicitly set status
      ]
    }]
  });

  if (impactedTaskId) {
    await mcp_Server_Memory_create_relations({
      relations: [{ from: errorName, to: impactedTaskId, relationType: "blocks" }]
    });
    // Optionally: Trigger Task Tracking Protocol to update roadmap to BLOCKED (❌)
    // await updateRoadmapTaskStatus(impactedTaskId, 'BLOCKED');
  }
  console.log(`Logged blocking error ${errorName}, linked to task ${impactedTaskId}`);
}

// Example 4: Updating Task Status Observation
async function updateTaskStatus(taskId, newStatus, triggerReason) {
    const updateTime = await mcp_mcp_datetime_get_datetime({ format: "datetime" });
    await mcp_Server_Memory_add_observations({
        observations: [{
            entityName: taskId,
            contents: [
                `Status updated to ${newStatus} at ${updateTime}. Trigger: ${triggerReason}.` // MUST include trigger reason
            ]
        }]
    });
    // ... also update the 'status' field if it exists as a direct field ...
}
````

## 8. Usage Instructions & Verification
*(Self-correction: Added observation requirement)*
-   **Consistency:** ALWAYS ensure Server Memory state, `ROADMAP_TASKS.md` emojis/timestamps, and actual work status are aligned.
-   **Triggers:** Adhere strictly to the mandatory update triggers.
-   **Observations:** When updating entities or adding new ones, MUST add observations detailing the reason/trigger for the update (e.g., "Trigger: EWS TESTING command", "Trigger: UERP resolution step").
-   **Relationships:** Create relations between entities (especially `Error blocks Task`) to maintain context and support RWS fallback logic.
-   **Verification:** Regularly use `Status Check` (SC) and Cross-Protocol Verification tools to validate state consistency.
-   **Roadmap Parsing:** Ensure any scripts updating `ROADMAP_TASKS.md` use logic consistent with how `Status Check` parses it.