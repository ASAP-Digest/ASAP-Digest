---
description: 
globs: 
alwaysApply: true
---
# Tooling Setup Guide v1.2 (Proposed Changes)

## 1. Purpose

This guide details the setup and configuration for essential development tooling required in the ASAP Digest project. Enforcing consistent code style and catching potential issues automatically improves code quality, maintainability, and developer experience. These tools should be integrated into the development workflow via pre-commit hooks and CI checks.

## 2. Core Tools

*   **Prettier:** Automated code formatter.
*   **ESLint:** Pluggable JavaScript and Svelte linter.
*   **prettier-plugin-tailwindcss:** Prettier plugin for sorting Tailwind classes.
*   **eslint-plugin-svelte:** ESLint plugin for Svelte files.
*   **eslint-plugin-jsx-a11y (adapted):** Linter for accessibility rules (requires careful configuration for Svelte).
*   **Husky:** Tool for managing Git hooks (e.g., pre-commit).
*   **lint-staged:** Run linters on staged files in Git.

## 3. Installation (using pnpm) - UPDATE

*Run these commands in the SvelteKit root directory (`/Volumes/Macintosh HD/Users/vsmith/Local Sites/asap-digest/app/public/app`)*

```bash
# Install Prettier & Tailwind Plugin
pnpm add -D prettier prettier-plugin-tailwindcss

# Install ESLint & Svelte Plugin
pnpm add -D eslint eslint-plugin-svelte

# Install Accessibility Plugin (Adapt as needed)
# Note: Direct jsx-a11y might need wrappers or alternative Svelte-specific a11y linters
pnpm add -D eslint-plugin-jsx-a11y

# Install OpenAPI Generation Dependencies (Example: JSDoc Parser)
pnpm add -D doctrine # Or your chosen JSDoc parser

# Install OpenAPI Annotation Linter Dependencies (Example: AST Parser)
pnpm add -D acorn doctrine # Or alternative JSDoc/AST parsers for the linter script

# Install Broken Link Checker (Example - Choose one if needed)
# pnpm add -D markdown-link-check

# Install Husky & lint-staged
pnpm add -D husky lint-staged
npx husky init
```

## 4. Configuration

### 4.1 Prettier (`.prettierrc` or `prettier` key in `package.json`)

```json
{
  "plugins": ["prettier-plugin-tailwindcss"],
  "semi": true,
  "singleQuote": true,
  "trailingComma": "es5",
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false
}
```

### 4.2 ESLint (`.eslintrc.js`)

```javascript
// .eslintrc.js (Example configuration - adjust as needed)
module.exports = {
  root: true,
  parserOptions: {
    ecmaVersion: 2021,
    sourceType: 'module',
  },
  env: {
    browser: true,
    es2021: true,
    node: true,
  },
  extends: [
    'eslint:recommended',
    // Consider adding a recommended Svelte config if available
    // 'plugin:jsx-a11y/recommended' // Requires adaptation for Svelte
  ],
  plugins: [
    'svelte' // Use 'eslint-plugin-svelte' if using newer versions
    // 'jsx-a11y' // If using the accessibility plugin
  ],
  overrides: [
    {
      files: ['*.svelte'],
      processor: 'svelte/svelte', // Use 'svelte/svelte' with newer eslint-plugin-svelte
    },
  ],
  settings: {
    // Add svelte settings if required by the plugin
  },
  rules: {
    // --- Add custom rules here ---
    // Example: Enforce semi-colons
    'semi': ['error', 'always'],
    // Example: Enforce single quotes
    'quotes': ['error', 'single'],

    // --- Accessibility Rules (Examples - Need Svelte Adaptation) ---
    // These might need specific Svelte wrappers or alternatives
    // 'jsx-a11y/alt-text': 'warn',
    // 'jsx-a11y/anchor-is-valid': 'warn',
    // 'jsx-a11y/click-events-have-key-events': 'warn',
    // 'jsx-a11y/no-noninteractive-element-interactions': 'warn',
    // 'jsx-a11y/label-has-associated-control': 'warn',

    // --- Svelte Specific Rules (Add based on plugin docs) ---
    // 'svelte/no-unused-svelte-ignore': 'warn',
    // 'svelte/no-dupe-else-if-blocks': 'error',
  },
  ignorePatterns: ['node_modules/', 'build/', 'dist/', 'static/'],
};
```
*Note: ESLint configuration, especially for Svelte and Accessibility, requires careful setup based on the specific versions of plugins used. Consult `eslint-plugin-svelte` documentation.*

### 4.3 lint-staged (`lint-staged` key in `package.json`) - UPDATE

```json
{
  "lint-staged": {
    "app/src/routes/api/**/*.js": [
      "node ./scripts/lint-openapi-annotations.js", // Run annotation linter first
      "eslint --fix",
      "prettier --write"
    ],
    "*.{js,svelte}": [ // Generic JS/Svelte files (excluding API routes handled above)
      "eslint --fix",
      "prettier --write"
    ],
    "*.{css,md,json}": ["prettier --write"]
  }
}
```
*(Self-Correction: Integrated annotation linter into `lint-staged` for better handling of staged files)*

### 4.4 Husky (`.husky/pre-commit`) - UPDATE

```bash
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# --- Add OpenAPI Annotation Linting Step ---
# Run the annotation linter on staged API routes *before* generation
# Adjust path/command as necessary
echo "Linting OpenAPI JSDoc annotations..."
# This assumes lint-staged passes staged *.js files to the script
# If not, need a way to identify relevant staged files here.
# Example using a dedicated script that takes staged files:
# node ./scripts/lint-openapi-annotations.js $(git diff --cached --name-only --diff-filter=ACM | grep 'app/src/routes/api/.*+server\\.js$')
# OR integrate with lint-staged (See Section 4.3 update)

# --- (If lint-staged handles the linter script, this block might not be needed here) ---
# Assume the linter script is run via lint-staged for now (See 4.3)
# --- End OpenAPI Annotation Linting Step ---

# --- OpenAPI Generation Step (Runs *after* linting passes) ---
echo "Generating OpenAPI specification..."
node ./scripts/generate-openapi.js # Example script path
GENERATION_EXIT_CODE=$?
if [ $GENERATION_EXIT_CODE -ne 0 ]; then
  echo "OpenAPI generation failed!"
  exit 1
fi
# --- End OpenAPI Generation Step ---

# --- Run lint-staged (Includes Prettier, ESLint, and potentially the Annotation Linter) ---
npx lint-staged
LINT_STAGED_EXIT_CODE=$?

if [ $LINT_STAGED_EXIT_CODE -ne 0 ]; then
    echo "lint-staged checks failed!"
    exit 1
fi
# --- End lint-staged ---


# --- Add Generated Spec & Handle Submodule Commit ---
# Add the generated spec file to the main repo commit
git add ./docs/api-reference/openapi.json

# Add changes within the docs submodule (if any other manual changes were staged)
# This assumes 'docs' is the submodule path
if [ -d "docs" ]; then
    # Check if there are staged changes within the submodule directory *for the submodule itself*
    # This is tricky; a simple 'git diff --cached docs' might not be enough.
    # A safer approach might be to require manual staging within the submodule first,
    # or have a separate commit step for the submodule.
    # For now, just adding the openapi.json in the main repo.
    # Further refinement might be needed based on submodule workflow.
    echo "Note: Manual changes within the '/docs' submodule must be committed separately within the submodule."
fi
# --- End Submodule Handling ---

# Exit 0 if all checks and generation passed
exit 0
```

## 5. OpenAPI Annotation Linter Script
- **Location:** A script (e.g., `scripts/lint-openapi-annotations.js`) needs to be created according to `openapi-annotation-linter-protocol.mdc`.
- **Purpose:** Parses JSDoc annotations from staged `app/src/routes/api/**/*.js` files and verifies the presence of required minimum tags (`@summary`, `@response`).
- **Execution:** Invoked via the pre-commit hook through `lint-staged` (see Section 4.3).

## 6. Broken Link Checker (Optional CI Step)
- **Tool:** Consider using a tool like `markdown-link-check`.
- **Integration:** Recommended to run as part of the CI/CD pipeline against the `/docs` directory after checkout.
- **Command (Example):** `markdown-link-check ./docs/**/*.md` (adjust based on tool).
- **Purpose:** Detects broken internal or external links in Markdown files within the documentation submodule.

## 7. Workflow Integration

1.  **Pre-Commit Hook:** The configured Husky hook will automatically run `lint-staged` before each commit. `lint-staged` will then run Prettier and ESLint on the files staged for commit. Commits will fail if linting errors occur.
2.  **IDE Integration:** Configure your IDE (e.g., VS Code, Cursor) to use the project's ESLint and Prettier configurations for real-time feedback and formatting on save.
3.  **CI Pipeline (Recommended):** Add steps to your CI workflow (e.g., GitHub Actions) to run format checks (`prettier --check .`) and lint checks (`eslint .`). Fail the build if checks do not pass.

    ```yaml
    # Example GitHub Action step
    # - name: Lint and Format Check
    #   run: |
    #     pnpm run lint # Assuming 'lint' script runs eslint .
    #     pnpm run format:check # Assuming 'format:check' script runs prettier --check .
    ```

## 8. Verification

*   Ensure linters and formatters run without errors.
*   Confirm the pre-commit hook blocks commits with linting errors or formatting issues.
*   Verify CI checks fail on PRs with violations.

