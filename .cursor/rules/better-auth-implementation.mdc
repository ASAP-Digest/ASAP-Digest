---
description: 
globs: 
alwaysApply: false
---
# Better Auth Project Implementation v1.1

*(Self-correction: Updated version, corrected server config example)*

## 1. Server-Side Configuration (**Refer to `better-auth-config.mdc` for full details**)

The configuration object passed to `beerver/auth.js` MUST follow the structure defined in `[better-auth-config.mdc](mdc:.cursor/rules/better-auth-config.mdc)`. **Crucially**, for this project, this involves providing *both* the `database` key (with the Kysely dialect) *and* the `adapter` key (with explicit adapter functions) at the top level. A simplified example reflecting this required structure is shown below:

````javascript
// src/lib/server/auth.js
import { betterAuth } from "better-auth";
import { dialect } from './path/to/dialect'; // Import your configured Kysely dialect
import { adapter } from './path/to/adapter-functions'; // Import your full adapter object
import { hooks } from './path/to/hooks'; // Import your hooks object

export const auth = betterAuth({
    // --- Top-Level Options ---
    secret: process.env.BETTER_AUTH_SECRET, // REQUIRED: Use 'secret' key
    sessionCookieName: 'better_auth_session', // Optional
    sessionExpiresIn: 30 * 24 * 60 * 60 * 1000, // Optional

    // --- Database Configuration (Kysely Dialect) ---
    // Required for standard Kysely integration
    database: {
        dialect: dialect,   // REQUIRED: Pass the Kysely dialect instance
        type: "mysql"       // REQUIRED: Explicit type for the dialect
    },

    // --- Custom Adapter Configuration (Overrides) ---
    // Required in this project to ensure specific functions (e.g., createSessionFn 
    // with UUID generation) are used, working around observed issues.
    adapter: adapter, 

    // --- Lifecycle Hooks ---
    // Optional: Assign hook functions
    after: hooks 
});
````

**Key Structural Points:**
- Uses top-level `secret` key.
- Uses top-level `database` key containing `dialect` and `type`.
- Uses top-level `adapter` key containing the object with explicit function implementations (e.g., `getUserById`, `createSession`).
- Uses top-level `after` key for hooks.
- **Refer to `better-auth-config.mdc` for the full rationale and detailed structure.**

## 2. SvelteKit Integration (**Refer to `better-auth-route-handling.mdc` for full details**)

Integrate Better Auth with SvelteKit hooks and route handlers. (This section remains consistent with previous versions, just reinforcing the reference).

````javascript
// src/hooks.server.js
import { auth } from '$lib/server/auth'; // Ensure 'auth' is the CORRECTLY configured instance
import { svelteKitHandler } from 'better-auth/svelte-kit';

// Simple hook setup - see better-auth-route-handling.mdc for full context
export const handle = svelteKitHandler({ auth }); 

// src/routes/api/auth/[...auth]/+server.js
import { auth } from '$lib/server/auth'; // Ensure 'auth' is the CORRECTLY configured instance
import { svelteKitHandler } from "better-auth/svelte-kit"; // Use correct import

/** @type {import('@sveltejs/kit').RequestHandler} */
const handler = (event) => {
    return svelteKitHandler({
        event: { // Ensure structure matches library expectation
            request: event.request,
            url: event.url
        },
        resolve: () => {}, // Empty resolve for dedicated auth routes
        auth // Pass the configured auth instance
    });
};

// Export all methods
export const GET = handler;
export const POST = handler;
export const PUT = handler; 
export const DELETE = handler;
export const PATCH = handler;
export const OPTIONS = handler; 
````

**Key Reminders:**
- Use `svelteKitHandler` from `better-auth/svelte-kit`.
- Pass the fully configured `auth` instance.
- Structure the arguments passed to `svelteKitHandler` correctly.
- **Refer to `better-auth-route-handling.mdc` for definitive guidance.**

## 3. Client-Side Configuration (Unchanged)

````javascript
// src/lib/auth-client.js
import { createAuthClient } from "better-auth/svelte";
import { dev } from '$app/environment';

export const authClient = createAuthClient({
    baseURL: dev ? 'https://localhost:5173' : 'https://app.asapdigest.com'
});
````

## 4. Component Usage (Unchanged)

````javascript
// In Svelte components:
import { authClient } from "$lib/auth-client";

// Sign In
const signIn = async () => {
    const { data, error } = await authClient.signIn.email({
        email,
        password
    });
};

// Get Session
const { data: session } = authClient.useSession();
````

## 5. Required Environment Variables (Unchanged)

````plaintext
BETTER_AUTH_SECRET=your-secret-key
BETTER_AUTH_URL=https://localhost:5173 // Base URL for the SvelteKit app
DB_HOST=localhost // Or IP if needed
DB_PORT=10018 // Specific LocalWP port
DB_NAME=local
DB_USER=root
DB_PASS=root
WORDPRESS_API_URL=https://asapdigest.local/wp-json // Needed for hooks potentially
BETTER_AUTH_SHARED_SECRET=your-secret-key // If different from main secret, for WP<->SK comms
````

## 6. Type Safety (Unchanged)

````typescript
// Example JSDoc or app.d.ts definitions
/** @typedef {import('$lib/server/auth').Session} BetterAuthSession */
/** @typedef {import('$lib/server/auth').User} BetterAuthUser */
````

## 7. Error Handling (Unchanged)

````javascript
try {
    const { data, error } = await authOperation();
    if (error) {
        console.error('Auth error:', error.message);
        // Handle error appropriately
    }
} catch (err) {
    console.error('Unexpected auth error:', err);
}
````

This rule should be applied when:
- Reviewing or modifying the core Better Auth setup.
- Integrating authentication into SvelteKit routes or hooks.
- Troubleshooting authentication or session issues.


