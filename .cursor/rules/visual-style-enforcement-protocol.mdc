---
description: 
globs: 
alwaysApply: true
---
# Visual Style Enforcement Protocol v1.1

*(Self-correction: v1.1 - Integrated strict checks, removed duplication)*

## 1. Purpose
This protocol ensures that all UI components and layouts developed or modified within the ASAP Digest project strictly adhere to the specifications defined in the `golden-ratio-design-system-protocol.mdc` (GRDSP). It acts as a **higher-level verification layer** applied during component development, modification, and review. It integrates automated checks from `strict-visual-enforcement-protocol.mdc` and includes checks requiring visual inspection or `ui-check.mdc`.

## 2. Protocol Integration Layer
```text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. Software Development Meta Protocol   │ // Overall Guidance
│ 2. Rule Execution Protocol              │ // Rule Application
│ 3. golden-ratio-design-system-protocol  │ // The Style Guide (GRDSP)
│ 4. strict-visual-enforcement-protocol   │ // Handles Automatable Checks (Prerequisite)
│ 5. sk2-scns5-t4-int.mdc                 │ // Base Svelte/Tailwind rules
│ 6. icon-management.mdc                  │ // Icon specifics
│ 7. ui-check.mdc                         │ // Visual verification tool
│ 8. add-shadcn-svelte-component          │ // Component addition workflow
│ 9. Visual Style Enforcement (This v1.1) │ // Guide-specific checks
│ 10. Testing & Verification Protocol     │ // Final task review
│ 11. Cross-Protocol Comms & Verification │
│ 12. Audit Trail System                  │
└─────────────────────────────────────────┘
```

## 3. Activation & Scope
- **Trigger:** Automatically invoked whenever:
    - A new UI component (`.svelte` file in `app/components/` or `app/src/routes/`) is created.
    - An existing UI component is modified (especially its template structure or styling classes).
    - The `ui-check.mdc` protocol is executed.
    - The `add-shadcn-svelte-component` rule is completed.
- **Scope:** Applies to all `.svelte` files contributing to the user interface.

## 4. Core Verification Checklist

This checklist MUST be applied to the component/changes under review. Report specific violations found.

**Phase 1: Automatable Checks (Prerequisite)**

1.  **Execute Strict Enforcement Protocol:**
    *   **Action:** Run the `strict-visual-enforcement-protocol.mdc` against the target file(s).
    *   **Requirement:** This protocol MUST pass all its checks (Color Syntax, Spacing Grid (basic regex), Typography Variables, Radius Variables, Icon Imports/Usage (basic), Motion Variables) before proceeding to Phase 2.
    *   **Status:** [ ] Pass / [ ] Fail (Report failures from strict protocol and HALT)

**Phase 2: Contextual & Visual Verification**

*Assuming Phase 1 Passed*

2.  **Component State Implementation (Visual Check):**
    *   **Tool:** `ui-check.mdc` / Manual Review
    *   **Rule:** Verify required states (Hover, Focus, Active, Disabled, Loading) match the GRDSP visuals (Section 9). Are focus rings using `--ring`? Are disabled states styled correctly?
    *   **Status:** [ ] Pass / [ ] Fail (Requires `ui-check` input or manual confirmation)

3.  **Accessibility - Contrast (Tool/Visual Check):**
    *   **Tool:** Browser DevTools / Accessibility Scanner / `ui-check.mdc` / Manual Review
    *   **Rule:** Verify text contrast meets WCAG AA (4.5:1) against its background, using GRDSP palette (Section 5 & 13).
    *   **Status:** [ ] Pass / [ ] Fail (Requires external tool or `ui-check` input)

4.  **Accessibility - Focus State Visibility (Visual Check):**
    *   **Tool:** `ui-check.mdc` / Manual Review
    *   **Rule:** Verify focus states are clearly visible and consistently use the `--ring` variable/style as defined in GRDSP (Section 9 & 13).
    *   **Status:** [ ] Pass / [ ] Fail (Requires `ui-check` input or manual confirmation)

5.  **Layout & Composition (Visual Check):**
    *   **Tool:** `ui-check.mdc` / Manual Review
    *   **Rule:** Does the layout adhere to the intended structure, alignment, container usage, and grid patterns? Does it align with Golden Ratio guidelines if applicable? (GRDSP Section 6)
    *   **Status:** [ ] Pass / [ ] Fail (Requires `ui-check` input or manual confirmation)

6.  **Color Balance & Usage (Visual Check):**
    *   **Tool:** `ui-check.mdc` / Manual Review
    *   **Rule:** Does the color application *feel* consistent with the 60/30/10 guideline (GRDSP Section 5.6)? Are neon accents used appropriately? Are semantic colors (--surface, --text, --functional) used correctly?
    *   **Status:** [ ] Pass / [ ] Fail (Requires `ui-check` input or manual confirmation)

7.  **Typography Hierarchy (Visual Check):**
    *   **Tool:** `ui-check.mdc` / Manual Review
    *   **Rule:** Is the visual hierarchy clear and consistent with the type scale defined in GRDSP (Section 3)?
    *   **Status:** [ ] Pass / [ ] Fail (Requires `ui-check` input or manual confirmation)

8.  **Spacing & Rhythm (Visual Check):**
    *   **Tool:** `ui-check.mdc` / Manual Review
    *   **Rule:** Does the spacing *look* consistent and follow the intended rhythm (8pt grid)? Are exceptions to the 4pt rule documented where used? (GRDSP Section 4)
    *   **Status:** [ ] Pass / [ ] Fail (Requires `ui-check` input or manual confirmation)

9.  **Component-Specific Verification (Contextual Code/Visual Check):**
    *   **Tool:** Code Analysis / `ui-check.mdc` / Manual Review
    *   **Rule:** Verify component variants/sizes match visual definitions (GRDSP Section 10). Check specific component rules (Links, Icons, etc.) from GRDSP.
    *   **Status:** [ ] Pass / [ ] Fail (Requires context and potentially `ui-check`)

10. **Responsiveness (Visual Check):**
    *   **Tool:** Browser DevTools / `ui-check.mdc` (with different viewport screenshots)
    *   **Rule:** Does the UI adapt correctly at defined breakpoints? Are touch targets adequate? (GRDSP Section 6)
    *   **Status:** [ ] Pass / [ ] Fail (Requires multiple screenshots or manual testing)

11. **Animation/Transition Feel (Visual Check):**
    *   **Tool:** `ui-check.mdc` / Manual Interaction
    *   **Rule:** Do animations *feel* smooth and adhere to GRDSP principles (Section 7)?
    *   **Status:** [ ] Pass / [ ] Fail (Requires interaction or `ui-check`)

## 5. Integration with `ui-check.mdc`
- When `ui-check.mdc` is run, the agent MUST first ensure the checks in **Phase 1** (`strict-visual-enforcement-protocol.mdc`) of *this* protocol have passed.
- The `editRequest` parameter for `reviewEdit` in `ui-check.mdc` MUST mention verification against the Phase 2 guidelines of this protocol (`visual-style-enforcement-protocol.mdc`).
- If `reviewEdit` returns "no", subsequent edits MUST be re-verified against Phase 1 and Phase 2 of this protocol.

## 6. Enforcement & Remediation
- If any checks in Phase 1 or Phase 2 fail, the agent MUST:
    1. Document the violation(s) and relevant GRDSP section(s).
    2. Propose and implement corrections.
    3. Re-run the verification checklist (both phases).
    4. If integrated with `ui-check.mdc`, only proceed to `reviewEdit` *after* all checks pass.
- If compliance cannot be achieved or conflicts arise, trigger `universal-error-resolution-protocol.mdc`.

## 7. Maintenance
- This protocol MUST be updated if `golden-ratio-design-system-protocol.mdc` changes significantly.
- The prerequisite link to `strict-visual-enforcement-protocol.mdc` MUST be maintained.

- [ ] **Performance:** Are animations primarily applied to `transform` and `opacity`? (Ref: Style Guide Section: Animation Guidelines)

### 4.5. Component-Specific Verification
```text
- [ ] **Icon Usage:** (Integrates `icon-management.mdc`) Are icons used via the `Icon` wrapper and imported from `lucide-compat.js`? Are size/color/accessibility applied correctly? (Ref: Style Guide Sections: Icon System, Accessibility Standards)
- [ ] **Link Styling:** Do `<a>` tags match defined styles/states? Are variations (`underlined`, `muted`) applied correctly? (Ref: Style Guide Section: Link Styling)
- [ ] **Component States:** Do interactive components (Buttons, Inputs, etc.) correctly implement required states (Default, Hover, Focus, Active, Disabled, Loading)? (Ref: Style Guide Section: Component States)
- [ ] **Variants/Sizes:** Do component variants/sizes match the visual definitions? (Ref: Style Guide Section: Standard Component Properties)
- [ ] **Layout Components:** Are standard layout components (`Container`, Grid utilities) used appropriately? (Ref: Style Guide Section: Layout Components, Grid System)
```

### 4.6. Responsive Design Verification
```text
- [ ] **Breakpoints:** Does the component adapt correctly at defined breakpoints? (Ref: Style Guide Section: Breakpoints)
- [ ] **Mobile-First:** Is base styling mobile-appropriate, enhanced for larger screens? (Ref: Style Guide Section: Responsive Principles)
- [ ] **Touch Targets:** Are interactive elements sufficiently large (>= 44px) on touch devices? (Ref: Style Guide Section: Responsive Principles)
```

### 4.7. Imagery Verification
```text
- [ ] **Alt Text:** Does the image have appropriate `alt` text? (Ref: Style Guide Section: Technical Requirements)
- [ ] **Lazy Loading:** Is `loading="lazy"` used for non-critical images? (Ref: Style Guide Section: Technical Requirements)
- [ ] **Component Usage:** Is the standard `Image.svelte` component used where applicable? (Ref: Style Guide Section: Image Component)
```

### 4.8. Accessibility Verification
```text
- [ ] **Focus States:** Are focus states visible and consistent, using the defined `--focus-ring`? (Ref: Style Guide Section: Focus States, Accessibility Standards)
- [ ] **Keyboard Navigation:** Is the component fully keyboard operable? (Ref: Style Guide Section: Accessibility Standards)
- [ ] **ARIA Attributes:** Are appropriate ARIA roles/states/properties used? (Ref: Style Guide Section: Accessibility Standards)
- [ ] **Semantic HTML:** Is semantic HTML used correctly? (Ref: Style Guide Section: Accessibility Standards)
```

## 5. Integration with `ui-check.mdc`
- When `ui-check.mdc` is run, the agent MUST perform the checks outlined in Section 4 of *this* protocol *before* calling the `reviewEdit` function.
- The `editRequest` parameter for `reviewEdit` SHOULD mention verification against this protocol.
- If `reviewEdit` returns "no", subsequent edits MUST be re-verified against this protocol.

## 6. Enforcement & Remediation
- If any checks in Section 4 fail, the agent MUST:
    1. Document the violation(s) and relevant Style Guide section(s).
    2. Propose and implement corrections.
    3. Re-run the verification checklist.
    4. If integrated with `ui-check.mdc`, only proceed to `reviewEdit` *after* all checks pass.
- If compliance cannot be achieved or conflicts arise, trigger `universal-error-resolution-protocol.mdc`.

## 7. Maintenance
- This protocol MUST be updated if `VISUAL_IDENTITY_STYLE_GUIDE.md` changes significantly.
- Cross-reference links (`mdc:md-docs/VISUAL_IDENTITY_STYLE_GUIDE.md`) MUST be kept accurate.

---

**Summary of Findings & Proposal:**

1.  **Formatting:** `VISUAL_IDENTITY_STYLE_GUIDE.md` needs reformatting per `rule-formatting-protocol.mdc`.
2.  **Content:** Mostly consistent where overlapping with existing rules, but adds significant new detail. Minor filename discrepancy noted for icons.
3.  **Existing Enforcement:** Core HSL colors, spacing principles, icon system basics are covered.
4.  **Proposal:** A new `visual-style-enforcement-protocol.mdc` is proposed to ensure the detailed visual specifications from the style guide are verified during UI development and modification, integrating with `ui-check.mdc`.

