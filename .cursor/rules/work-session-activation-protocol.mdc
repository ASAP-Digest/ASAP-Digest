---
description: 
globs: 
alwaysApply: true
---
# Work Session Activation Protocol v2.5

*(Self-correction: Updated version, integration points, and RWS description)*

## 1. Purpose
This protocol defines the commands and procedures for initiating agent workflow (`IAW`), initiating testing (`ST`), beginning (`BWS`), and concluding (`EWS`) formal work sessions. It ensures integration with the `Status Check Protocol (v2.1+)`, the `Enhanced Work Session Management Protocol (WSMP v2.9+)`, and the `Testing & Verification Protocol v1.3+`.

## 2. Protocol Integration Layer
*(Self-correction: Updated WSMP, this protocol's version)*
````text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. Software Development Meta Protocol   │
│ 2. Rule Execution Protocol              │
│ 3. Status Check Protocol (v2.1+)        │ // Input Source for IAW/BWS
│ 4. Enhanced Work Session Mgmt (v2.9+)   │ // Activated Protocol (Handles RWS/BWS/EWS logic) (Updated)
│ 5. Memory Maintenance Protocol          │ // Entity management via WSMP
│ 6. Testing & Verification Protocol v1.3+│ // Handles EWS TESTING/COMPLETED & ST Command
│ 7. Cross-Protocol Comms & Verification   │
│ 8. Audit Trail System                   │
│ 9. Work Session Activation Proto (This) │ // Defines trigger commands (IAW, ST, BWS, EWS, RWS) (Updated)
└─────────────────────────────────────────┘
````

## 3. Activation Commands & Flow

### 3.1. Initiate Agent Workflow (IAW)
-   **Command:** `Initiate Agent Workflow` or alias `IAW`
-   **Purpose:** Signals the agent's readiness to work, checks project status, and awaits further instruction (typically `ST`, `RWS`, or direct `BWS`).
-   **Execution:**
    1.  MUST execute `Status Check` (`SC` v2.1+) immediately.
    2.  MUST report the output of `SC` to the user.
    3.  MUST set an internal state flag: `agent_workflow_initialized = true`.
    4.  MUST explicitly state it is awaiting the next command (`ST`, `RWS`, or `BWS`).
    5.  MUST NOT initiate any work or start a work session (`BWS`) automatically.

### 3.2. Start Testing (ST)
-   **Command:** `Start Testing` or alias `ST`
-   **Purpose:** Initiates the active testing phase for tasks ready for verification.
-   **Parameters:**
    -   **`[TaskID]` (Optional):** If provided, triggers testing *only* for the specified task ID (must be in `🔬` state). Handled by `Testing & Verification Protocol v1.3+`.
    -   **(No TaskID Provided):** If issued *after* `IAW` (flag `agent_workflow_initialized = true`) and *without* a specific `TaskID`, triggers the sequence handled by `Testing & Verification Protocol v1.3+` to transition all `🔬` tasks to `🧪`.
-   **Prerequisites:**
    -   If `[TaskID]` is provided, the task must be in `PENDING_TESTING` (`🔬`).
    -   If no `[TaskID]` is provided, the `IAW` command must have been executed previously (`agent_workflow_initialized = true`).

### 3.3. Resume Work Session (RWS)
-   **Command:** `Resume Work Session` or alias `RWS`
-   **Purpose:** Resumes a previously saved (`⏸️`) session, or initiates a new session (`BWS`) based on a complex fallback logic considering errors, testing status, and task hierarchy. See `WSMP v2.9+` for detailed logic.
-   **Parameters:**
    -   **`[saveSessionID]` (Optional):** If provided, attempts to resume the specific saved session.
    -   **(No ID Provided):** Triggers the hierarchy-aware fallback logic in `WSMP v2.9+` (`Error` -> `⏸️` -> `🧪` (Report) -> `🔄` -> `🔬` (Report) -> `⏳` -> `❌`).
-   **WSMP v2.9+ Handling:** Defined in `work-session-management-protocol.mdc`.

### 3.4. Begin Work Session (BWS)
-   **Command:** `Begin Work Session` or alias `BWS`
-   **Purpose:** Initiates a tracked work session targeting a specific task.
-   **Prerequisites:**
    -   MUST execute `Status Check` (`SC` v2.1+) immediately prior to `BWS`. The session will target the highest priority task identified by `SC` (unless overridden by specific RWS fallback).
-   **WSMP v2.9+ Handling:** Defined in `work-session-management-protocol.mdc`. Handles context analysis based on the preceding SC, session creation, state loading, verification, and audit logging.

### 3.5. End Work Session (EWS)
-   **Command:** `End Work Session` or alias `EWS`
-   **Purpose:** Formally closes the *active* work session. Triggers the finalization sequence defined in `WSMP v2.9+`.
-   **WSMP v2.9+ Handling & Parameters:** Requires an active `WorkSession`. Accepts an optional `Reason` (`TESTING`, `COMPLETED`, `NORMAL`, `INTERRUPTED`, `FAILED`). Integrates with `Testing & Verification Protocol v1.3+` for `TESTING` and `COMPLETED` reasons.

## 4. Standard Workflow Example (`IAW -> RWS -> BWS`)
````bash
# Step 1: Initiate workflow and check status
IAW

# --- (Agent runs SC, reports status, sets flag, waits) ---
# Example SC Output Snippet:
# 🎯 Current / Operational Priority:
# - 🔄 Task_DEF (Reason: Deepest active task)
# ---
# Agent: Status checked. Workflow initiated. Awaiting next command (ST, RWS, or BWS).

# Step 2: User attempts to resume/start work
RWS

# --- (Agent executes WSMP v2.9+ RWS fallback logic) ---
# (Assuming no blocking errors, paused, or testing tasks)
# Agent: RWS Fallback: Found deepest active task: Task_DEF (🔄).
# Agent: Initiating BWS for Task_DEF.
# Agent: Beginning work session for Task_DEF (🔄). Session ID: WS_Feature_20250413_180500.

# --- (Work session is now active on Task_DEF) ---
# ...
````

## 5. Implementation Notes
-   This protocol primarily defines the **user-facing commands and the trigger sequence**.
-   The detailed execution logic for `ST` resides in `Testing & Verification Protocol v1.3+`.
-   The detailed execution logic for `RWS` and `BWS` resides in `Enhanced Work Session Management Protocol v2.9+`.
-   The `agent_workflow_initialized` flag is a conceptual state marker for the agent during the interaction.

## 6. Verification Checklist (for this protocol)
*(Self-correction: Updated checks for v2.5)*
-   [ ] `IAW` command definition updated (runs SC, sets flag, waits for ST, RWS, or BWS).
-   [ ] `ST` command definition unchanged.
-   [ ] `RWS` command definition and description updated to mention fallback logic and WSMP v2.9+.
-   [ ] `BWS` command definition unchanged.
-   [ ] `EWS` command definition unchanged.
-   [ ] Protocol integration layer lists correct protocol versions (`SC v2.1+`, `WSMP v2.9+`, `TVP v1.3+`).
-   [ ] Workflow example updated to show `IAW -> RWS`.
-   [ ] Formatting adheres to `rule-formatting-protocol.mdc`.

