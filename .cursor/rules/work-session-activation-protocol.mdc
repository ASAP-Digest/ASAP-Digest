---
description: 
globs: 
alwaysApply: true
---
# Work Session Activation Protocol v2.0

## 1. Purpose
This protocol defines the commands and procedures for initiating (`BWS`) and concluding (`EWS`) formal work sessions. It ensures integration with the `Status Check Protocol (v2.0)` for context establishment and the `Enhanced Work Session Management Protocol (WSMP v2.0)` for managing the session lifecycle.

## 2. Protocol Integration Layer
This protocol operates within the established framework and relies heavily on the outputs and triggers of other key protocols.

````text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. Software Development Meta Protocol   │
│ 2. Rule Execution Protocol              │
│ 3. Status Check Protocol (v2.0)         │ // Input Source
│ 4. Enhanced Work Session Mgmt (v2.0)    │ // Activated Protocol
│ 5. Memory Maintenance Protocol          │
│ 6. Cross-Protocol Comms & Verification   │
│ 7. Audit Trail System                   │
└─────────────────────────────────────────┘
````

## 3. Activation Commands & Flow

### 3.1. Begin Work Session (BWS)
-   **Command:** `Begin Work Session` or alias `BWS`
-   **Prerequisite:** MUST execute `Status Check` (`SC`) immediately prior to `BWS`. The output of `SC` provides essential context.
-   **Purpose:** Initiates a tracked work session using context from the preceding `SC` report. Triggers the start sequence defined in `WSMP v2.0`.
-   **Optional Parameters (WSMP v2.0):**
    -   `Previous Session ID`: If resuming a saved session (identified by a `WorkSessionSave` entity).
    -   `Session Type`: `DEBUG`, `FEATURE`, `FIX`, `REFACTOR` (Defaults can be set in WSMP).
-   **Core Actions Triggered (Handled by WSMP):**
    1.  Analyzes the preceding `SC` report for `🎯 Current / Operational Priority` and `⚙️ Overall Context`.
    2.  Gets current timestamp (`mcp_mcp_datetime_get_datetime`).
    3.  Creates `WorkSession` entity in Server Memory (linking to the `StatusCheck` entity from the prerequisite `SC` run).
    4.  Loads state if `Previous Session ID` is provided and valid.
    5.  Performs Verification Chain checks (L1/L3).
    6.  Records `SESSION_START` in Audit Trail.

### 3.2. End Work Session (EWS)
-   **Command:** `End Work Session` or alias `EWS`
-   **Purpose:** Formally closes the *active* work session. Triggers the finalization sequence defined in `WSMP v2.0`.
-   **Optional Parameters (WSMP v2.0):**
    -   `Reason`: `NORMAL`, `INTERRUPTED`, `COMPLETED`, `FAILED`.
-   **Core Actions Triggered (Handled by WSMP):**
    1.  Gets current timestamp (`mcp_mcp_datetime_get_datetime`).
    2.  Executes session finalization logic (e.g., task status updates in memory/roadmap, documentation updates).
    3.  Creates relevant entities (e.g., `WorkSessionEnd`) in Server Memory.
    4.  Performs final Verification Chain checks.
    5.  Records `SESSION_END` in Audit Trail.

## 4. Standard Workflow Example

````bash
# Step 1: Check the current project status
SC

# --- (SC Output Received) ---
# Example SC Output Snippet:
# 🎯 Current / Operational Priority:
# - 🔄 Task: Implement User Login Form (Reason: Next In Progress)
# ⚙️ Overall Context:
# Currently working within: Task 2: Authentication Module
# ---

# Step 2: Begin the work session, using context from SC
#    (Priority/Context are implicitly known from the preceding SC)
BWS FEATURE

# --- (Work session is now active, managed by WSMP) ---
# ... Perform development tasks ...
# ... Protocols like Task Tracking, Memory Maintenance are active ...
# ... Maybe use SWS (Save Work Session) if interrupted ...
# ... Resolve errors using UERP ...

# Step 3: End the work session when done or interrupted
EWS COMPLETED # Or EWS INTERRUPTED, etc.

# --- (Work session is now closed, WSMP handles finalization) ---
````

## 5. Implementation Notes

-   This protocol acts as the **trigger mechanism** for the more detailed procedures defined within `WSMP v2.0`.
-   The actual creation of Server Memory entities (`WorkSession`, `WorkSessionEnd`) and the handling of session state are the responsibility of `WSMP v2.0`, which is activated by the `BWS` and `EWS` commands defined here.
-   The strict requirement to run `SC` *before* `BWS` ensures that every work session starts with a clear, documented understanding of the current project state and priority.

## 6. Verification Checklist (for this protocol)
-   [ ] `BWS` command exists and is documented.
-   [ ] `EWS` command exists and is documented.
-   [ ] Prerequisite of running `SC` before `BWS` is clearly stated (MUST).
-   [ ] Linkage between `BWS`/`EWS` commands and the activation of `WSMP v2.0` procedures is clear.
-   [ ] Integration with `Status Check` output (Priority, Context) for `BWS` initiation is described.
-   [ ] Formatting adheres to `rule-formatting-protocol.mdc` (outer block, quadruple backticks for nested blocks like the workflow example).
