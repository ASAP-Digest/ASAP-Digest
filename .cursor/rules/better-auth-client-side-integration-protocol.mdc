---
description: 
globs: 
alwaysApply: false
---
---
description: Defines standardized patterns for integrating Better Auth on the client side within a headless WordPress/SvelteKit application.
globs: ["app/src/lib/stores/authStore.js", "app/src/lib/services/authService.js", "app/src/routes/+layout.js", "app/src/lib/components/AuthProvider.svelte", "app/src/routes/(protected)/+layout.js", "app/src/lib/components/auth/LoginForm.svelte", "app/src/lib/components/auth/RegisterForm.svelte"]
alwaysApply: true
---
# Better Auth Client Side Integration Protocol v1.1

*(Self-correction: v1.1 - Added client-side initiation for OAuth and Magic Link)*

## 1. Purpose

This protocol establishes standardized patterns for integrating Better Auth on the client side within a headless WordPress/SvelteKit application. It ensures a consistent, type-safe approach to authentication state management, auth flows, and API interactions from the client perspective. This protocol is designed for JavaScript/JSDoc implementations, providing strong type safety without requiring TypeScript.

## 2. Protocol Integration Layer

```text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. Better Auth Configuration Protocol   │ // Server-side setup
│ 2. Better Auth Route Handling Protocol  │ // API endpoints
│ 3. Better Auth Session Management Proto │ // Session handling
│ 4. Better Auth Error Handling Protocol  │ // Error handling
│ 5. JSDoc Type Definitions Protocol      │ // Type definitions
│ 6. Client Side Integration (This)       │ // Client-side implementation
└─────────────────────────────────────────┘
```

## 3. Core Components and Setup

### 3.1 Client Side Store Setup

1.  **Auth Store Definition:**
    *   MUST create a centralized auth store for state management:

```javascript
// $lib/stores/authStore.js

import { writable, derived } from 'svelte/store';

/**
 * @typedef {Object} User
 * @property {string} id - User ID
 * @property {string} email - User email address
 * @property {string} [displayName] - User display name
 * @property {string[]} [roles] - User roles
 */

/**
 * @typedef {Object} AuthState
 * @property {User|null} user - Authenticated user or null if not authenticated
 * @property {boolean} loading - Whether auth state is being loaded
 * @property {boolean} initialized - Whether auth has been initialized
 * @property {string|null} error - Authentication error message or null
 */

/**
 * Default auth state
 * @type {AuthState}
 */
const DEFAULT_STATE = {
  user: null,
  loading: true,
  initialized: false,
  error: null
};

/**
 * Create auth store with methods
 * @returns {Object} Auth store with state and methods
 */
function createAuthStore() {
  const { subscribe, set, update } = writable(DEFAULT_STATE);

  return {
    subscribe,
    
    /**
     * Sets the current user
     * @param {User|null} user - Authenticated user or null
     */
    setUser: (user) => {
      update(state => ({ ...state, user, loading: false, initialized: true, error: null }));
    },
    
    /**
     * Sets loading state
     * @param {boolean} isLoading - Whether auth is loading
     */
    setLoading: (isLoading) => {
      update(state => ({ ...state, loading: isLoading }));
    },
    
    /**
     * Sets error state
     * @param {string|null} error - Error message or null
     */
    setError: (error) => {
      update(state => ({ ...state, error, loading: false }));
    },
    
    /**
     * Resets auth state (logout)
     */
    reset: () => {
      set({ ...DEFAULT_STATE, loading: false, initialized: true });
    }
  };
}

// Create and export the auth store
export const authStore = createAuthStore();

// Convenience derived stores
export const user = derived(authStore, $auth => $auth.user);
export const isAuthenticated = derived(authStore, $auth => Boolean($auth.user));
export const isLoading = derived(authStore, $auth => $auth.loading);
export const authError = derived(authStore, $auth => $auth.error);
```

2.  **Auth Service Definition:**
    *   MUST implement core auth service methods:

```javascript
// $lib/services/authService.js

import { authStore } from '$lib/stores/authStore';
import { browser } from '$app/environment';

/**
 * @typedef {import('$lib/stores/authStore').User} User
 */

/**
 * @typedef {Object} LoginCredentials
 * @property {string} email - User email
 * @property {string} password - User password
 */

/**
 * @typedef {Object} RegistrationData
 * @property {string} email - User email
 * @property {string} password - User password
 * @property {string} [displayName] - User display name
 */

/**
 * @typedef {Object} AuthResponse
 * @property {boolean} success - Whether the operation succeeded
 * @property {User} [user] - User data if successful
 * @property {string} [error] - Error message if unsuccessful
 */

/**
 * Authentication service for client-side auth operations
 */
const authService = {
  /**
   * Initializes auth state by checking current session
   * @returns {Promise<User|null>} Authenticated user or null
   */
  initAuth: async () => {
    if (!browser) return null;
    
    try {
      authStore.setLoading(true);
      
      const response = await fetch('/api/auth/session');
      const data = await response.json();
      
      if (data.authenticated && data.user) {
        authStore.setUser(data.user);
        return data.user;
      } else {
        authStore.reset();
        return null;
      }
    } catch (error) {
      console.error('Auth initialization error:', error);
      authStore.setError('Failed to initialize authentication');
      return null;
    } finally {
      authStore.setLoading(false);
    }
  },
  
  /**
   * Logs in a user with email and password
   * @param {LoginCredentials} credentials - Login credentials
   * @returns {Promise<AuthResponse>} Auth response
   */
  login: async (credentials) => {
    if (!browser) {
      return { success: false, error: 'Cannot login during SSR' };
    }
    
    try {
      authStore.setLoading(true);
      
          const response = await fetch('/api/auth/email/login', { // Assuming default BA path
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(credentials),
        credentials: 'include' // Important for cookies
      });
      
      const data = await response.json();
      
          if (response.ok && data.user) { // Check response.ok and user presence
        authStore.setUser(data.user);
        return { success: true, user: data.user };
      } else {
            const errorMessage = data.error?.message || 'Login failed';
            authStore.setError(errorMessage);
            return { success: false, error: errorMessage };
      }
    } catch (error) {
      console.error('Login error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Login failed';
      authStore.setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      authStore.setLoading(false);
    }
  },
  
  /**
   * Registers a new user
   * @param {RegistrationData} data - Registration data
   * @returns {Promise<AuthResponse>} Auth response
   */
  register: async (data) => {
    if (!browser) {
      return { success: false, error: 'Cannot register during SSR' };
    }
    
    try {
      authStore.setLoading(true);
      
          const response = await fetch('/api/auth/email/register', { // Assuming default BA path
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
        credentials: 'include'
      });
      
      const responseData = await response.json();
      
          if (response.ok && responseData.user) { // Check response.ok and user presence
        authStore.setUser(responseData.user);
        return { success: true, user: responseData.user };
      } else {
             const errorMessage = responseData.error?.message || 'Registration failed';
            authStore.setError(errorMessage);
            return { success: false, error: errorMessage };
      }
    } catch (error) {
      console.error('Registration error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Registration failed';
      authStore.setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      authStore.setLoading(false);
    }
  },
  
  /**
   * Logs out the current user
   * @returns {Promise<{success: boolean, error?: string}>} Success or error
   */
  logout: async () => {
    if (!browser) {
      return { success: false, error: 'Cannot logout during SSR' };
    }
    
    try {
      authStore.setLoading(true);
      
      const response = await fetch('/api/auth/session', {
        method: 'DELETE',
        credentials: 'include'
      });
      
      const data = await response.json();
      
          if (response.ok) { // Check response.ok
        authStore.reset();
        return { success: true };
      } else {
             const errorMessage = data.error?.message || 'Logout failed';
            authStore.setError(errorMessage);
            return { success: false, error: errorMessage };
      }
    } catch (error) {
      console.error('Logout error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Logout failed';
      authStore.setError(errorMessage);
      return { success: false, error: errorMessage };
    } finally {
      authStore.setLoading(false);
    }
  },
  
  /**
   * Requests a password reset
   * @param {string} email - User email
   * @returns {Promise<{success: boolean, error?: string}>} Success or error
   */
  forgotPassword: async (email) => {
    if (!browser) {
      return { success: false, error: 'Cannot request password reset during SSR' };
    }
    
    try {
          const response = await fetch('/api/auth/password/forgot', { // Assuming default BA path
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email })
      });
      
      const data = await response.json();
      
      return {
            success: response.ok, // Check response.ok
            error: data.error?.message || (response.ok ? null : 'Failed to request password reset')
      };
    } catch (error) {
      console.error('Password reset request error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Password reset request failed';
      return { success: false, error: errorMessage };
    }
  },
  
  /**
   * Resets password with token
   * @param {{token: string, password: string}} data - Reset data
   * @returns {Promise<{success: boolean, error?: string}>} Success or error
   */
  resetPassword: async (data) => {
    if (!browser) {
      return { success: false, error: 'Cannot reset password during SSR' };
    }
    
    try {
          const response = await fetch('/api/auth/password/reset', { // Assuming default BA path
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
        credentials: 'include'
      });
      
      const responseData = await response.json();
      
      return {
            success: response.ok, // Check response.ok
            error: responseData.error?.message || (response.ok ? null : 'Failed to reset password')
      };
    } catch (error) {
      console.error('Password reset error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Password reset failed';
      return { success: false, error: errorMessage };
    }
      },

      /**
       * Initiates OAuth login flow
       * @param {string} provider - OAuth provider name (e.g., 'google', 'github')
       */
      initiateOAuth: (provider) => {
        if (!browser) return;
        // Redirect to the Better Auth managed login endpoint for the provider
        window.location.href = `/api/auth/login/${provider}`; // Use configured BA path
      },

      /**
       * Requests a magic link for the given email
       * @param {string} email - User email
       * @returns {Promise<{success: boolean, error?: string}>} Result object
       */
      requestMagicLink: async (email) => {
        if (!browser) {
          return { success: false, error: 'Cannot request magic link during SSR' };
        }
        try {
          const response = await fetch('/api/auth/magic-link/request', { // Use configured BA path
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email })
          });
          const data = await response.json();
          // Return success based on response status, include error message if present
          return { success: response.ok, error: data.error?.message };
        } catch (error) {
          console.error('Magic link request error:', error);
          return { success: false, error: 'Failed to request magic link' };
        }
      },
};

export default authService;
```

### 3.2 Auth Initialization

1.  **App-wide Auth Initialization:**
    *   MUST initialize auth state at the application level:

```javascript
// src/routes/+layout.js

import authService from '$lib/services/authService';
    import { browser } from '$app/environment'; // Correct import

/**
 * SvelteKit load function to initialize authentication
 * Runs on both server and client, but auth is only initialized on client
 * @returns {Promise<{}>} Empty props object
 */
export async function load() {
  // Only attempt to initialize auth client-side
  // This doesn't block SSR/return any props
      if (browser) { // Use imported browser check
    // Initialize auth (non-blocking)
        // Use await if you need to wait for init before rendering,
        // otherwise run it without await for faster initial load.
    authService.initAuth();
  }
  
  return {};
}
```

2.  **Auth Context Component:**
    *   SHOULD create an auth context component:

```svelte
<!-- src/lib/components/AuthProvider.svelte -->
<script>
  import { onMount } from 'svelte';
  import { authStore } from '$lib/stores/authStore';
  import authService from '$lib/services/authService';
      import LoadingSpinner from '$lib/components/ui/LoadingSpinner.svelte'; // Ensure path is correct
  
  // Optional: destructure from props to customize behavior
  let { 
    loadingComponent = LoadingSpinner,
    showLoading = true,
        autoInit = true, // Controls if initAuth is called here or in +layout.js
    children
  } = $props();
  
      // Auto-init auth if configured and not handled in +layout.js
  onMount(() => {
        // Ensure authService is defined before calling methods
        if (authService && autoInit) {
      authService.initAuth();
    }
  });
  
      // Reactive subscription to loading state
  $: loading = $authStore.loading;
</script>

{#if loading && showLoading}
  <svelte:component this={loadingComponent} />
{:else}
  {#if children}
    {@render children()}
  {/if}
{/if}
```

### 3.3 Protected Route Implementation

1.  **Route Guards:**
    *   MUST implement route protection:

```javascript
    // src/routes/(protected)/+layout.server.js // Use .server.js for server-side load

import { redirect } from '@sveltejs/kit';
    // Import configured auth instance from server-side
    import { auth } from '$lib/server/auth';

    /**
     * SvelteKit server load function for protected routes
     * @param {import('@sveltejs/kit').ServerLoadEvent} event - Load event
     * @returns {Promise<{user: import('$lib/stores/authStore').User}|void>} User data or throws redirect
     */
    export async function load({ request, url }) {
      // Check authentication status using server-side session validation
      const session = await auth.sessionManager.getSession(request); // Use configured instance

      if (!session) {
    // Save intended destination for redirecting back after login
          const returnTo = encodeURIComponent(url.pathname + url.search); // Include query params
          throw redirect(303, `/login?returnTo=${returnTo}`); // Redirect if no session
      }

      // Get user details from session
      const user = await auth.adapter.getUserById(session.userId); // Use configured instance

      if (!user) {
          // If session exists but user doesn't (edge case), treat as unauthenticated
          const returnTo = encodeURIComponent(url.pathname + url.search);
    throw redirect(303, `/login?returnTo=${returnTo}`);
  }
  
  // Pass the user data to the page/layout
      // Filter sensitive data before sending to client
      const clientUser = {
          id: user.id,
          email: user.email,
          displayName: user.display_name || user.username || user.email,
          roles: user.roles || [] // Assuming roles are stored
          // DO NOT pass password hash or other sensitive fields
      };

  return {
          user: clientUser
  };
}
```

2.  **Protected Layout Component:**
    *   SHOULD implement protected layout component:

```svelte
<!-- src/routes/(protected)/+layout.svelte -->
<script>
  import { browser } from '$app/environment';
  import { page } from '$app/stores';
      import { isAuthenticated, user, authStore } from '$lib/stores/authStore'; // Use correct store import
      // No need for authService here if load handles redirection
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';
  
  // Get user data from load function
  let { data } = $props();
  
      // Initialize the client-side store with server-loaded data
  onMount(() => {
        if (browser && data?.user) {
          authStore.setUser(data.user);
        } else if (browser && !data?.user) {
          // If server load didn't provide a user (shouldn't happen due to guard),
          // force reset client store and redirect just in case.
          authStore.reset();
          goto(`/login?returnTo=${encodeURIComponent($page.url.pathname + $page.url.search)}`);
        }
      });

      // Optional: Client-side check for extra safety or dynamic updates
      // The server load function is the primary guard.
      // $: if (browser && $isAuthenticated === false && !$authStore.loading) {
      //   goto(`/login?returnTo=${encodeURIComponent($page.url.pathname + $page.url.search)}`);
      // }
</script>

    {#if data?.user}
      <!-- Render content only if user data is available from server load -->
<slot />
    {:else}
      <!-- Optional: Show loading or redirect notice -->
      <p>Loading user data...</p>
    {/if}
```

### 3.4 Login Component Implementation

1.  **Login Form Component:**
    *   MUST implement login form:

```svelte
<!-- src/lib/components/auth/LoginForm.svelte -->
<script>
  import { page } from '$app/stores';
      import { browser } from '$app/environment';
  import { goto } from '$app/navigation';
      import authService from '$lib/services/authService'; // Import authService
  import Button from '$lib/components/ui/button/button.svelte';
  import Input from '$lib/components/ui/input/input.svelte';
      import Alert from '$lib/components/ui/alert/alert.svelte'; // Example alert component
  
  let email = $state('');
  let password = $state('');
  let loading = $state(false);
  let error = $state('');
  
      async function handleSubmit() {
        if (!browser) return; // Prevent submission during SSR
    
    loading = true;
    error = '';
    
    const result = await authService.login({ email, password });
    
        if (result.success && result.user) {
          // Successful login
      const returnTo = $page.url.searchParams.get('returnTo') || '/dashboard';
        goto(returnTo);
    } else {
          // Failed login
          error = result.error || 'Login failed. Please check your credentials.';
    }
    
    loading = false;
  }

      function handleOAuth(provider) {
          if (!browser) return;
          loading = true; // Show loading state
          authService.initiateOAuth(provider);
          // Redirect happens via window.location.href in initiateOAuth
      }

</script>

    <form class="space-y-4" on:submit|preventDefault={handleSubmit}>
  {#if error}
    <Alert variant="destructive">{error}</Alert>
  {/if}
  
  <div class="space-y-2">
    <label for="email" class="text-sm font-medium">Email</label>
        <Input type="email" id="email" bind:value={email} required disabled={loading} />
  </div>
  
  <div class="space-y-2">
      <label for="password" class="text-sm font-medium">Password</label>
        <Input type="password" id="password" bind:value={password} required disabled={loading} />
  </div>
  
      <Button type="submit" class="w-full" disabled={loading}>
        {loading ? 'Logging in...' : 'Log In'}
  </Button>
  
      <div class="my-4 text-center text-sm text-muted-foreground">OR</div>

      <div class="space-y-2">
          <Button variant="outline" class="w-full" on:click={() => handleOAuth('google')} disabled={loading}>
              <!-- Add Icon component --> Sign in with Google
          </Button>
          <Button variant="outline" class="w-full" on:click={() => handleOAuth('github')} disabled={loading}>
              <!-- Add Icon component --> Sign in with GitHub
          </Button>
      </div>

      <div class="mt-4 text-center text-sm">
        <a href="/forgot-password" class="underline">Forgot password?</a>
      </div>
      <div class="mt-2 text-center text-sm">
        Don't have an account? <a href="/register" class="underline">Sign up</a>
  </div>
</form>
```

### 3.5 Registration Component Implementation

1.  **Register Form Component:**
    *   MUST implement registration form:

```svelte
<!-- src/lib/components/auth/RegisterForm.svelte -->
<script>
      import { browser } from '$app/environment';
  import { goto } from '$app/navigation';
      import authService from '$lib/services/authService'; // Import authService
  import Button from '$lib/components/ui/button/button.svelte';
  import Input from '$lib/components/ui/input/input.svelte';
  import Alert from '$lib/components/ui/alert/alert.svelte';
  
  let email = $state('');
  let password = $state('');
      let displayName = $state(''); // Optional
  let loading = $state(false);
  let error = $state('');
  
      async function handleSubmit() {
        if (!browser) return;
    
    loading = true;
    error = '';
    
        const registrationData = { email, password, displayName };
    const result = await authService.register(registrationData);
    
        if (result.success && result.user) {
          // Successful registration & login
          goto('/dashboard'); // Redirect to dashboard or welcome page
      } else {
          // Failed registration
      error = result.error || 'Registration failed. Please try again.';
    }
    
    loading = false;
  }
</script>

    <form class="space-y-4" on:submit|preventDefault={handleSubmit}>
  {#if error}
    <Alert variant="destructive">{error}</Alert>
  {/if}
  
  <div class="space-y-2">
        <label for="displayName" class="text-sm font-medium">Display Name (Optional)</label>
        <Input type="text" id="displayName" bind:value={displayName} disabled={loading} />
  </div>
  
  <div class="space-y-2">
        <label for="email" class="text-sm font-medium">Email</label>
        <Input type="email" id="email" bind:value={email} required disabled={loading} />
  </div>
  
  <div class="space-y-2">
    <label for="password" class="text-sm font-medium">Password</label>
        <Input type="password" id="password" bind:value={password} required disabled={loading} />
        <!-- Add password strength indicator if needed -->
  </div>
  
      <Button type="submit" class="w-full" disabled={loading}>
        {loading ? 'Registering...' : 'Register'}
  </Button>
  
       <div class="mt-4 text-center text-sm">
        Already have an account? <a href="/login" class="underline">Log in</a>
  </div>
</form>
```

## 4. Verification Checklist

- [ ] Client-side auth store implemented correctly
- [ ] Client-side auth service methods implemented
- [ ] Auth initialization handled in root layout (`+layout.js`)
- [ ] Protected routes implement server-side guards (`+layout.server.js`)
- [ ] Protected layout component manages client state (`+layout.svelte`)
- [ ] Login component handles email/password and OAuth initiation
- [ ] Registration component handles user sign-up
- [ ] Type safety maintained using JSDoc
- [ ] Relevant error handling integrated


