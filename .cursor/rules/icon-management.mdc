---
description: Icon Management System Rules
globs: ["app/src/lib/utils/lucide-compat.js", "app/src/lib/components/ui/icon/icon.svelte", "**/*.svelte"]
alwaysApply: true
---
# Icon Management System Rules

1.  **Core Principles:**
    *   Use `$lib/utils/lucide-compat.js` as the SINGLE source of truth for icon components.
    *   NEVER import icons directly from `lucide-svelte` in UI components.
    *   ALL icons MUST be wrapped with the `$lib/components/ui/icon/icon.svelte` component for rendering.
    *   ALL icons MUST be exported from `lucide-compat.js` using the `createIconObject` utility (if applicable) or as direct re-exports.

2.  **Adding New Icons:**
    ````javascript
    // In lucide-compat.js
    import { NewIconName } from 'lucide-svelte';
    // If using a utility like createIconObject (adapt if just re-exporting):
    // import { createIconObject } from './icon-utils';
    // export const NewIconName = createIconObject(NewIconName);

    // OR if just re-exporting directly:
    export { NewIconName };
    ````
    *   Ensure the icon exists in `lucide-svelte`.
    *   Add the export line to `lucide-compat.js`.

3.  **Using Icons in Components:**
    ````javascript
    // CORRECT
    import Icon from '$lib/components/ui/icon/icon.svelte';
    import { Check, Home } from '$lib/utils/lucide-compat.js'; // Import specific icons

    // In template:
    <Icon icon={Home} class="w-4 h-4" />
    <button>
      <Icon icon={Check} size={16} /> Submit
    </button>

    // INCORRECT - Never do this
    // import { Home } from 'lucide-svelte';
    // <Home class="w-4 h-4" />
    ````

4.  **Icon Sizing:**
    *   MUST use standard Tailwind utility classes reflecting the 8pt grid (from `golden-ratio-design-system-protocol.mdc`).
    *   Examples: `w-4 h-4` (16px), `w-5 h-5` (20px - requires 4px exception documented or adjustment), `w-6 h-6` (24px).
    *   Avoid arbitrary size values (e.g., `w-[17px]`) unless absolutely necessary and documented.
    *   Default size often handled by the `Icon` component prop, but can be overridden by class.

5.  **Icon Colors:**
    *   MUST use HSL color variables syntax from `golden-ratio-design-system-protocol.mdc`.
        ````html
        <Icon icon={Home} class="text-[hsl(var(--link))]" />
        ````
    *   For state changes, use utility classes (e.g., `group-hover:`):
        ````html
        <button class="group flex items-center gap-2">
          <Icon icon={Home} class="text-[hsl(var(--canvas-fg-muted))] group-hover:text-[hsl(var(--link))]" />
          Home
        </button>
        ````
    *   Default color is often `currentColor`, inheriting from parent text color.

6.  **Error Prevention:**
    *   Always check `lucide-compat.js` before adding a potentially duplicate icon.
    *   Verify SSR compatibility.
    *   Test rendering in the defined theme (Dark Mode First).

7.  **Performance Considerations:**
    *   Direct imports from `lucide-compat.js` support tree-shaking.
    *   Use appropriate, consistent sizing.

8.  **Accessibility:**
    *   MUST provide `aria-label` when the icon conveys meaning and has no adjacent text label.
        ````html
        <button aria-label="Close">
          <Icon icon={X} class="w-4 h-4" />
        </button>
        ````
    *   MUST use `aria-hidden="true"` for decorative icons OR when adjacent text describes the action.
        ````html
        <span>
          <Icon icon={Info} class="w-4 h-4 mr-1 inline-block align-middle" aria-hidden="true" />
          Additional Information
        </span>
        ````
    *   Ensure sufficient color contrast for the icon's color against its background (Ref: GRDS Protocol 11).

9.  **Troubleshooting:**
    *   Icon not rendering: Check export in `lucide-compat.js` and import path in component. Verify `<Icon>` wrapper usage.
    *   Sizing issues: Check Tailwind classes and parent constraints.
    *   Color issues: Verify HSL variable syntax and parent text color.

10. **Documentation:**
    *   Document reasoning for any custom icon utilities (like `createIconObject`).
    *   Note icon usage patterns in component documentation if complex.

