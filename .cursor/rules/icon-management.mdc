---
description: Icon Management System Rules
globs: ["app/src/lib/utils/lucide-compat.js", "app/src/lib/components/ui/icon/icon.svelte", "**/*.svelte"]
alwaysApply: true
---

# Icon Management System

1. **Core Principles:**
   - Use `/app/src/lib/utils/lucide-compat.js` as SINGLE source of truth
   - NEVER import icons directly from 'lucide-svelte'
   - ALL icons MUST be wrapped with the Icon component
   - ALL icons MUST be exported through lucide-compat.js

2. **Adding New Icons:**
   ```javascript
   // In lucide-compat.js
   import { NewIcon } from 'lucide-svelte'
   import { createIconObject } from './icon-utils'
   
   export const NewIcon = createIconObject(newIcon)
   ```

3. **Using Icons in Components:**
   ```javascript
   // CORRECT
   import Icon from '$lib/components/ui/icon/icon.svelte'
   import { NewIcon } from '$lib/utils/lucide-compat.js'
   
   // In template:
   <Icon icon={NewIcon} class="w-4 h-4" />
   
   // INCORRECT - Never do this
   import { NewIcon } from 'lucide-svelte'
   <NewIcon class="w-4 h-4" />
   ```

4. **Icon Sizing:**
   - Use Tailwind classes for consistent sizing
   - Default sizes: w-4 h-4 (16px)
   - Available sizes: w-3 h-3 (12px), w-4 h-4 (16px), w-5 h-5 (20px), w-6 h-6 (24px)
   - Use arbitrary values only when necessary: w-[18px] h-[18px]

5. **Icon Colors:**
   - Use HSL color variables:
     ```html
     <Icon icon={NewIcon} class="text-[hsl(var(--primary))]" />
     ```
   - For state changes, use group-hover/focus classes:
     ```html
     <button class="group">
       <Icon icon={NewIcon} class="text-[hsl(var(--muted))] group-hover:text-[hsl(var(--primary))]" />
     </button>
     ```

6. **Error Prevention:**
   - Always check if icon is already in lucide-compat.js before adding
   - Verify SSR compatibility by testing in production build
   - Check icon rendering in both light and dark modes
   - Test icon animations and transitions if used

7. **Performance Considerations:**
   - Icons are tree-shaken when imported from lucide-compat.js
   - Use appropriate sizing to prevent layout shifts
   - Minimize icon state changes to prevent re-renders
   - Consider lazy loading for routes with many icons

8. **Accessibility:**
   - Always provide aria-label when icon is semantic:
     ```html
     <Icon icon={NewIcon} class="w-4 h-4" aria-label="Action description" />
     ```
   - Use aria-hidden="true" for decorative icons:
     ```html
     <Icon icon={NewIcon} class="w-4 h-4" aria-hidden="true" />
     ```
   - Ensure sufficient color contrast for icon colors

9. **Troubleshooting:**
   - If icon doesn't render, verify export in lucide-compat.js
   - If SSR errors occur, check import path and Icon wrapper usage
   - For sizing issues, check parent container constraints
   - For color issues, verify HSL variable syntax

10. **Documentation:**
    - Document new icons added to lucide-compat.js
    - Note icon usage in component documentation
    - Update icon audit list if maintained
    - Document any custom icon behaviors or animations 