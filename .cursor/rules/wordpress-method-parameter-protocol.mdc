---
description: 
globs: **/class-*.php, **/includes/*.php, **/admin/*.php, **/includes/api/*.php, **/includes/db/*.php, **/admin/class-*.php, **/includes/class-*.php, **/includes/api/class-*.php, **/includes/db/class-*.php, plugin-name.php, **/templates/*.php, **/admin/views/*.php, **/admin/partials/*.php, **/public/class-*.php, **/includes/interfaces/*.php, **/includes/traits/*.php, **/includes/abstracts/*.php, **/includes/integrations/*.php, **/includes/widgets/class-*.php, **/includes/blocks/class-*.php
alwaysApply: false
---
# WordPress Method Parameter Protocol v1.1

*(Self-correction: Added protocol version, enhanced parameter documentation)*

## 1. Purpose and Importance

Method parameters are the gateway to your plugin's functionality. This protocol establishes consistent patterns for defining, documenting, validating, and interacting with method parameters in WordPress plugins. Following these standards ensures your code is robust, maintainable, self-documenting, and easier for other developers to understand and extend.

## 2. Method Parameter Documentation

Document all method parameters clearly using PHPDoc standards. Nested parameters should be thoroughly documented with their types, requirements, and default values.

```php
/**
 * Process a content request.
 *
 * @since 1.0.0
 *
 * @param array $content_data {
 *     Content request data.
 *
 *     @type string $content      Required. The content to process.
 *     @type string $format       Optional. Output format ('html', 'json', 'text'). Default 'html'.
 *     @type int    $word_count   Optional. Maximum word count for the content. Default 150.
 *     @type bool   $include_meta Optional. Whether to include metadata. Default false.
 *     @type array  $filters {
 *         Optional. Filters to apply to the content.
 *
 *         @type string $relevance Optional. Relevance filter ('high', 'medium', 'low'). Default 'medium'.
 *         @type array  $keywords  Optional. Keywords to highlight.
 *     }
 * }
 * @param int   $user_id      Optional. The user ID. Default 0 (guest).
 * @param bool  $save_history Optional. Whether to save processing history. Default true.
 * 
 * @return array|WP_Error The generated content data or error.
 */
function your_plugin_process_request($content_data, $user_id = 0, $save_history = true) {
    // Implementation
}
```

## 3. Required Parameter Validation

Always validate required parameters early in your methods. This prevents errors deeper in your code and provides clear feedback about missing information.

```php
/**
 * Validate required parameters.
 *
 * @param array $params     Parameters to validate.
 * @param array $required   Required parameter keys.
 * @param bool  $return_all Whether to return all params or just validated ones.
 * 
 * @return array|WP_Error Validated parameters or error.
 */
function your_plugin_validate_params($params, $required, $return_all = true) {
    $errors = [];
    $validated = [];
    
    // Check for required parameters
    foreach ($required as $key) {
        if (!isset($params[$key]) || (empty($params[$key]) && $params[$key] !== 0)) {
            $errors[] = sprintf(__('Missing required parameter: %s', 'your-plugin'), $key);
        } else {
            $validated[$key] = $params[$key];
        }
    }
    
    // If errors, return WP_Error
    if (!empty($errors)) {
        return new WP_Error('missing_params', __('Required parameters are missing', 'your-plugin'), $errors);
    }
    
    // Return validated params or all params
    return $return_all ? $params : $validated;
}
```

## 4. Type Validation

Always validate parameter types to ensure your methods receive the expected data format. This prevents type-related errors and unexpected behaviors.

```php
/**
 * Validate parameter types.
 *
 * @param mixed  $value The value to validate.
 * @param string $type  The expected type.
 * @param string $param The parameter name (for error messages).
 * 
 * @return mixed|WP_Error The validated value or error.
 */
function your_plugin_validate_type($value, $type, $param) {
    $valid = true;
    $message = '';
    
    switch ($type) {
        case 'int':
        case 'integer':
            if (!is_numeric($value) || (int) $value != $value) {
                $valid = false;
                $message = sprintf(__('%s must be an integer', 'your-plugin'), $param);
            } else {
                $value = (int) $value;
            }
            break;
            
        case 'string':
            if (!is_string($value)) {
                $valid = false;
                $message = sprintf(__('%s must be a string', 'your-plugin'), $param);
            }
            break;
            
        case 'array':
            if (!is_array($value)) {
                $valid = false;
                $message = sprintf(__('%s must be an array', 'your-plugin'), $param);
            }
            break;
            
        case 'bool':
        case 'boolean':
            if (!is_bool($value)) {
                $valid = false;
                $message = sprintf(__('%s must be a boolean', 'your-plugin'), $param);
            }
            break;
            
        case 'email':
            if (!is_email($value)) {
                $valid = false;
                $message = sprintf(__('%s must be a valid email address', 'your-plugin'), $param);
            }
            break;
            
        // Add other type validations as needed
    }
    
    if (!$valid) {
        return new WP_Error('invalid_param_type', $message);
    }
    
    return $value;
}
```

## 5. Array vs. Individual Parameters

Choose the appropriate parameter style based on method complexity and usage context. For methods with many parameters or optional parameters, use the array style. For simple methods with few parameters, use individual parameters.

### 5.1 Array Parameter Style

Array parameters are ideal for complex methods with many optional parameters or nested structures. This style is more flexible for future additions without breaking existing API calls.

```php
/**
 * Create a new content item.
 *
 * @param array $args {
 *     Content creation arguments.
 *
 *     @type string $title   Required. Content title.
 *     @type string $content Required. Main content text.
 *     @type string $status  Optional. Content status ('draft', 'publish'). Default 'draft'.
 *     @type array  $meta    Optional. Additional metadata.
 * }
 * @return int|WP_Error The content ID or error.
 */
function your_plugin_create_content($args) {
    // Validate required parameters
    $params = your_plugin_validate_params($args, ['title', 'content']);
    if (is_wp_error($params)) {
        return $params;
    }
    
    // Set defaults
    $params = wp_parse_args($params, [
        'status' => 'draft',
        'meta' => [],
    ]);
    
    // Implementation
    // ...
    
    return $content_id;
}
```

### 5.2 Individual Parameter Style

Individual parameters are clearer for methods with few parameters or where certain parameters are always required.

```php
/**
 * Create a new content item.
 *
 * @param string $title   Content title.
 * @param string $content Main content text.
 * @param string $status  Optional. Content status ('draft', 'publish'). Default 'draft'.
 * @param array  $meta    Optional. Additional metadata. Default empty array.
 * @return int|WP_Error The content ID or error.
 */
function your_plugin_create_content($title, $content, $status = 'draft', $meta = []) {
    // Validate required parameters
    if (empty($title)) {
        return new WP_Error('missing_title', __('Title is required', 'your-plugin'));
    }
    
    if (empty($content)) {
        return new WP_Error('missing_content', __('Content is required', 'your-plugin'));
    }
    
    // Implementation
    // ...
    
    return $content_id;
}
```

## 6. Value Range Validation

For numerical parameters, always validate the acceptable range to prevent unexpected behaviors or performance issues.

```php
/**
 * Validate that a value is within a specific range.
 *
 * @param mixed $value   The value to validate.
 * @param mixed $min     The minimum allowed value.
 * @param mixed $max     The maximum allowed value.
 * @param string $param  The parameter name for error messages.
 * @return mixed|WP_Error The validated value or error.
 */
function your_plugin_validate_range($value, $min, $max, $param) {
    if ($value < $min || $value > $max) {
        return new WP_Error(
            'out_of_range',
            sprintf(
                __('%s must be between %s and %s', 'your-plugin'),
                $param,
                $min,
                $max
            )
        );
    }
    
    return $value;
}

/**
 * Update pagination settings.
 *
 * @param int $per_page The number of items per page.
 * @return bool|WP_Error True on success or error.
 */
function your_plugin_update_pagination($per_page) {
    // Validate parameter type
    $per_page = your_plugin_validate_type($per_page, 'int', 'per_page');
    if (is_wp_error($per_page)) {
        return $per_page;
    }
    
    // Validate range
    $per_page = your_plugin_validate_range($per_page, 5, 100, 'per_page');
    if (is_wp_error($per_page)) {
        return $per_page;
    }
    
    // Update settings
    update_option('your_plugin_per_page', $per_page);
    
    return true;
}
```

## 7. Callback Parameters

When working with callback functions, always validate that the callback is actually callable.

```php
/**
 * Process items with a callback function.
 *
 * @param array    $items    The items to process.
 * @param callable $callback The callback function.
 * @param mixed    $context  Optional. Context to pass to the callback. Default null.
 * @return array|WP_Error The processed items or error.
 */
function your_plugin_process_items($items, $callback, $context = null) {
    // Validate items is an array
    if (!is_array($items)) {
        return new WP_Error('invalid_items', __('Items must be an array', 'your-plugin'));
    }
    
    // Validate callback is callable
    if (!is_callable($callback)) {
        return new WP_Error('invalid_callback', __('Callback must be callable', 'your-plugin'));
    }
    
    $results = [];
    
    foreach ($items as $key => $item) {
        try {
            $results[$key] = call_user_func($callback, $item, $context);
        } catch (Exception $e) {
            return new WP_Error(
                'callback_error',
                sprintf(
                    __('Error processing item %s: %s', 'your-plugin'),
                    $key,
                    $e->getMessage()
                )
            );
        }
    }
    
    return $results;
}
```

## 8. Return Values and Error Handling

Always use consistent return types and leverage WP_Error for indicating failure with meaningful error messages.

```php
/**
 * Get item data.
 *
 * @param int $item_id The item ID.
 * @return array|WP_Error The item data array or error object.
 */
function your_plugin_get_item($item_id) {
    // Validate item ID
    $item_id = your_plugin_validate_type($item_id, 'int', 'item_id');
    if (is_wp_error($item_id)) {
        return $item_id;
    }
    
    // Check if item exists
    $exists = your_plugin_item_exists($item_id);
    if (is_wp_error($exists)) {
        return $exists;
    }
    
    if (!$exists) {
        return new WP_Error('item_not_found', __('Item not found', 'your-plugin'));
    }
    
    // Get item data
    $data = your_plugin_fetch_item_data($item_id);
    if (is_wp_error($data)) {
        return $data;
    }
    
    /**
     * Filter the item data before returning.
     *
     * @param array $data    The item data.
     * @param int   $item_id The item ID.
     */
    return apply_filters('your_plugin_item_data', $data, $item_id);
}
```

## 9. Universal Error Resolution Integration

Integrate with the Universal Error Resolution Protocol by implementing try-catch blocks and proper error logging.

```php
/**
 * Process content with error handling.
 *
 * @param array $content_data Content data.
 * @return array|WP_Error Processed content or error.
 */
function your_plugin_process_content_safe($content_data) {
    try {
        // Validate parameters
        $params = your_plugin_validate_params($content_data, ['content']);
        if (is_wp_error($params)) {
            return $params;
        }
        
        // Process content
        $result = your_plugin_process_content_internal($params);
        
        // Return result
        return $result;
    } catch (Exception $e) {
        // Log error
        error_log('Error processing content: ' . $e->getMessage());
        
        // Return error
        return new WP_Error(
            'content_processing_error',
            __('An error occurred while processing content', 'your-plugin'),
            ['exception' => $e->getMessage()]
        );
        
        // Optionally trigger error protocol
        if (function_exists('your_plugin_trigger_error_protocol')) {
            your_plugin_trigger_error_protocol($e, 'content_error', [
                'content_data' => $content_data
            ]);
        }
    }
}
```

## 10. Common Mistakes to Avoid

1. **Inconsistent Parameter Validation:** Always validate all user-supplied parameters.
2. **Missing Required Parameters Check:** Validate required parameters before any processing.
3. **Unclear Error Messages:** Provide specific, actionable error messages.
4. **Mixed Return Types:** Be consistent with your return types and document them clearly.
5. **Changing Parameter Requirements:** Avoid changing required parameters in updates.
6. **Inconsistent Documentation:** Keep PHPDoc comments in sync with code.
7. **Type Coercion Issues:** Be careful with loose comparisons and type conversions.
8. **Not Handling Edge Cases:** Consider all possible inputs, including edge cases.

## 11. Implementing These Standards

1. **New Code:** All new code should follow these standards from the beginning.
2. **Existing Code:** Gradually refactor existing code to meet these standards.
3. **Shared Utils:** Create shared utility functions for common parameter validation tasks.
4. **Documentation:** Keep PHPDoc comments updated when changing parameter requirements.
5. **Error Logging:** Implement comprehensive error logging for parameter validation issues.
6. **Testing:** Add unit tests specifically for parameter validation.