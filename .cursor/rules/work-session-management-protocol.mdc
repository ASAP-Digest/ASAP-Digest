---
description: 
globs: 
alwaysApply: true
---
# Enhanced Work Session Management Protocol (WSMP) v2.2

## 1. Protocol Integration Layer
*(No changes from v2.1)*
````text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. Software Development Meta Protocol   │
│ 2. Rule Execution Protocol              │
│ 3. Task Tracking Protocol               │ // Roadmap Update Logic (Implicit)
│ 4. Memory Maintenance Protocol          │ // Includes Server Memory Rules
│ 5. Session Management Protocol (This)   │
│ 6. Status Check Protocol                │
│ 7. Cross-Protocol Comms & Verification   │
│ 8. Universal Error Resolution Protocol  │
│ 9. Audit Trail System                   │
└─────────────────────────────────────────┘
````

## 2. Activation Commands & Flow
*(No changes from v2.1)*
````text
A. Start New Session
- Command: "Begin Work Session" or alias "BWS"
- Purpose: Initiates a NEW tracked work session.
- Prerequisites: MUST run "Status Check" (SC) immediately prior to BWS to establish current context and priority.
- Optional Parameters:
  - Session Type (DEBUG, FEATURE, FIX, REFACTOR) - Default can be inferred.
  - Priority Issue (Can be automatically inferred from preceding SC output)
- Note: Any additional arguments provided with BWS that are not recognized parameters SHOULD be ignored or logged as informational context, not used as the session ID.

B. Save Session State
- Command: "Save Work Session" or alias "SWS"
- Purpose: Creates a `WorkSessionSave` entity linked to the active `WorkSession`. Persists the current working state (memory entities, task status markers) without terminating the logical session, allowing for interruption and later resumption via RWS. Does NOT modify core project files beyond optional status markers.
- Optional Parameters:
  - Save Reason (e.g., "Context Switch", "End of Day")

C. Resume Saved Session
- Command: "Resume Work Session" or alias "RWS"
- Purpose: Resumes a previously saved work session, making it the active session again.
- Optional Parameters:
  - `saveSessionID`: The specific name/ID of the `WorkSessionSave` entity to resume from.
- Default Behavior: If `saveSessionID` is not provided, RWS MUST attempt to resume from the MOST RECENTLY created `WorkSessionSave` entity in Server Memory. If none found, it initiates the fallback sequence (See Section 3.3).

D. End Session
- Command: "End Work Session" or alias "EWS"
- Purpose: Formally closes the ACTIVE work session, finalizes task statuses, updates documentation, and performs cleanup.
- Optional Parameters:
  - Reason (NORMAL, INTERRUPTED, COMPLETED, FAILED)
````

## 3. Context Establishment & Session Lifecycle Management

### 3.1 Session Initiation (BWS)
*(No changes from v2.1)*
````text
1.  **Pre-Check:** Execute "Status Check" (SC).
2.  **Analyze SC Output:** Extract `🎯 Current / Operational Priority` and `⚙️ Overall Context` from the SC report.
3.  **Timestamp:** Get current timestamp (`mcp_mcp_datetime_get_datetime`).
4.  **Generate Session ID:** Create a new, unique session ID following the updated naming convention (See Section 9).
5.  **Entity Creation:** Create `WorkSession` entity in Server Memory with the generated ID, including:
    - Start timestamp.
    - Session Type (from param or inferred).
    - Priority Issue (from SC or parameter).
    - Overall Context (from SC).
    - Link to the preceding `StatusCheck` entity.
    - Status: `ACTIVE`.
6.  **Verification:** Execute L1/L3 Verification Chain checks.
7.  **Audit:** Record `SESSION_START` event in Audit Trail.
8.  **Feedback:** Confirm session start with the new Session ID.
````

### 3.2 Save Work Session (SWS)
*Self-Correction: Added explicit verification and rollback steps to prevent inconsistency.*
````text
1.  **Identify Active Session:** Determine the currently active `WorkSession` entity. If none, report error.
2.  **Timestamp:** Get current timestamp (`mcp_mcp_datetime_get_datetime`).
3.  **Pre-Save Verification:** Execute L1/L2/L3 Verification Chain checks (ensuring state consistency *before* saving).
4.  **Generate Save ID:** Create a unique ID for the save state (e.g., `WSSave_[SessionIDShort]_[Timestamp]`).
5.  **Entity Creation:** Attempt to create the `WorkSessionSave` entity in Server Memory with the generated Save ID, including:
    - Save timestamp.
    - Link to the active `WorkSession` entity ID.
    - Save Reason (if provided).
    - Observations summarizing key state points (e.g., active task ID, relevant open files/entities, current error state if any).
6.  **Verify Entity Creation:** Immediately after step 5, attempt to read the newly created `WorkSessionSave` entity from Server Memory using its generated Save ID.
7.  **Handle Verification Result:**
    - **If Verification SUCCEEDS:** Proceed to step 8.
    - **If Verification FAILS:** Report error "Failed to create/verify WorkSessionSave entity '[SaveID]' in Server Memory. SWS operation aborted, state not saved." DO NOT proceed to step 8. Stop SWS process here.
8.  **Update Active Session:** (Only if step 7 succeeded) Add observation to the active `WorkSession` entity: `Session paused by WSSave_[ID] at [Timestamp]`. Change status to `PAUSED`.
9.  **Task Status Marker (Optional but Recommended):** (Only if step 7 succeeded) Update the primary active task (🔄) in `docs/ROADMAP_TASKS.md` to a "paused" state (e.g., ⏸️ `[Paused: SWS - Timestamp]`) to reflect interruption clearly for the next SC run. This MUST be done consistently if implemented.
10. **Relation Creation:** (Only if step 7 succeeded) Link `WorkSessionSave` entity to relevant `Task`, `Error`, or `Code` entities representing the current state.
11. **Audit:** Record `SESSION_SAVE` event in Audit Trail.
12. **Feedback:** Provide confirmation to the user, including the `WorkSessionSave` entity name/ID.
````

### 3.3 Resume Work Session (RWS)
*Self-Correction: Refined fallback logic to detect inconsistency between roadmap and memory.*
````text
1.  **Identify Target Save State & Initiate Fallback:**
    - If `saveSessionID` parameter is provided:
      - Search Server Memory for a `WorkSessionSave` entity with that name.
      - If found: Proceed to step 2 (Resume Found Save).
      - If not found: Report error "Specific Save Session ID '[saveSessionID]' not found." and stop.
    - If no `saveSessionID` parameter is provided:
      - Search Server Memory for the most recently created `WorkSessionSave` entity based on timestamp in observations or name.
      - If found: Proceed to step 2 (Resume Found Save).
      - **If no `WorkSessionSave` entity is found:** Proceed to step 1.a (Initiate Fallback Check).

    1.a. **Fallback Check 1: Scan Roadmap for Paused Markers:**
        - Read `docs/ROADMAP_TASKS.md`.
        - Search the content specifically for the `⏸️` emoji marker.
        - **If `⏸️` markers ARE FOUND:** Report error "Inconsistency Detected: Roadmap file shows paused task(s) (marked with ⏸️), but no corresponding 'WorkSessionSave' entity was found in Server Memory. Manual review/cleanup suggested before proceeding. Cannot resume automatically." and stop.
        - **If `⏸️` markers ARE NOT FOUND:** Proceed to step 1.b (Fallback Check 2).

    1.b. **Fallback Check 2: Suggest Last Active Session:**
        - Search Server Memory for the `WorkSession` entity with the latest activity (based on `endTime` or the timestamp of the last observation, prioritizing `endTime` if available).
        - If a recent `WorkSession` is found: Report "No active saved session found to resume. The most recent session activity was for '[Found Session ID]' (Status: [Status], Ended: [End Time/Last Activity Time]). Use BWS to start a new session if intended." and stop.
        - If no `WorkSessionSave` (from initial check) and no recent `WorkSession` entities are found: Report "No saved session or recent activity found. Use BWS to start a new session." and stop.

2.  **Retrieve Saved State:** (Executed only if a `WorkSessionSave` was found in step 1)
    - Get the target `WorkSessionSave` entity and its linked `WorkSession` entity ID.
3.  **Retrieve Work Session:**
    - Fetch the linked `WorkSession` entity. If not found or status is not `PAUSED`, report error "Cannot resume: Linked WorkSession '[SessionID]' not found or not in PAUSED state." and stop.
4.  **Timestamp:** Get current timestamp (`mcp_mcp_datetime_get_datetime`).
5.  **Update Work Session:**
    - Change status back to `ACTIVE`.
    - Add observation: `Session resumed from WSSave_[ID] at [Timestamp]`.
6.  **Restore Context (Informational):**
    - Log the restored context (priority task, overall context) based on the resumed `WorkSession` entity's observations.
7.  **Task Status Marker Update:**
    - If the optional `PAUSED` marker (⏸️) was used in `docs/ROADMAP_TASKS.md` during SWS, update the corresponding task back to `IN_PROGRESS` (🔄). This MUST be done consistently if the marker is used.
8.  **Verification:** Execute L1/L3 Verification Chain checks.
9.  **Audit:** Record `SESSION_RESUME` event in Audit Trail.
10. **Feedback:** Confirm session resumption, stating the active Session ID and the priority task.
````

### 3.4 End Work Session (EWS)
*(No changes from v2.1)*
````text
1.  **Identify Active Session:** Determine the currently active `WorkSession` entity. If none, report error.
2.  **Timestamp:** Get current timestamp (`mcp_mcp_datetime_get_datetime`).
3.  **Finalization Logic:** Execute session finalization tasks:
    - Update relevant `Task` entity statuses in Server Memory (e.g., to `COMPLETED`, `PENDING`).
    - Update corresponding tasks in `docs/ROADMAP_TASKS.md` (status emoji, timestamp) via Task Tracking Protocol logic.
    - Update other documentation (`DEPLOYMENT_CHECKLIST.md`, etc.) if needed.
4.  **Update Work Session:**
    - Change status to `ENDED`.
    - Add observation: `Session ended at [Timestamp]. Reason: [Reason Param]`.
    - Set `endTime` field/observation.
5.  **Verification:** Execute final L1/L2/L4 Verification Chain checks.
6.  **Audit:** Record `SESSION_END` event in Audit Trail.
7.  **Feedback:** Confirm session end.
````

## 4. Cross-Protocol Event System Integration
*(No changes from v2.1)*
*(...Content identical to v2.1...)*

## 5. Task Status Management Integration
*(No changes from v2.1, but emphasizes consistent handling of PAUSED marker)*
````javascript
// Conceptual Example: Status Updates (with PAUSED -> ACTIVE)
class SessionTaskManager {
    async updateTaskStatus(taskId, status, timestamp, sessionId) {
        const statusEmoji = this.getStatusEmoji(status);

        // Update Server Memory (using add_observations or similar)
        await mcp_Server_Memory_add_observations({ /* ... Task entity ... */ });
        // Potentially update Task status field if it exists

        // Update Roadmap File (ensure consistency with SC parsing)
        await this.updateRoadmapFile(taskId, statusEmoji, timestamp);
    }

    // Ensure this mapping aligns with SC logic
    getStatusEmoji(status) {
        const statusMap = {
            'ACTIVE': '🔄', // Changed from IN_PROGRESS for consistency
            'COMPLETED': '✅',
            'BLOCKED': '❌',
            'PENDING': '⏳',
            'PAUSED': '⏸️' // Used by SWS
        };
        return statusMap[status] || '❓';
    }

    async updateRoadmapFile(taskId, emoji, timestamp) {
        // Logic to read, find task line, update emoji and timestamp, write file
        // Must be robust to parsing variations used by Status Check
        // Must handle changing ⏸️ back to 🔄 on RWS if that marker is used.
    }
}
````

## 6. Verification Chain System Integration
*(No changes from v2.1)*

## 7. Error Recovery System Integration
*(No changes from v2.1)*

## 8. Audit Trail System Integration
*(No changes from v2.1)*

## 9. Session ID Naming Convention Recommendation
*(No changes from v2.1 - Requires separate update to `server-memory-rules.mdc`)*

## 10. Potential Improvements & Considerations
*(No changes from v2.1)*

## 11. Rationale for v2.2 Changes
- **SWS Enhancement:** Added verification after `WorkSessionSave` entity creation (Step 6 & 7) to prevent the protocol from proceeding if the entity wasn't successfully stored in Server Memory. This aims to stop the inconsistent state (roadmap paused, memory entity missing) from being created in the first place.
- **RWS Fallback Enhancement:** Modified the fallback logic when no `WorkSessionSave` entity is found (Step 1.a). It now explicitly checks the `ROADMAP_TASKS.md` file for the `⏸️` marker *before* looking for the last active session. If the marker is found without a corresponding save entity, it reports the inconsistency and stops, providing a more accurate error message than simply suggesting `BWS`. This helps diagnose the root cause (likely a failed `SWS`) rather than masking it.
```
