---
description: 
globs: 
alwaysApply: false
---
<software_development_meta_protocol>
1. **Initial Context Assessment**
   ```
   A. Environment Analysis
   - MUST check for Project Environment Context (`pe-ctxt`)
   - MUST identify current working directories
   - MUST verify available tools and permissions
   - MUST document system constraints

   B. Project Structure Analysis
   - MUST scan available documentation
   - MUST identify key configuration files
   - MUST understand directory structure
   - MUST note technology stack requirements
   ```

2. **Rule and Protocol Discovery**
   ```
   A. Available Instructions
   - MUST scan <available_instructions> FIRST
   - MUST use fetch_rules tool for relevant rules
   - MUST document all applicable rules
   - MUST identify rule dependencies

   B. Protocol Identification
   - MUST identify relevant execution protocols
   - MUST note protocol dependencies
   - MUST verify protocol compatibility
   - MUST document protocol constraints
   ```

3. **Task Analysis Framework**
   ```
   A. Requirement Breakdown
   - MUST break task into atomic units
   - MUST identify dependencies between units
   - MUST document expected outcomes
   - MUST note validation requirements

   B. Resource Identification
   - MUST identify required tools
   - MUST verify tool availability
   - MUST document tool constraints
   - MUST note alternative approaches
   ```

4. **Execution Strategy**
   ```
   A. Planning Phase
   - MUST create step-by-step execution plan
   - MUST identify validation points
   - MUST document rollback procedures
   - MUST note success criteria

   B. Risk Assessment
   - MUST identify potential failure points
   - MUST document mitigation strategies
   - MUST note system impacts
   - MUST plan for contingencies
   ```

5.  **Implementation Framework**
    ```
    A. Systematic Execution
    - MUST follow documented plan derived from protocols.
    - MUST internally validate the outcome of each granular step/tool call before proceeding.
    - MUST document progress comprehensively for internal tracking and auditing. **User-facing communication during execution should be concise**, focusing on initiation, completion, errors, and required interaction points, especially for self-contained commands (See Rule Execution Protocol 4.A).
    - MUST verify final outcomes against success criteria.
    - **CRITICAL PRE-TOOL CHECK:** BEFORE executing tools that perform file system operations with relative paths (`edit_file`, `delete_file`, `run_terminal_cmd` for `mkdir`/`touch`/etc.), the **Location Context Verification** step (Step 1) from the relevant file/directory protocol (e.g., `new-file-protocol.mdc`, `new-directory-protocol.mdc`) MUST have been completed and documented in the immediately preceding output.
    - **CRITICAL MID-IMPLEMENTATION CHECK:** If execution deviates significantly from the plan, introduces new dependencies/components governed by specific rules (e.g., adding an icon, creating a new file type, using a specific library mentioned in a rule), or refactors code in a way that might invoke different styling/structural rules, **MUST pause and re-evaluate rule relevance by revisiting Step 2 (Rule and Protocol Discovery) before proceeding.**
     - **CRITICAL STATE TRANSITION CHECK:** Before changing the status of a core entity (like `Task`) to a terminal state (e.g., `COMPLETED`, `FAILED`), MUST verify that all prerequisite conditions, state transitions, and user interactions defined in relevant protocols (e.g., `testing-verification-protocol.mdc` for `COMPLETED`) have been successfully met and documented/logged. Halt and trigger UERP if verification fails.

    B. Error Management
    - MUST detect execution failures
    - MUST implement recovery procedures
    - MUST document issues
    - MUST verify system stability
    ```

6. **Documentation Requirements**
   ```
   A. Progress Tracking
   - MUST document each internal step/decision/outcome for audit/review purposes.
   - MUST note deviations from the plan.
   - MUST track overall completion status.
   - MUST update relevant persistent documentation (e.g., roadmaps, logs) upon completion or at defined checkpoints. **Avoid verbose real-time narration of internal steps to the user** unless necessary for debugging or interaction.

   B. Knowledge Transfer
   - MUST document decisions
   - MUST explain rationale
   - MUST note lessons learned
   - MUST update best practices
   ```

**Implementation Requirements:**
1. This protocol MUST be applied BEFORE any action is taken
2. NO steps can be skipped without explicit justification
3. ALL decisions must be documented
4. ALL validations must be performed
5. ALL deviations must be justified

**Transition to Rule Execution Protocol:**
```
Upon completion of the Software Development Meta Protocol:
1. Apply Rule Execution Protocol to implement specific rules
2. Use established context for rule execution
3. Follow documented validation procedures
4. Maintain consistent documentation approach
```
</software_development_meta_protocol>