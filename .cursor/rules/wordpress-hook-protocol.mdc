---
description: 
globs: **/class-*.php, **/includes/*.php, **/admin/*.php, **/includes/api/*.php, **/includes/db/*.php, **/admin/class-*.php, **/includes/class-*.php, **/includes/api/class-*.php, **/includes/db/class-*.php, plugin-name.php, **/templates/*.php, **/admin/views/*.php, **/admin/partials/*.php, **/public/class-*.php, **/includes/interfaces/*.php, **/includes/traits/*.php, **/includes/abstracts/*.php, **/includes/integrations/*.php, **/includes/widgets/class-*.php, **/includes/blocks/class-*.php
alwaysApply: false
---
# WordPress Hook Protocol v1.1

*(Self-correction: Added protocol version, enhanced documentation section)*

## 1. Hook Naming Conventions
```php
// Plugin prefix MUST be used for all hooks
$prefix = 'your_plugin';

// Action hooks: {prefix}_action_context[_specific_trigger]
do_action("{$prefix}_user_registered", $user_id);
do_action("{$prefix}_content_created", $content_id, $user_id);
do_action("{$prefix}_settings_saved", $old_settings, $new_settings);

// Filter hooks: {prefix}_filter_target[_context]
$title = apply_filters("{$prefix}_content_title", $title, $content_id);
$content = apply_filters("{$prefix}_email_content", $content, $email_type);
```

## 2. Hook Documentation
```php
/**
 * Fires after a user registers through the plugin.
 *
 * @since 1.0.0
 * @param int $user_id The WordPress user ID.
 */
do_action('your_plugin_user_registered', $user_id);

/**
 * Filters the content title before display.
 *
 * @since 1.0.0
 * @param string $title      The current content title.
 * @param int    $content_id The content ID.
 * @return string The modified content title.
 */
$title = apply_filters('your_plugin_content_title', $title, $content_id);
```

## 3. Hook Callback Registration
```php
/**
 * Register a callback for the user registration action.
 *
 * @param int $user_id The user ID.
 * @return void
 */
function your_plugin_handle_user_registration($user_id) {
    // Process new user registration
}
add_action('your_plugin_user_registered', 'your_plugin_handle_user_registration', 10, 1);

/**
 * Filter content titles.
 *
 * @param string $title      The original title.
 * @param int    $content_id The content ID.
 * @return string The modified title.
 */
function your_plugin_filter_content_title($title, $content_id) {
    // Modify the title if needed
    return $title;
}
add_filter('your_plugin_content_title', 'your_plugin_filter_content_title', 10, 2);
```

## 4. Class-Based Hook Registration
```php
/**
 * Register hooks within a class.
 */
class Your_Plugin_Feature {
    /**
     * Constructor.
     */
    public function __construct() {
        // Register actions
        add_action('your_plugin_user_registered', [$this, 'handle_user_registration'], 10, 1);
        
        // Register filters
        add_filter('your_plugin_content_title', [$this, 'filter_content_title'], 10, 2);
    }
    
    /**
     * Handle user registration.
     *
     * @param int $user_id The user ID.
     * @return void
     */
    public function handle_user_registration($user_id) {
        // Process new user registration
    }
    
    /**
     * Filter content titles.
     *
     * @param string $title      The original title.
     * @param int    $content_id The content ID.
     * @return string The modified title.
     */
    public function filter_content_title($title, $content_id) {
        // Modify the title if needed
        return $title;
    }
}
```

## 5. Hook Priority
```php
// Early execution (before most other callbacks)
add_action('your_plugin_init', 'your_plugin_early_init', 5);

// Default priority
add_action('your_plugin_init', 'your_plugin_normal_init', 10);

// Late execution (after most other callbacks)
add_action('your_plugin_init', 'your_plugin_late_init', 20);

// Very late execution (e.g., for logging or cleanup)
add_action('your_plugin_init', 'your_plugin_cleanup', 999);
```

## 6. Removing Hooks
```php
// Remove a function hook
remove_action('your_plugin_init', 'your_plugin_early_init', 5);

// Remove a class method hook
remove_action('your_plugin_init', [$instance, 'method_name'], 10);

// Remove all callbacks for a specific hook
global $wp_filter;
if (isset($wp_filter['your_plugin_init'])) {
    unset($wp_filter['your_plugin_init']);
}
```

## 7. Hook Execution
```php
// Execute action with no parameters
do_action('your_plugin_init');

// Execute action with parameters
do_action('your_plugin_user_updated', $user_id, $old_data, $new_data);

// Apply filter with one parameter
$value = apply_filters('your_plugin_option', $default_value);

// Apply filter with multiple parameters
$content = apply_filters('your_plugin_content', $content, $context, $user_id);
```

## 8. Conditional Hook Registration
```php
/**
 * Register hooks conditionally based on context.
 */
function your_plugin_register_conditional_hooks() {
    // Only register in admin context
    if (is_admin()) {
        add_action('admin_menu', 'your_plugin_add_menu_pages');
    }
    
    // Only register for logged-in users
    if (is_user_logged_in()) {
        add_action('wp', 'your_plugin_init_user_features');
    }
    
    // Only register for specific post types
    if (get_post_type() === 'your_post_type') {
        add_filter('the_content', 'your_plugin_modify_content');
    }
}
add_action('init', 'your_plugin_register_conditional_hooks');
```

## 9. Plugin Activation/Deactivation Hooks
```php
/**
 * Register activation hook.
 */
function your_plugin_activate() {
    // Initialization code
    do_action('your_plugin_activated');
}
register_activation_hook(__FILE__, 'your_plugin_activate');

/**
 * Register deactivation hook.
 */
function your_plugin_deactivate() {
    // Cleanup code
    do_action('your_plugin_deactivated');
}
register_deactivation_hook(__FILE__, 'your_plugin_deactivate');
```

## 10. Best Practices
```php
// GOOD: Pass all context in parameters
do_action('your_plugin_user_saved', $user_id, $data);

// BAD: Rely on global state
$GLOBALS['your_plugin_current_user'] = $user_id;
do_action('your_plugin_user_saved');

// GOOD: Return modified value from filter
add_filter('your_plugin_title', function($title) {
    return $title . ' - Modified';
});

// BAD: Modify value by reference or global
add_filter('your_plugin_title', function($title) {
    $GLOBALS['your_plugin_title'] = $title . ' - Modified';
    // No return statement
});
```

## 11. Error Handling Integration
```php
/**
 * Handle errors in hook callbacks.
 * 
 * @param string $hook_name  The name of the hook being executed.
 * @param mixed  $return_value The value being filtered.
 * @param array  $args       Hook arguments.
 * @return mixed The filtered value.
 */
function your_plugin_safe_apply_filters($hook_name, $return_value, ...$args) {
    try {
        return apply_filters($hook_name, $return_value, ...$args);
    } catch (Exception $e) {
        // Log error (to error log or custom logging system)
        error_log('Error in ' . $hook_name . ': ' . $e->getMessage());
        
        // Optionally trigger universal error protocol if available
        if (function_exists('your_plugin_trigger_error_protocol')) {
            your_plugin_trigger_error_protocol($e, 'hook_error', [
                'hook_name' => $hook_name,
                'arguments' => $args
            ]);
        }
        
        // Return unfiltered value as fallback
        return $return_value;
    }
}
```

## 12. Documentation and Changelog
When adding or modifying hooks:
1. Document all hooks in a central hooks.md file
2. Include sample usage for developers
3. Add changelog entries for hook additions/changes
4. Use @since tags to mark version introduction
5. Use @deprecated tags when deprecating hooks