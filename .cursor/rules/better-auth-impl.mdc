---
description: 
globs: 
alwaysApply: false
---
# Better Auth Project Implementation

1. **Server-Side Configuration**
   ```javascript
   // src/lib/server/auth.js
   import { betterAuth } from "better-auth";
   import { MysqlDialect } from 'kysely';
   import mysql from 'mysql2/promise';

   export const auth = betterAuth({
       adapter: {
           type: "mysql",
           config: {
               host: process.env.DB_HOST || 'localhost',
               port: parseInt(process.env.DB_PORT || '10018', 10),
               user: process.env.DB_USER || 'root',
               password: process.env.DB_PASS || 'root',
               database: process.env.DB_NAME || 'local'
           }
       },
       secret: process.env.BETTER_AUTH_SECRET,
       baseUrl: process.env.BETTER_AUTH_URL || 'http://localhost:5173',
       emailAndPassword: {
           enabled: true,
           verifyEmail: true
       }
   });
   ```

2. **SvelteKit Integration**
   ```javascript
   // src/hooks.server.js
   import { auth } from '$lib/server/auth';
   import { svelteKitHandler } from 'better-auth/svelte-kit';

   export const handle = svelteKitHandler({ auth });

   // src/routes/api/auth/[...auth]/+server.js
   import { auth } from '$lib/server/auth';
   import { toSvelteKitHandler } from "better-auth/svelte-kit";

   const handler = toSvelteKitHandler({ auth });
   export const GET = handler;
   export const POST = handler;
   ```

3. **Client-Side Configuration**
   ```javascript
   // src/lib/auth-client.js
   import { createAuthClient } from "better-auth/svelte";
   import { dev } from '$app/environment';

   export const authClient = createAuthClient({
       baseURL: dev ? 'http://localhost:5173' : 'https://app.asapdigest.com'
   });
   ```

4. **Component Usage**
   ```javascript
   // In Svelte components:
   import { authClient } from "$lib/auth-client";

   // Sign In
   const signIn = async () => {
       const { data, error } = await authClient.signIn.email({
           email,
           password
       });
   };

   // Get Session
   const { data: session } = authClient.useSession();
   ```

5. **Required Environment Variables**
   ```plaintext
   BETTER_AUTH_SECRET=your-secret-key
   BETTER_AUTH_URL=http://localhost:5173
   DB_HOST=localhost
   DB_PORT=10018
   DB_NAME=local
   DB_USER=root
   DB_PASS=root
   ```

6. **Type Safety**
   ```typescript
   /** @typedef {Object} BetterAuthSession
    * @property {string} id - Session ID
    * @property {string} userId - User ID
    * @property {BetterAuthUser} user - Session user
    */

   /** @typedef {Object} BetterAuthUser
    * @property {string} id - User ID
    * @property {string} email - User email
    * @property {string} [username] - Optional username
    * @property {string} [name] - Optional display name
    */
   ```

7. **Error Handling**
   ```javascript
   try {
       const { data, error } = await authOperation();
       if (error) {
           console.error('Auth error:', error.message);
           // Handle error appropriately
       }
   } catch (err) {
       console.error('Unexpected auth error:', err);
   }
   ```

This rule should be applied when:
- Setting up authentication in a new SvelteKit project
- Implementing auth guards
- Setting up new routes requiring authentication
- Handling user sessions