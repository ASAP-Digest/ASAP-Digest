---
description: 
globs: 
alwaysApply: false
---
# Documentation Update Trigger Protocol v1.0

## 1. Purpose

This protocol defines the process triggered by the "Update Documentation" (`UD`) command (defined in `work-session-activation-protocol.mdc`). Its primary focus is to automate specific documentation generation tasks, currently centered around the OpenAPI specification, while clarifying its relationship to other documentation update mechanisms within the VeriDX system.

## 2. Protocol Integration Layer

```text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. Rule Execution Protocol              │ // How these steps are run
│ 2. Work Session Activation Proto v2.9+  │ // Defines 'UD' command trigger
│ 3. Tooling Setup Guide (v1.2+)          │ // Defines generation/linting scripts
│ 4. Universal Error Resolution (UERP)    │ // Handles script execution failures
│ 5. Update Memory Protocol (v2.1+)       │ // Handles manual doc updates (Roadmap, Checklist)
│ 6. New Rule Creation Protocol (v1.1+)   │ // Handles manual doc updates (Rule Index)
│ 7. Audit Trail System                   │ // Logs execution
│ 8. Documentation Update Trigger (This)  │ // Self-reference
└─────────────────────────────────────────┘
```

## 3. Activation

- **Command:** "Update Documentation"
- **Alias:** `UD`
- **Context:** Can be run at any time, typically after making changes to API route JSDoc annotations or when needing to ensure the OpenAPI spec is up-to-date.

## 4. Scope & Relationship to Other Protocols

- **Primary Scope:** This protocol, triggered by `UD`, is responsible for executing **automated documentation generation and validation scripts** defined in the `tooling-setup-guide.mdc`. Currently, this involves:
    - Running the OpenAPI annotation linter (`scripts/lint-openapi-annotations.js`).
    - Running the OpenAPI specification generator (`scripts/generate-openapi.js`).
    - Potentially running a broken link checker for Markdown files (if configured).
- **Manual Updates (Handled Elsewhere):** This protocol does **NOT** handle manual updates to documentation files like:
    - `md-docs/ROADMAP_TASKS.md` (updated by `update-memory.mdc`, `WSMP`, `TVP`).
    - `md-docs/DEPLOYMENT_CHECKLIST.md` (updated by `update-memory.mdc`).
    - `.cursor/rules/index.mdc` (updated by `new-rule-creation-protocol.mdc`).
    - `CHANGELOG.md` (updated manually or via specific release protocols).
- **Intention:** The `UD` command provides a convenient way to manually trigger the *automated parts* of the documentation workflow, ensuring generated artifacts like `openapi.json` are current, without needing a full commit cycle (which also runs these via hooks). It complements, but does not replace, the manual documentation updates performed by other protocols.

## 5. Execution Steps

1.  **Acknowledge Trigger:** Confirm receipt of the `UD` command.
2.  **Run Annotation Linter (if configured):**
    *   Execute the script defined in `tooling-setup-guide.mdc` (e.g., `node ./scripts/lint-openapi-annotations.js`).
    *   **Error Handling:** If the script fails, report the error, log `DOC_UPDATE_LINT_FAIL` in Audit Trail, trigger UERP, and HALT.
3.  **Run OpenAPI Generator (if configured):**
    *   Execute the script defined in `tooling-setup-guide.mdc` (e.g., `node ./scripts/generate-openapi.js`).
    *   **Error Handling:** If the script fails, report the error, log `DOC_UPDATE_GEN_FAIL` in Audit Trail, trigger UERP, and HALT.
4.  **Run Broken Link Checker (Optional, if configured):**
    *   Execute the command defined in `tooling-setup-guide.mdc` (e.g., `markdown-link-check ...`).
    *   **Error Handling:** If the script fails, report the error, log `DOC_UPDATE_LINK_CHECK_FAIL` in Audit Trail, trigger UERP, and HALT.
5.  **Report Completion:** Inform the user that the documentation update/generation process completed successfully.
6.  **Audit:** Record `DOC_UPDATE_COMPLETE` event in Audit Trail.

## 6. Verification Checklist (for this protocol)

- [ ] Does the protocol clearly define the `UD` trigger?
- [ ] Does Section 4 accurately clarify its scope (automated generation) versus manual updates handled by other protocols?
- [ ] Does the execution sequence correctly reference running scripts defined in the `tooling-setup-guide.mdc`?
- [ ] Does each script execution step include appropriate error handling (report, log, UERP trigger, HALT)?
- [ ] Does the protocol conclude with a completion report and audit log?
- [ ] Does the formatting adhere to `rule-formatting-protocol.mdc`?