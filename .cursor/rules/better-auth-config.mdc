---
description: 
globs: 
alwaysApply: true
---
# Better Auth Configuration Protocol v1.3

*(Self-correction: v1.2 - Incremented version, added clarification on adapter usage, added Error Handling section; v1.3 - Added Expected Instance Structure section)*

## 1. Purpose

This protocol defines the standard structure for the configuration object passed to the `betterAuth()` function. It specifically addresses integrating with a Kysely dialect (like MySQL) and clarifies the necessary configuration based on observed behavior in this project, particularly concerning session ID generation during token synchronization flows. Adhering to this structure is crucial to avoid type errors, prevent defaults to the memory adapter, ensure correct database initialization, and work around potential ID generation issues in specific library flows.

## 2. Core Principles

-   **Kysely Dialect Integration:** Utilize the `database` key at the top level to provide the Kysely `dialect` instance and explicit `type` (e.g., `"mysql"`). This aligns with standauth.com/docs/concepts/database](https://www.better-auth.com/docs/concepts/database)).
-   **Explicit Adapter for Reliability (Project Specific Requirement):** **Crucially**, due to observed issues where Better Auth's internal Kysely session creation logic did *not* generate the required UUID for the `ba_sessions.id` field during the WP sync token flow (leading to "Field 'id' doesn't have a default value" errors), this project **MUST ALSO** provide the full custom `adapter` object at the top level. This ensures our custom `createSessionFn` (which includes `crypto.randomUUID()`) is used, overriding any potentially incomplete internal logic for that specific operation.
-   **Configuration Precedence:** When both `database: { dialect, type }` and `adapter: { ...customFns }` are provided, Better Auth appears to prioritize the explicitly provided functions in the `adapter` object for operations they cover. The `dialect` likely handles operations *not* explicitly defined in the custom adapter.
-   **Valid Top-Level Keys:** Only recognized keys (`secret`, `database`, `adapter`, `sessionCookieName`, `sessionExpiresIn`, `after`, `emailAndPassword`, `socialProviders`, etc.) should be used at the top level.
-   **Secret Key:** Use the `secret` key for the main authentication secret.

## 3. Required Configuration Structure (MySQL + Kysely + Custom Adapter)

The object passed to `betterAuth()` MUST follow this structure for this project:

```javascript
import { betterAuth } from 'better-auth';
import { createPool } from 'mysql2/promise';
import { MysqlDialect } from 'kysely';
import {
    // Import your *full* custom adapter functions here
    getUserByEmailFn,
    getUserByIdFn,
    getSessionByTokenFn,
    createSessionFn, // Especially this one with UUID generation
    deleteSessionFn,
    getUserByWpIdFn,
    createUserFn,
    createAccountFn // Include createAccountFn if used in adapter object
} from './path/to/adapter-functions';
import {
    onUserCreationHook,
    onSessionCreationHook
} from './path/to/hooks'; // Example import for optional hooks

// Assume authSecret and DB connection details are defined elsewhere
const authSecret = process.env.BETTER_AUTH_SECRET;
const dbConfig = { /* ... your db connection details ... */ };

// Create the Kysely Dialect
const dialect = new MysqlDialect({
    pool: createPool(dbConfig)
});

// Define the adapter object using imported functions
const adapter = {
    getUserByEmail: getUserByEmailFn,
    getUserById: getUserByIdFn,
    getSessionByToken: getSessionByTokenFn,
    createSession: createSessionFn, // This uses crypto.randomUUID()
    deleteSession: deleteSessionFn,
    getUserByWpId: getUserByWpIdFn,
    createUser: createUserFn,
    createAccount: createAccountFn // Include createAccountFn if used
};

export const auth = betterAuth({
    // --- Top-Level Options ---
    secret: authSecret, // REQUIRED
    sessionCookieName: 'better_auth_session', // Optional
    sessionExpiresIn: 30 * 24 * 60 * 60 * 1000, // Optional

    // --- Database Configuration (Using Kysely Dialect) ---
    // Provide the dialect for potential internal use by Better Auth
    database: {
        dialect: dialect,   // REQUIRED: Kysely dialect instance
        type: "mysql",      // REQUIRED: Explicit type for the dialect
    },

    // --- Custom Adapter Configuration (OVERRIDES INTERNAL LOGIC) ---
    // MUST be provided to ensure our custom functions (esp. createSessionFn
    // with UUID generation) are used, overriding internal Kysely logic where needed.
    adapter: adapter,

    // --- Optional Lifecycle Hooks ---
    after: {
        onUserCreation: onUserCreationHook,
        onSessionCreation: onSessionCreationHook,
    }
});
```

## 4. Common Pitfalls to Avoid

-   **Omitting `database: { dialect, type }`:** Do not omit this, as it's the standard Kysely integration method.
-   **Omitting `adapter: adapter`:** Do not omit the custom adapter in *this project*, as it's required to work around the session ID generation issue during token sync.
-   **Nesting Dialect Incorrectly:** Do not nest the `dialect` inside the `adapter` object. Both `database` and `adapter` are top-level keys.
-   **Incorrect Key Names:** Do NOT use `authKey` instead of `secret`.

## 5. Verification Checklist

When configuring `betterAuth` for this project:

-   [ ] Is the `secret` key present at the top level?
-   [ ] Is the `database` key present at the top level?
-   [ ] Is the `dialect` instance correctly nested *inside* the `database` object?
-   [ ] Is the `type` property (e.g., `"mysql"`) present *inside* the `database` object alongside the `dialect`?
-   [ ] Is the `adapter` key present at the top level?
-   [ ] Does the `adapter` object contain all necessary custom adapter functions (including `createSessionFn` with UUID generation and `createAccountFn` if used)?
-   [ ] Are `sessionCookieName` and `sessionExpiresIn` at the top level (if used)?
-   [ ] Is the `after` object present at the top level (if hooks are used)?
-   [ ] Are there any unexpected keys at the top level?
-   [ ] Does the configuration pass linter checks without type errors related to `BetterAuthOptions`?
-   [ ] Does the server start *without* the "No database configuration provided. Using memory adapter..." warning?
-   [ ] Does the WP sync token -> session creation flow complete *without* the "Field 'id' doesn't have a default value" error?

## 6. Error Handling
-   If server startup fails due to configuration errors related to `betterAuth`, the `universal-error-resolution-protocol.mdc` MUST be triggered.
-   During UERP execution for `betterAuth` config errors, the **Verification Checklist (Section 5)** MUST be reviewed to identify the specific misconfiguration.

## 7. Expected Instance Structure (Reference) *(New Section v1.3)*

The `auth` instance returned by `betterAuth()` and exported from `$lib/server/auth.js` is expected to have the following key properties based on the library's functionality and our configuration:

-   **`sessionManager`**: An object containing methods for handling session cookies (`setCookie`, `deleteCookie`). This is crucial for setting the session cookie correctly.
-   **`adapter`**: The adapter object provided during configuration, containing our custom database functions (`getUserById`, `createSession`, etc.).
-   **`options`**: The configuration options passed to `betterAuth()`.
-   **(Other internal properties/methods):** The instance will contain other internal mechanisms used by the library to handle different authentication strategies (email/password, OTP, social), API endpoints, and request handling.

*Note: This section is for reference during type troubleshooting. The exact internal structure might vary slightly between library versions. Always prioritize verifying the existence and usage of specific properties (like `sessionManager`) needed in your code.*
