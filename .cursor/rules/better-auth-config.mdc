---
description: 
globs: 
alwaysApply: true
---
# Better Auth Configuration Protocol v1.4

*(Self-correction: v1.3 - Added Expected Instance Structure section; v1.4 - Added Headless Architecture Configuration)*

## 1. Purpose

This protocol defines the standard structure for the configuration object passed to the `betterAuth()` function, with special considerations for headless WordPress/SvelteKit architectures. It addresses integrating with a Kysely dialect (MySQL) and clarifies necessary configuration for server-to-server authentication flows.

## 2. Core Principles

-   **Kysely Dialect Integration:** Utilize the `database` key at the top level to provide the Kysely `dialect` instance and explicit `type` (e.g., `"mysql"`).
-   **Explicit Adapter for Reliability:** Provide the full custom `adapter` object to ensure complete control over database operations, especially for cross-system user synchronization.
-   **Configuration Precedence:** When both `database: { dialect, type }` and `adapter: { ...customFns }` are provided, Better Auth prioritizes the explicitly provided functions in the `adapter` object.
-   **Headless Architecture Support:** Include specific configurations for server-to-server authentication via shared secrets and proper CORS settings.
-   **Valid Top-Level Keys:** Only use recognized keys (`secret`, `database`, `adapter`, `sessionCookieName`, `sessionExpiresIn`, `after`, `emailAndPassword`, `socialProviders`, etc.).

## 3. Required Configuration Structure (Headless WP/SK with MySQL)

```javascript
import { betterAuth } from 'better-auth';
import { createPool } from 'mysql2/promise';
import { MysqlDialect } from 'kysely';
import {
    // Import your custom adapter functions
    getUserByEmailFn,
    getUserByIdFn,
    getSessionByTokenFn,
    createSessionFn,
    deleteSessionFn,
    getUserByWpIdFn,
    createUserFn,
    updateUserFn,
    createAccountFn,
    linkAccountFn
} from './path/to/adapter-functions';
import {
    onUserCreationHook,
    onSessionCreationHook,
    onWpUserSyncHook
} from './path/to/hooks';

// Configuration constants
const authSecret = process.env.BETTER_AUTH_SECRET;
const wpSyncSecret = process.env.WP_SYNC_SECRET; // For server-to-server auth
const dbConfig = { /* MySQL connection details */ };

// Create the Kysely Dialect
const dialect = new MysqlDialect({
    pool: createPool(dbConfig)
});

// Define the adapter object using imported functions
const adapter = {
    getUserByEmail: getUserByEmailFn,
    getUserById: getUserByIdFn,
    getSessionByToken: getSessionByTokenFn,
    createSession: createSessionFn,
    deleteSession: deleteSessionFn,
    getUserByWpId: getUserByWpIdFn, // Custom function for WP user lookup
    createUser: createUserFn,
    updateUser: updateUserFn,
    createAccount: createAccountFn,
    linkAccount: linkAccountFn
};

export const auth = betterAuth({
    // --- Top-Level Options ---
    secret: authSecret,
    sessionCookieName: 'better_auth_session',
    sessionExpiresIn: 30 * 24 * 60 * 60 * 1000, // 30 days
    
    // --- Database Configuration ---
    database: {
        dialect: dialect,
        type: "mysql",
    },
    
    // --- Custom Adapter ---
    adapter: adapter,
    
    // --- CORS Configuration for Headless Architecture ---
    cors: {
        origin: ['https://your-frontend-domain.com'],
        credentials: true,
        allowedHeaders: ['Content-Type', 'Authorization', 'X-WP-Sync-Secret'],
    },
    
    // --- Lifecycle Hooks ---
    after: {
        onUserCreation: onUserCreationHook,
        onSessionCreation: onSessionCreationHook,
        onWpUserSync: onWpUserSyncHook, // Custom hook for WP user sync
    },
    
    // --- Server-to-Server Authentication Config ---
    serverToServer: {
        enabled: true,
        syncSecret: wpSyncSecret,
        allowedSources: ['wordpress'],
        syncFields: ['email', 'displayName', 'firstName', 'lastName', 'roles'],
    }
});
```

## 4. Headless Architecture Specific Considerations

### 4.1 Server-to-Server Authentication
- The `serverToServer` configuration section is specific to headless WordPress/SvelteKit integration.
- `syncSecret` MUST match the secret configured in WordPress (as `BETTER_AUTH_SECRET`).
- `allowedSources` restricts which services can trigger user synchronization.
- `syncFields` specifies which user fields should be synchronized from WordPress.

### 4.2 Custom Adapter Functions
For WordPress integration, these additional functions are recommended:

```javascript
/**
 * Gets a Better Auth user by WordPress user ID
 * @param {string} wpUserId - WordPress user ID
 * @returns {Promise<Object|null>} User object or null
 */
async function getUserByWpIdFn(wpUserId) {
    // Implementation that queries ba_wp_user_map table
    // and joins with ba_users to get the user
}

/**
 * Updates user data during WordPress sync
 * @param {string} id - Better Auth user ID
 * @param {Object} userData - Updated user data
 * @returns {Promise<Object>} Updated user object
 */
async function updateUserFn(id, userData) {
    // Implementation that updates user data in ba_users
}

/**
 * Links WordPress user to Better Auth user
 * @param {string} wpUserId - WordPress user ID
 * @param {string} baUserId - Better Auth user ID
 * @returns {Promise<Object>} The mapping record
 */
async function linkAccountFn(wpUserId, baUserId) {
    // Implementation that creates/updates entry in ba_wp_user_map
}
```

### 4.3 Custom Lifecycle Hooks
For WordPress integration, this additional hook is recommended:

```javascript
/**
 * Hook that runs after WordPress user sync
 * @param {Object} user - The Better Auth user
 * @param {Object} wpUserData - The WordPress user data
 * @returns {Promise<void>}
 */
async function onWpUserSyncHook(user, wpUserData) {
    // Custom logic after WP user sync
    // E.g., sync additional user metadata, roles, etc.
}
```

## 5. Common Pitfalls to Avoid

-   **Omitting `database: { dialect, type }`:** Do not omit this, as it's the standard Kysely integration method.
-   **Omitting `adapter: adapter`:** Do not omit the custom adapter in a headless architecture, as it's required to handle WP-specific user operations.
-   **Nesting Dialect Incorrectly:** Do not nest the `dialect` inside the `adapter` object.
-   **Incorrect Key Names:** Do NOT use `authKey` instead of `secret`.
-   **Hardcoding Secrets:** Do not hardcode the `syncSecret` or `secret` in the code; use environment variables.
-   **Inconsistent Secrets:** Ensure the `syncSecret` matches between WordPress and SvelteKit.

## 6. Verification Checklist

When configuring `betterAuth` for a headless WordPress/SvelteKit project:

-   [ ] Is the `secret` key present at the top level?
-   [ ] Is the `database` key present with correct `dialect` and `type`?
-   [ ] Is the `adapter` key present with all necessary functions?
-   [ ] Are custom WP-specific adapter functions implemented?
-   [ ] Is the `cors` configuration properly set for cross-domain requests?
-   [ ] Is the `serverToServer` section properly configured with a matching `syncSecret`?
-   [ ] Are all secrets loaded from environment variables, not hardcoded?
-   [ ] Are custom lifecycle hooks implemented for WP user synchronization?
-   [ ] Are there any unexpected keys at the top level?
-   [ ] Does the server start without the "No database configuration provided. Using memory adapter..." warning?

## 7. Error Handling
-   If server startup fails due to configuration errors related to `betterAuth`, the `universal-error-resolution-protocol.mdc` MUST be triggered.
-   During UERP execution for `betterAuth` config errors, the **Verification Checklist (Section 6)** MUST be reviewed to identify the specific misconfiguration.

## 8. Expected Instance Structure (Reference)

The `auth` instance returned by `betterAuth()` and exported from `$lib/server/auth.js` is expected to have the following key properties based on the library's functionality and our configuration:

-   **`sessionManager`**: An object containing methods for handling session cookies and tokens.
-   **`adapter`**: The adapter object provided during configuration.
-   **`options`**: The configuration options passed to `betterAuth()`.