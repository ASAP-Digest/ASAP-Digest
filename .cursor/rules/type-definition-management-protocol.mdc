---
description: 
globs: app/src/routes/api/**/*.js, app/src/routes/**/+server.js, app/src/routes/**/+page.server.js, app/src/lib/server/**/*.js, app/src/lib/utils/**/*.js, app/src/lib/types/**/*.js, app/src/lib/api/**/*.js, app/src/hooks.server.js, app/src/hooks.client.js, app/src/lib/components/**/*.js, app/src/lib/stores/**/*.js, app/src/lib/actions/**/*.js, app/src/lib/services/**/*.js, app/src/lib/config/**/*.js, app/src/lib/constants/**/*.js, app/src/lib/validators/**/*.js, app/src/lib/transformers/**/*.js, app/src/lib/middleware/**/*.js, app/src/service-worker.js, app/src/app.d.ts
alwaysApply: false
---
# Type Definition Management Protocol v1.1

*(Self-correction: v1.1 - Clarified hook parameter typing, added verification checklist)*

## 1. Purpose

This protocol establishes clear rules for defining and managing TypeScript types (`.d.ts` files) and JSDoc type annotations (`@typedef`, `@param`, etc.) within the project. It ensures consistency, prevents type conflicts, distinguishes between global and local types, and provides guidance for common scenarios like SvelteKit event handlers and Better Auth objects.

## 2. Core Principles

-   **Single Source of Truth:** Define a type in only one place. Global types belong in `app.d.ts` or dedicated `.d.ts` files, while component-specific types use JSDoc `@typedef`.
-   **Clarity:** Types should be clearly named and documented.
-   **Consistency:** Follow consistent naming conventions (PascalCase for interfaces/types).
-   **JSDoc > TypeScript:** For `.js` and `.svelte` files, use JSDoc annotations for type checking. **NEVER use `<script lang="ts">`.**
-   **Global Scope:** Use `declare global` block in `app.d.ts` for types accessible everywhere (e.g., `App.Locals`).
-   **Minimal Imports:** Avoid unnecessary `@type` imports in JSDoc if a global type exists or if the type is simple enough for an inline definition.

## 3. Type Definition Locations

### 3.1 Global Types (`app.d.ts` or `src/types.d.ts`)

-   **Use Case:** Types shared across multiple routes, layouts, hooks, or endpoints. Examples: User session data, application-wide settings, core API response structures.
-   **Implementation:** Use standard TypeScript `interface` or `type` definitions. Wrap in `declare global { namespace App { ... } }` for SvelteKit-specific augmentations like `Locals` or `PageData`.

```typescript
// Example: app.d.ts
declare global {
	namespace App {
		interface Error {
			message: string;
			code?: string;
		}
		interface Locals {
			user?: import('$lib/types').User | null; // Example import from another d.ts
			sessionId?: string | null;
		}
		interface PageData {
			session?: import('better-auth').Session | null;
			flash?: { type: 'success' | 'error'; message: string };
		}
		// interface Platform {}
	}

	// Example of non-App global type
	interface WpUser {
		id: string;
		databaseId: number;
		username: string;
		email: string;
		firstName?: string;
		lastName?: string;
	}

	interface WpUserSync {
		wpUserId: number;
		wpUsername: string;
		wpEmail: string;
	}
	
	interface WpUserSyncResponse {
		success: boolean;
		message: string;
		betterAuthUserId?: string;
	}

}

export {}; // Ensures file is treated as a module
```

### 3.2 Local Types (JSDoc in `.js` or `.svelte` files)

-   **Use Case:** Types specific to a single component or module. Complex prop types, internal state shapes.
-   **Implementation:** Use `@typedef` within a JSDoc block. Can import types using `import('path').TypeName` if needed.

```javascript
/**
 * @typedef {import('$lib/types').ComplexSharedType} ComplexSharedType
 * @typedef {import('@prisma/client').PrismaClient} PrismaClient // Example DB client type
 */

/**
 * @typedef {Object} ComponentState
 * @property {boolean} isLoading
 * @property {string | null} errorMessage
 * @property {ComplexSharedType[]} data
 */

/** @type {ComponentState} */
let state = $state({ isLoading: false, errorMessage: null, data: [] });

/**
 * @typedef {Object} ComponentProps
 * @property {string} title
 * @property {() => void} onSubmit
 * @property {import('svelte').Snippet} [children] Optional content snippet
 */

/** @type {ComponentProps} */
const { title, onSubmit, children } = $props();
```

## 4. Specific Type Guidance

### 4.1 SvelteKit Event/Hook Parameters

-   **`hooks.server.js` (`handle`):**
    -   Use JSDoc `@param` for `event` and `resolve`.
    -   Type `event.locals` using the globally defined `App.Locals`.
    -   Use `Request` and `Response` standard types.
    ```javascript
    /**
     * Handles server requests, adding user data to locals.
     * @param {object} params - The hook parameters.
     * @param {import('@sveltejs/kit').RequestEvent & { locals: App.Locals }} params.event The SvelteKit request event, augmented with App.Locals.
     * @param {(event: import('@sveltejs/kit').RequestEvent, opts?: { transformPageChunk?: (input: { html: string; done: boolean }) => string | Promise<string>, filterSerializedResponseHeaders?: (name: string, value: string) => boolean }) => Promise<Response>} params.resolve The resolve function.
     * @returns {Promise<Response>} The response.
     */
    export async function handle({ event, resolve }) {
    	// event.locals is now typed as App.Locals
    	event.locals.user = await getUserFromSession(event.cookies.get('session'));
    	return resolve(event);
    }
    ```
-   **Route `load` functions:**
    -   Use JSDoc `@param` for the event object.
    -   Type `event.locals` as `App.Locals`.
    -   Type `event.params` as `Record<string, string>`.
    -   Type `event.fetch` structurally or import `Fetch` type if necessary.
    -   Type `event.request` as `Request`.
    -   (Reference: `jsdoc-complex-parameter-typing-protocol.mdc`)
-   **Route `actions`:**
    -   Use JSDoc `@param` for the event object.
    -   Type `event.locals` as `App.Locals`.
    -   Type `event.request` as `Request`.
    -   Use `FormData` type for form data.
-   **`+server.js` handlers:**
    -   Use JSDoc `@param` for the event object.
    -   Type `event.locals` as `App.Locals`.
    -   Type `event.params` as `Record<string, string>`.
    -   Type `event.request` as `Request`.
    -   Type return as `Promise<Response>`.

### 4.2 Better Auth Types

-   **Configuration (`betterAuth()`):** The `BetterAuthOptions` type is complex. Refer to `better-auth-config.mdc` for the required structure. Define adapter functions separately and import them. Use `@type {import('better-auth').BetterAuthOptions}` cautiously, ensuring your structure matches, or type the config object structurally with JSDoc.
-   **`Session` Object:** Can be imported: `@type {import('better-auth').Session}`. Add to `App.PageData` if needed globally.
-   **`User` Object:** Define your application's `User` interface (e.g., in `src/lib/types/index.d.ts` or `app.d.ts`) including any custom fields. Add this `User` type to `App.Locals`. Ensure it aligns with fields returned by your custom Better Auth adapter functions.

```typescript
// Example User type (e.g., in src/lib/types/index.d.ts)
export interface User {
	id: string;
	wpId?: number | null; // Link to WordPress ID
	email: string;
	displayName?: string | null;
	// Add other fields returned by your adapter's getUserById/getUserByEmail fns
	metadata?: {
		createdAt?: Date | string; // Allow string for potential serialization
		lastLogin?: Date | string;
	} | null;
	sessionToken?: string; // Only if explicitly added/needed
}

// Example app.d.ts referencing it
// ... inside declare global { namespace App { ... } }
// locals: { user?: import('$lib/types').User | null; ... }
```

## 5. Verification Checklist

When adding or modifying type definitions:

-   [ ] **Scope:** Is the type truly global (used across many unrelated modules) or local (specific to one component/module)?
-   [ ] **Location:** Is the type defined in the correct location (`app.d.ts` vs. JSDoc `@typedef`) based on its scope?
-   [ ] **Single Definition:** Does this type already exist elsewhere? If so, reuse the existing definition.
-   [ ] **Naming:** Does the type name use PascalCase? Is it clear and descriptive?
-   [ ] **JSDoc vs. TS:** If in a `.js`/`.svelte` file, are JSDoc annotations used? Is `<script lang="ts">` absent?
-   [ ] **Global Namespace:** If in `app.d.ts`, are `App` augmentations correctly placed within `declare global { namespace App { ... } }`?
-   [ ] **Exports:** If defined in a separate `.d.ts` file (not `app.d.ts`), does the file include `export {};`? Are types intended for import correctly exported (`export interface/type`)?
-   [ ] **Documentation:** Is the type definition accompanied by a clear JSDoc comment explaining its purpose and properties?
-   [ ] **Usage:** Are the types being correctly applied using `@type`, `@param`, `@returns`, etc.?
-   [ ] **Imports:** Are `@type {import(...)}` statements used correctly and only when necessary?
-   [ ] **Conflicts:** Does the new type conflict with existing types (name collisions)?
-   [ ] **Framework Types:** Are SvelteKit/Better Auth types handled according to Section 4 guidelines?
-   [ ] **Linter/Checker:** Does `pnpm check` (or equivalent) pass without errors related to the new/modified types?