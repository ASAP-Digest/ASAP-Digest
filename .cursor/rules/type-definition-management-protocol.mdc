---
description: 
globs: app/src/routes/api/**/*.js, app/src/routes/**/+server.js, app/src/routes/**/+page.server.js, app/src/lib/server/**/*.js, app/src/lib/utils/**/*.js, app/src/lib/types/**/*.js, app/src/lib/api/**/*.js, app/src/hooks.server.js, app/src/hooks.client.js, app/src/lib/components/**/*.js, app/src/lib/stores/**/*.js, app/src/lib/actions/**/*.js, app/src/lib/services/**/*.js, app/src/lib/config/**/*.js, app/src/lib/constants/**/*.js, app/src/lib/validators/**/*.js, app/src/lib/transformers/**/*.js, app/src/lib/middleware/**/*.js, app/src/service-worker.js, app/src/app.d.ts
alwaysApply: false
---
# Type Definition Management Protocol v1.0

## 1. Purpose

This protocol establishes standards for organizing, creating, and maintaining type definitions in a JavaScript+JSDoc project that uses Svelte and SvelteKit. It provides guidance for structuring type definitions, handling Svelte component imports, and ensuring type safety without TypeScript files.

## 2. Protocol Integration Layer

```text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. JSDoc Complex Parameter Typing       │ // Detailed parameter typing patterns
│ 2. Local Variable Type Safety           │ // Runtime type checks
│ 3. SvelteKit/Shadcn/Tailwind Integration│ // Framework specifics
│ 4. Type Definition Management (This)    │ // Organizational structure
└─────────────────────────────────────────┘
```

## 3. Type Definition Organization

### 3.1 Directory Structure

```text
app/
├── src/
│   ├── lib/
│   │   ├── types/                 # Primary location for all type definitions
│   │   │   ├── better-auth.js     # Better Auth type definitions
│   │   │   ├── svelte-components.js # Svelte component helpers
│   │   │   ├── api-responses.js   # API response types
│   │   │   └── app-models.js      # Application data models
```

### 3.2 Declaration Files

- Keep TypeScript declaration files (`.d.ts`) for global types (e.g., `app.d.ts`).
- All application type definitions should be in `.js` files with JSDoc.

## 4. Handling Svelte Component Imports

### 4.1 Standard Approach for Svelte Imports

```javascript
// @ts-ignore - Svelte component import
import Component from './path/to/component.svelte';
```

### 4.2 Automated Addition

- Use the `fix-svelte-imports.js` script to automatically add `@ts-ignore` comments before Svelte component imports.
- Run: `node scripts/fix-svelte-imports.js`

### 4.3 Index File Patterns

For UI component directories with index files:

```javascript
// index.js in a component directory
// @ts-ignore - Svelte component import
import Root from './component.svelte';
// @ts-ignore - Svelte component import
import Child from './component-child.svelte';

// Named exports
export {
  Root,
  Child,
  // Aliases if needed
  Root as Component,
  Child as ComponentChild
};
```

## 5. Svelte Component Type Definitions

### 5.1 Global Helper Types

Create `src/lib/types/svelte-components.js`:

```javascript
/**
 * @fileoverview Global JSDoc definitions for Svelte components
 */

/**
 * @typedef {Object} SvelteComponent
 * @property {Function} $destroy - Destroys the component
 * @property {Function} $set - Sets component properties
 * @property {Function} $on - Subscribes to component events
 */

/**
 * Helper comment to use before svelte imports:
 * // @ts-ignore - Svelte component import
 */

export {};
```

### 5.2 Component Props Definition

In Svelte component files:

```javascript
<script>
  /**
   * @typedef {Object} ButtonProps
   * @property {string} [variant="default"] - Button style variant
   * @property {string} [size="default"] - Button size
   * @property {import('svelte').Snippet} [children] - Button content
   */
  
  /** @type {ButtonProps} */
  const props = $props();
</script>
```

## 6. Type Conversion from TypeScript

### 6.1 Automated Conversion

- Use `convert-typescript-files.js` script to convert basic TypeScript files to JavaScript with JSDoc.
- Run: `node scripts/convert-typescript-files.js`

### 6.2 Manual Conversion Patterns

TypeScript interfaces to JSDoc typedef:

```typescript
// TypeScript
interface User {
  id: string;
  name: string;
  email: string;
  isAdmin?: boolean;
}
```

```javascript
// JavaScript + JSDoc
/**
 * @typedef {Object} User
 * @property {string} id - User identifier
 * @property {string} name - User's name
 * @property {string} email - User's email address
 * @property {boolean} [isAdmin] - Whether user has admin privileges
 */
```

## 7. jsconfig.json Configuration

Ensure `jsconfig.json` is properly configured:

```json
{
  "extends": "./.svelte-kit/tsconfig.json",
  "compilerOptions": {
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true
  },
  "include": [
    ".svelte-kit/ambient.d.ts",
    ".svelte-kit/types/**/$types.d.ts",
    "src/**/*.js",
    "src/**/*.svelte"
  ]
}
```

## 8. Verification Checklist

When implementing or reviewing type definitions:

- [ ] Are type definitions organized in the appropriate files under `src/lib/types/`?
- [ ] Do all Svelte component imports have `@ts-ignore` comments?
- [ ] Are complex types defined using `@typedef` with detailed property documentation?
- [ ] Are component props properly defined with JSDoc types?
- [ ] Is `jsconfig.json` properly configured for JS+JSDoc checking?
- [ ] Are TypeScript declaration files (`.d.ts`) used only for global/ambient types?
- [ ] Are there any remaining `.ts` files that should be converted to `.js` with JSDoc?