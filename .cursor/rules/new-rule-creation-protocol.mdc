---
description: 
globs: 
alwaysApply: true
---
# New Rule Creation Protocol v1.3

*(Self-correction: v1.2 - Added reasoning presentation requirement; v1.3 - Integrated best practices from external research: explicit analysis, guardrails, testability, verification methods, and cited sources.)*

## 1. Purpose

This protocol defines the systematic process for identifying the need for, drafting, refining, integrating, and documenting new rules (`.mdc` files) within the VeriDX system. It standardizes the creation process, often triggered by recurring errors or identified gaps in existing procedures, ensuring new rules are effective, well-formatted, integrated, maintainable, and incorporate established best practices for clarity and adherence.

## 2. Protocol Integration Layer

```text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. Software Development Meta Protocol   │ // Overall Task Guidance
│ 2. Rule Execution Protocol              │ // Executing steps herein
│ 3. Universal Error Resolution (UERP)    │ // Error analysis & Enhancement trigger
│ 4. Rule Formatting Protocol             │ // MANDATORY formatting standard
│ 5. Master Rule Index Protocol           │ // Defines index file to be updated
│ 6. Server Memory Rules                  │ // Logging/Tracking (Optional)
│ 7. Cross-Protocol Comms & Verification   │ // Verifying rule integrity
│ 8. Audit Trail System                   │ // Logging rule creation event
│ 9. Protocol Update Best Practices       │ // Source of integrated practices
│ 10. New Rule Creation (This v1.3)       │ // Self-reference
└─────────────────────────────────────────┘
```

## 3. Activation & Trigger Conditions

This protocol is typically initiated when:

-   **Error Resolution:** A recurring error or category of errors is identified through the `Universal Error Resolution Protocol (UERP)`, suggesting a need for a preventative rule.
-   **Process Gap:** A gap in standardization or procedure is identified during development or review, requiring a new rule to ensure consistency or efficiency.
-   **New Feature/Technology:** Introduction of a new technology, pattern, or significant feature necessitates a guiding protocol.
-   **Explicit User Request:** The user explicitly requests the creation of a new rule.

## 4. Protocol Steps

### Step 1: Problem Definition & Analysis (UERP Integration)

1.  **Identify Need:** Clearly articulate the problem the new rule aims to solve or the process it intends to standardize.
2.  **Error Description (If Applicable):** If triggered by an error (via UERP), accurately and comprehensively describe the error, its symptoms, and its occurrences.
3.  **Root Cause Analysis (UERP):** Determine the fundamental cause of the error or process gap. *This is crucial for ensuring the rule addresses the core issue.*
4.  **Categorization:** Categorize the problem domain (e.g., "UI Consistency", "State Management", "Dependency Handling", "Security", "Formatting").
5.  **Existing Rule Check:** Verify that no existing rule adequately addresses the identified problem. Search `<available_instructions>`, Server Memory/Docs, and `@master-rule-index-protocol.mdc`.
6.  **Consult External Best Practices (SHOULD):** If the problem involves complex technical standards, security, or areas where external best practices are well-established, perform research (e.g., using `@Web` search or consulting relevant documentation) to inform the rule's content. *Leverage external knowledge where applicable.*

### Step 2: Draft Initial Specific Rule

1.  **Focused Solution:** Draft the initial version of the rule to directly address the *specific* instance of the problem or error category identified in Step 1.
2.  **Core Principle:** Clearly state the core principle or behavior the rule enforces.
3.  **Actionable Steps:** Define clear, actionable steps or requirements. Use prescriptive language (MUST, SHOULD, MAY) where appropriate (RFC 2119).
4.  **Examples:** Include specific "Correct" and "Incorrect" examples relevant to the initial problem scope.

### Step 3: Generalization & Refinement (Incorporate Guardrails)

1.  **Identify Core Principle:** Re-evaluate the core principle identified in Step 2. Is it applicable more broadly?
2.  **Broaden Scope:** Refine the rule's language and steps to make it generic enough to apply universally to the *category* of problem, not just the specific instance.
3.  **Abstract Examples:** Update or add examples to illustrate the broader application of the rule.
4.  **Clarity & Testability:** Ensure the rule's requirements are unambiguous and, where possible, **testable** (either automatically via linters/checks or manually via checklists). *Rules should enable verification.*
5.  **Incorporate Guardrails/Halts (MUST where applicable):** If the rule defines a process involving potential risks (e.g., destructive actions, complex state changes), explicitly include pre-condition checks, validation steps, or specific HALT conditions as guardrails. Provide "escape hatches" if a required action cannot be safely performed. *Build safety and error handling into the rule.*
6.  **Conflict Check:** Analyze potential conflicts with existing rules. Resolve conflicts or document necessary precedence.

### Step 4: Formatting, Structure & File Standards (MANDATORY)

1.  **Adhere to Formatting Protocol:** The *entire* content of the new rule MUST strictly adhere to all requirements defined in `rule-formatting-protocol.mdc`. This includes:
    *   Single outer ` ````markdown ... ```` ` block structure for the rule content.
    *   Triple backticks (` ``` `) for ALL nested code examples, configurations, or structured text blocks.
    *   Appropriate language specifiers.
    *   Clear headings (`##`, `###`) and lists/bullets.
    *   Consistent inline formatting (`` ` ``).
2.  **File Location (MUST):** Rule files MUST be placed exclusively within the `PROJECT_ROOT/.cursor/rules/` directory.
3.  **Naming Convention (MUST):** Rule filenames MUST use `kebab-case` and the `.mdc` extension (e.g., `new-component-structure-protocol.mdc`). Names should be descriptive.
4.  **Frontmatter (MUST):** Each rule file MUST begin with YAML frontmatter enclosed in `---`. At a minimum, it MUST include:
    ```yaml
    ---
    description: Short description of the rule's purpose (used in the Master Rule Index).
    globs: Optional array of glob patterns where this rule might be automatically suggested or applied. Use [] if not applicable.
    alwaysApply: Optional boolean (defaults to false). If true, indicates the rule should generally always be considered/applied.
    ---
    ```
5.  **Versioning (MUST):** Include a version number (e.g., `v1.0`) in the main heading (`# Rule Title vX.Y`). Increment appropriately when updating.

### Step 5: Integration Planning & Verification Definition

1.  **Identify Touchpoints:** Determine which existing protocols or workflows the new rule will interact with or modify.
2.  **Update Integrating Protocols (If Needed):** Identify if any existing protocols need updates to reference or integrate the new rule (e.g., adding checks to an enforcement protocol, updating a meta-protocol step). Plan these edits separately.
3.  **Define Verification Method (MUST):** Explicitly specify *how* adherence to the new rule will be verified. Options include:
    *   Manual Checklist (Include the checklist within the rule).
    *   Automated Checks (Specify tool/script, e.g., `grep_search` regex, ESLint rule).
    *   Execution Feedback (Define expected output/state change).
    *   Integration with `ui-check.mdc` or `strict-visual-enforcement-protocol.mdc`.
    *   Cross-Protocol Verification checks.
    *   *Verification ensures the rule's effectiveness.*

### Step 6: Verification & Documentation

1.  **Self-Verification:** Review the drafted rule against this protocol's checklist (Section 9). Check for clarity, completeness, formatting adherence, testability, guardrails, defined verification, and non-conflict.
2.  **Documentation Updates:**
    *   **Update Master Rule Index (MUST):** Add the new rule's filename and description to the index structure located within `@master-rule-index-protocol.mdc` (Section 4), under the appropriate category, following the guidelines in that protocol.
    *   Add the new rule's name and description to the `<available_instructions>` list (or the system managing it).
    *   Update any protocols identified in Step 5.2.
    *   Add an entry to a relevant `CHANGELOG.md` or project documentation noting the new rule's addition.
    *   Optionally, create/update `Task` or `Documentation` entities in Server Memory.
3.  **Audit:** Record `RULE_CREATED`, `MASTER_INDEX_UPDATED` events in the Audit Trail.

### Step 7: Review & Finalization (User Driven)

1.  **Present Draft & Reasoning:** Present the fully formatted and documented rule draft to the user for review. **MUST explicitly present the reasoning/analysis from Step 1 (and research from Step 1.6 if applicable) that justifies the rule's creation.** *Explain the "why" behind the rule.*
2.  **Incorporate Feedback:** Address any feedback or requested modifications from the user.
3.  **Final Approval:** Await user confirmation before considering the rule officially active and ready for enforcement/use. (The mechanism for formal activation, e.g., merging a file, depends on the project's workflow).

## 5. Integrated Best Practices Summary

This protocol incorporates the following best practices derived from external research and software development standards:

*   **Structured Analysis:** Emphasizing root cause analysis before drafting (Step 1).
*   **Leveraging External Knowledge:** Encouraging research where applicable (Step 1).
*   **Clarity & Testability:** Ensuring rules are unambiguous and verifiable (Step 3, Step 5).
*   **Built-in Safety:** Incorporating guardrails and explicit halt conditions (Step 3).
*   **Automated Verification:** Defining specific verification methods, favoring automation/execution feedback where possible (Step 5). (Inspired by [AutoIF](https://arxiv.org/html/2406.13542v1), [OpsLevel Best Practices](https://www.opslevel.com/resources/standards-in-software-development-and-9-best-practices))
*   **Explicit Reasoning:** Requiring justification for rule creation during review (Step 7). (Inspired by [INSTRUCT](https://medium.com/@ickman/instruct-making-llms-do-anything-you-want-ff4259d4b91))
*   **Standardization & Consistency:** Adhering to strict formatting and structure (Step 4). ([OpsLevel Standards](https://www.opslevel.com/resources/standards-in-software-development-and-9-best-practices))
*   **Documentation & Versioning:** Maintaining clear records and version history (Step 4, Step 6). (Standard practice, e.g., [Hyperproof](https://hyperproof.io/resource/secure-software-development-best-practices/))

## 6. Rule Content Guidelines

-   Use clear, concise language.
-   Employ prescriptive keywords (MUST, SHOULD, MAY) where appropriate (RFC 2119).
-   Provide concrete examples.
-   Focus on preventing the root cause identified in Step 1.
-   Ensure rules are maintainable and understandable.

## 7. Verification Checklist (for the New Rule)

*(Self-correction: Updated checklist for v1.3)*

-   [ ] Does the rule address a clearly defined need/problem based on root cause analysis?
-   [ ] Was external research considered where appropriate?
-   [ ] Is the core principle clearly stated?
-   [ ] Are the steps/requirements actionable and unambiguous?
-   [ ] Is the rule sufficiently generalized?
-   [ ] Does the rule incorporate necessary guardrails/halts?
-   [ ] Is the verification method clearly defined and appropriate (favoring automation/testability)?
-   [ ] Does the formatting strictly adhere to `rule-formatting-protocol.mdc`?
-   [ ] Does the file location and naming adhere to standards (Step 4)?
-   [ ] Does the rule include the required frontmatter (Step 4)?
-   [ ] Does the rule include a version number?
-   [ ] Are potential conflicts with existing rules addressed?
-   [ ] Are necessary documentation updates identified/planned?
-   [ ] **Has the rule been added to the Master Rule Index (within `@master-rule-index-protocol.mdc` Section 4)?**
-   [ ] Has the rule been added to `<available_instructions>`?
-   [ ] Is the reasoning for the rule ready to be presented to the user?