---
description: 
globs: **/class-*.php, **/includes/*.php, **/admin/*.php, **/includes/api/*.php, **/includes/db/*.php, **/admin/class-*.php, **/includes/class-*.php, **/includes/api/class-*.php, **/includes/db/class-*.php, plugin-name.php, **/templates/*.php, **/admin/views/*.php, **/admin/partials/*.php, **/public/class-*.php, **/includes/interfaces/*.php, **/includes/traits/*.php, **/includes/abstracts/*.php, **/includes/integrations/*.php, **/includes/widgets/class-*.php, **/includes/blocks/class-*.php
alwaysApply: false
---
# WordPress Menu Registration Protocol v1.1

*(Self-correction: Added protocol version, enhanced security section)*

## 1. Menu Registration Structure
```php
/**
 * Register plugin admin menus.
 *
 * @return void
 */
function your_plugin_register_admin_menus() {
    // Main menu
    add_menu_page(
        __('Your Plugin', 'your-plugin'),              // Page title
        __('Your Plugin', 'your-plugin'),              // Menu title
        'manage_options',                              // Capability
        'your-plugin',                                 // Menu slug
        'your_plugin_render_main_admin_page',          // Callback function
        'dashicons-admin-generic',                     // Icon
        30                                             // Position
    );
    
    // Submenu pages
    add_submenu_page(
        'your-plugin',                                 // Parent slug
        __('Dashboard', 'your-plugin'),                // Page title
        __('Dashboard', 'your-plugin'),                // Menu title
        'manage_options',                              // Capability
        'your-plugin',                                 // Menu slug (same as parent for first submenu)
        'your_plugin_render_main_admin_page'           // Callback function
    );
    
    add_submenu_page(
        'your-plugin',                                 // Parent slug
        __('Settings', 'your-plugin'),                 // Page title
        __('Settings', 'your-plugin'),                 // Menu title
        'manage_options',                              // Capability
        'your-plugin-settings',                        // Menu slug
        'your_plugin_render_settings_page'             // Callback function
    );
}
add_action('admin_menu', 'your_plugin_register_admin_menus');
```

## 2. Class-Based Menu Registration
```php
/**
 * Admin menu handler class.
 */
class Your_Plugin_Admin_Menu {
    /**
     * Register all admin menus and submenu pages.
     *
     * @return void
     */
    public function register_menus() {
        // Main menu
        add_menu_page(
            __('Your Plugin', 'your-plugin'),          // Page title
            __('Your Plugin', 'your-plugin'),          // Menu title
            'manage_options',                          // Capability
            'your-plugin',                             // Menu slug
            [$this, 'render_main_page'],               // Callback
            'dashicons-admin-generic',                 // Icon
            30                                         // Position
        );
        
        // Submenu pages
        add_submenu_page(
            'your-plugin',                             // Parent slug
            __('Dashboard', 'your-plugin'),            // Page title
            __('Dashboard', 'your-plugin'),            // Menu title
            'manage_options',                          // Capability
            'your-plugin',                             // Menu slug (same as parent)
            [$this, 'render_main_page']                // Callback
        );
        
        add_submenu_page(
            'your-plugin',                             // Parent slug
            __('Settings', 'your-plugin'),             // Page title
            __('Settings', 'your-plugin'),             // Menu title
            'manage_options',                          // Capability
            'your-plugin-settings',                    // Menu slug
            [$this, 'render_settings_page']            // Callback
        );
    }
    
    /**
     * Render the main admin page.
     *
     * @return void
     */
    public function render_main_page() {
        // Verify current user can access the page
        if (!current_user_can('manage_options')) {
            wp_die(__('You do not have sufficient permissions to access this page.', 'your-plugin'));
        }
        
        // Include the view file
        include plugin_dir_path(__FILE__) . 'views/main-page.php';
    }
    
    /**
     * Render the settings page.
     *
     * @return void
     */
    public function render_settings_page() {
        // Verify current user can access the page
        if (!current_user_can('manage_options')) {
            wp_die(__('You do not have sufficient permissions to access this page.', 'your-plugin'));
        }
        
        // Include the view file
        include plugin_dir_path(__FILE__) . 'views/settings-page.php';
    }
}

// Initialize and register
$admin_menu = new Your_Plugin_Admin_Menu();
add_action('admin_menu', [$admin_menu, 'register_menus']);
```

## 3. Page Security Verification
```php
/**
 * Verify user capabilities before rendering admin pages.
 *
 * @param string $capability The WordPress capability required.
 * @return void
 */
function your_plugin_verify_admin_access($capability = 'manage_options') {
    // Check user capabilities
    if (!current_user_can($capability)) {
        wp_die(
            __('You do not have sufficient permissions to access this page.', 'your-plugin'),
            403
        );
    }
    
    // Verify nonce for form processing if applicable
    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        // Check if nonce exists
        if (!isset($_REQUEST['_wpnonce'])) {
            wp_die(
                __('Security verification failed: Nonce is missing.', 'your-plugin'),
                403
            );
        }
        
        $nonce = $_REQUEST['_wpnonce'];
        if (!wp_verify_nonce($nonce, 'your_plugin_admin_action')) {
            wp_die(
                __('Security verification failed. Please try again.', 'your-plugin'),
                403
            );
        }
        
        // Additional security: Referer check
        check_admin_referer('your_plugin_admin_action');
    }
}

/**
 * Render settings page with security verification.
 *
 * @return void
 */
function your_plugin_render_settings_page() {
    // Verify user access
    your_plugin_verify_admin_access('manage_options');
    
    // Now safe to render page
    include plugin_dir_path(__FILE__) . 'views/settings-page.php';
}
```

## 4. Menu Sections & Tabs
```php
/**
 * Render tabbed interface for admin pages.
 *
 * @param string $current_tab The currently active tab slug.
 * @return void
 */
function your_plugin_render_admin_tabs($current_tab = 'general') {
    $tabs = [
        'general' => __('General', 'your-plugin'),
        'api' => __('API Settings', 'your-plugin'),
        'integrations' => __('Integrations', 'your-plugin'),
        'logs' => __('System Logs', 'your-plugin'),
    ];
    
    echo '<h2 class="nav-tab-wrapper wp-clearfix">';
    
    foreach ($tabs as $tab => $name) {
        $class = ($tab === $current_tab) ? ' nav-tab-active' : '';
        echo '<a href="?page=your-plugin-settings&tab=' . esc_attr($tab) . '" class="nav-tab' . esc_attr($class) . '">' . esc_html($name) . '</a>';
    }
    
    echo '</h2>';
}

/**
 * Process and route to the correct settings tab view.
 *
 * @return void
 */
function your_plugin_render_settings_page() {
    // Verify user access
    your_plugin_verify_admin_access('manage_options');
    
    // Get current tab, sanitize input
    $current_tab = isset($_GET['tab']) ? sanitize_key($_GET['tab']) : 'general';
    
    // Validate tab exists in our defined set
    $valid_tabs = ['general', 'api', 'integrations', 'logs'];
    if (!in_array($current_tab, $valid_tabs)) {
        $current_tab = 'general'; // Default to general if invalid tab requested
    }
    
    // Render header and tabs
    echo '<div class="wrap">';
    echo '<h1>' . esc_html__('Your Plugin Settings', 'your-plugin') . '</h1>';
    
    your_plugin_render_admin_tabs($current_tab);
    
    // Render tab content
    $tab_file = plugin_dir_path(__FILE__) . 'views/settings-' . $current_tab . '.php';
    if (file_exists($tab_file)) {
        include $tab_file;
    } else {
        // Fallback to general if file doesn't exist
        include plugin_dir_path(__FILE__) . 'views/settings-general.php';
    }
    
    echo '</div>';
}
```

## 5. Custom Menu Capabilities
```php
/**
 * Register custom capabilities for the plugin.
 *
 * @return void
 */
function your_plugin_register_capabilities() {
    // Get administrator role
    $admin = get_role('administrator');
    
    // Add custom capabilities
    if ($admin) {
        $admin->add_cap('your_plugin_manage_settings');
        $admin->add_cap('your_plugin_view_analytics');
        $admin->add_cap('your_plugin_manage_content');
    }
}
register_activation_hook(__FILE__, 'your_plugin_register_capabilities');

/**
 * Remove custom capabilities when plugin is uninstalled.
 *
 * @return void
 */
function your_plugin_remove_capabilities() {
    // Get administrator role
    $admin = get_role('administrator');
    
    // Remove custom capabilities
    if ($admin) {
        $admin->remove_cap('your_plugin_manage_settings');
        $admin->remove_cap('your_plugin_view_analytics');
        $admin->remove_cap('your_plugin_manage_content');
    }
}
register_uninstall_hook(__FILE__, 'your_plugin_remove_capabilities');

/**
 * Use custom capabilities in menu registration.
 */
function your_plugin_register_admin_menus() {
    // Main menu with custom capability
    add_menu_page(
        __('Your Plugin', 'your-plugin'),
        __('Your Plugin', 'your-plugin'),
        'your_plugin_manage_settings',  // Custom capability
        'your-plugin',
        'your_plugin_render_main_admin_page',
        'dashicons-admin-generic',
        30
    );
    
    // Analytics submenu with specific capability
    add_submenu_page(
        'your-plugin',
        __('Analytics', 'your-plugin'),
        __('Analytics', 'your-plugin'),
        'your_plugin_view_analytics',  // Custom capability
        'your-plugin-analytics',
        'your_plugin_render_analytics_page'
    );
    
    // Content manager with specific capability
    add_submenu_page(
        'your-plugin',
        __('Content Manager', 'your-plugin'),
        __('Content Manager', 'your-plugin'),
        'your_plugin_manage_content',  // Custom capability
        'your-plugin-content',
        'your_plugin_render_content_page'
    );
}
```

## 6. Settings Registration
```php
/**
 * Register plugin settings.
 *
 * @return void
 */
function your_plugin_register_settings() {
    // Register a setting group
    register_setting(
        'your_plugin_options',               // Option group
        'your_plugin_options',               // Option name
        [
            'sanitize_callback' => 'your_plugin_sanitize_options',
            'default' => [
                'api_key' => '',
                'daily_limit' => 10
            ]
        ]
    );
    
    // Add a settings section
    add_settings_section(
        'your_plugin_general_section',       // Section ID
        __('General Settings', 'your-plugin'), // Title
        'your_plugin_render_general_section', // Callback
        'your-plugin-settings'               // Page
    );
    
    // Add settings fields
    add_settings_field(
        'your_plugin_api_key',               // Field ID
        __('API Key', 'your-plugin'),        // Title
        'your_plugin_render_api_key_field',  // Callback
        'your-plugin-settings',              // Page
        'your_plugin_general_section'        // Section
    );
    
    add_settings_field(
        'your_plugin_daily_limit',           // Field ID
        __('Daily Limit', 'your-plugin'),    // Title
        'your_plugin_render_daily_limit_field', // Callback
        'your-plugin-settings',              // Page
        'your_plugin_general_section'        // Section
    );
}
add_action('admin_init', 'your_plugin_register_settings');

/**
 * Sanitize and validate settings.
 * 
 * @param array $input The settings being saved.
 * @return array Sanitized settings.
 */
function your_plugin_sanitize_options($input) {
    $sanitized = [];
    
    // API Key (sanitize as text)
    if (isset($input['api_key'])) {
        $sanitized['api_key'] = sanitize_text_field($input['api_key']);
    }
    
    // Daily Limit (sanitize and validate as integer between 1-100)
    if (isset($input['daily_limit'])) {
        $limit = absint($input['daily_limit']);
        $sanitized['daily_limit'] = min(max($limit, 1), 100);
    }
    
    return $sanitized;
}

/**
 * Render a settings field.
 *
 * @return void
 */
function your_plugin_render_api_key_field() {
    $options = get_option('your_plugin_options');
    $api_key = $options['api_key'] ?? '';
    
    echo '<input type="text" id="your_plugin_api_key" name="your_plugin_options[api_key]" value="' . esc_attr($api_key) . '" class="regular-text">';
    echo '<p class="description">' . esc_html__('Enter your API key for external services.', 'your-plugin') . '</p>';
}
```

## 7. Integrating Settings with Admin Pages
```php
/**
 * Complete settings page implementation.
 *
 * @return void
 */
function your_plugin_render_settings_page() {
    // Verify user access
    your_plugin_verify_admin_access('manage_options');
    
    ?>
    <div class="wrap">
        <h1><?php echo esc_html__('Your Plugin Settings', 'your-plugin'); ?></h1>
        
        <form method="post" action="options.php">
            <?php
                // Output security fields
                settings_fields('your_plugin_options');
                
                // Output setting sections
                do_settings_sections('your-plugin-settings');
                
                // Output save button
                submit_button();
            ?>
        </form>
    </div>
    <?php
}
```

## 8. Admin Notices Integration
```php
/**
 * Display admin notices for settings pages.
 *
 * @return void
 */
function your_plugin_admin_notices() {
    $screen = get_current_screen();
    
    // Only on plugin admin pages
    if (!$screen || strpos($screen->id, 'your-plugin') === false) {
        return;
    }
    
    // Check for success message
    if (isset($_GET['settings-updated']) && $_GET['settings-updated']) {
        ?>
        <div class="notice notice-success is-dismissible">
            <p><?php echo esc_html__('Settings saved successfully.', 'your-plugin'); ?></p>
        </div>
        <?php
    }
    
    // Check for API key configuration
    $options = get_option('your_plugin_options');
    if (empty($options['api_key']) && $screen->id === 'toplevel_page_your-plugin') {
        ?>
        <div class="notice notice-warning is-dismissible">
            <p>
                <?php 
                    echo esc_html__('API key not configured. ', 'your-plugin');
                    echo '<a href="' . esc_url(admin_url('admin.php?page=your-plugin-settings')) . '">';
                    echo esc_html__('Configure now', 'your-plugin');
                    echo '</a>';
                ?>
            </p>
        </div>
        <?php
    }
}
add_action('admin_notices', 'your_plugin_admin_notices');
```

## 9. Menu Icon & Branding
```php
/**
 * Add plugin admin styles.
 *
 * @return void
 */
function your_plugin_admin_styles() {
    $screen = get_current_screen();
    
    // Only on plugin admin pages
    if (!$screen || strpos($screen->id, 'your-plugin') === false) {
        return;
    }
    
    // Add custom icon using inline CSS if needed
    ?>
    <style type="text/css">
        /* Custom menu icon styling */
        #adminmenu .toplevel_page_your-plugin .wp-menu-image {
            background-repeat: no-repeat;
            background-position: center;
            background-size: 20px auto;
        }
        
        /* Add custom page header */
        .your-plugin-header {
            background: #fff;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 4px solid #2271b1;
            box-shadow: 0 1px 1px rgba(0, 0, 0, 0.04);
        }
        
        /* Custom form styling */
        .your-plugin-form .form-table th {
            width: 200px;
        }
    </style>
    <?php
}
add_action('admin_head', 'your_plugin_admin_styles');
```

## 10. Plugin Option Links
```php
/**
 * Add settings link to plugin actions.
 *
 * @param array $links Plugin action links.
 * @return array Modified plugin action links.
 */
function your_plugin_plugin_action_links($links) {
    $settings_link = '<a href="' . admin_url('admin.php?page=your-plugin-settings') . '">' . __('Settings', 'your-plugin') . '</a>';
    
    // Add settings link to the beginning of the array
    array_unshift($links, $settings_link);
    
    return $links;
}
add_filter('plugin_action_links_your-plugin/your-plugin.php', 'your_plugin_plugin_action_links');
```

## 11. Error Handling Integration
```php
/**
 * Handle errors in admin page rendering.
 * 
 * @param callable $callback The callback function to execute.
 * @param array    $args     Arguments to pass to the callback.
 * @return mixed The callback result or error handling output.
 */
function your_plugin_safe_admin_render($callback, ...$args) {
    try {
        return call_user_func_array($callback, $args);
    } catch (Exception $e) {
        // Log error
        error_log('Error in admin page: ' . $e->getMessage());
        
        // Display user-friendly error
        echo '<div class="notice notice-error"><p>';
        echo esc_html__('An error occurred while rendering this page. Please try again or contact support.', 'your-plugin');
        echo '</p></div>';
        
        // Trigger error protocol if available
        if (function_exists('your_plugin_trigger_error_protocol')) {
            your_plugin_trigger_error_protocol($e, 'admin_render_error', [
                'callback' => $callback,
                'arguments' => $args
            ]);
        }
        
        return null;
    }
}
```