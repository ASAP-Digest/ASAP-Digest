---
description: 
globs: 
alwaysApply: true
---
# Status Check Protocol (Project Status Report) v2.2

## 1. Protocol Restrictions
````markdown
A. Core Restrictions
- Status Check is a **READ-ONLY** operation concerning project files and state.
- Must NOT modify any project files (including roadmaps) or database.
- Must NOT initiate any work or state changes beyond its own logging.
- Must wait for explicit "IAW" or "BWS" command before any work initiation by the agent.

B. Entity Creation Limits
- Only allowed to create `StatusCheck` and `StatusReport` entities in Server Memory for logging its own execution.
- The user-facing report content is derived from analyzing roadmap files and recent memory, not directly from general memory state.
- No task priority updates or external state modifications allowed.
````

## 2. Activation Methods
````text
A. Primary Triggers
- Command or alias "SC".
- Integration: Can be called by BWS/EWS protocols as part of their flow.
- Context: Used in WSMP (Work Session Management Protocol v2.5+) for state assessment.

B. Secondary Triggers
- Pre-session validation (if integrated into BWS).
- Post-session summary (if integrated into EWS).
- Ad-hoc project status queries.
````

## 3. Protocol Chain and Command Flow
````text
1. Status Check ("SC")
   - READ-ONLY operation regarding project files.
   - Creates `StatusCheck` and `StatusReport` entities for logging.
   - Reads and analyzes roadmap files (`docs/ROADMAP_TASKS.md`, `docs/ASAP_DIGEST_ROADMAP.md` or LLM versions) and recent Server Memory.
   - Reports structured project status and exits.
   - **ONLY OUTPUT THE FINAL REPORT**

2. Work Initiation (Requires explicit command)
   - Must be triggered by "IAW" or "BWS".
   - Cannot be initiated by Status Check.

3. Command Hierarchy
   Status Check < Work Session < Task Execution

4. State Modification Rules
   - Status Check: READ-ONLY (for project files/state).
   - Work Session: Can modify state after explicit command.
   - Task Execution: Can modify state within active work session.
````

## 4. Protocol Integration Layer
````text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. Status Check Protocol (This)         │
│ 2. Work Session Management Proto (v2.5+)│
│ 3. Server Memory Rules (v2.0+)          │
│ 4. Task Tracking Protocol               │
│ 5. Software Development Meta Protocol   │
│ 6. Rule Execution Protocol              │
│ 7. Format Time Protocol                 │ // For timestamp consistency
│ 8. Cross-Protocol Comms & Verification   │
│ 9. Audit Trail System                   │
└─────────────────────────────────────────┘
````
*(Self-correction: Updated WSMP version, added Format Time Protocol, refined layers)*

## 5. Status Check Implementation (Conceptual Steps)
````javascript
async function executeProjectStatusCheck() {
    // 1. Initialize timestamp for report and logging
    const reportTimestamp = await mcp_mcp_datetime_get_datetime({ format: "datetime" });
    const formattedReportTime = await mcp_mcp_datetime_get_datetime({ format: "MM.DD.YY | HH:MM AM/PM TimeZone" }); // Use Format Time protocol
    const logTimestamp = await mcp_mcp_datetime_get_datetime({ format: "log_compact" });

    // 2. Create status check entity in Server Memory
    await mcp_Server_Memory_create_entities({
        entities: [{
            name: `StatusCheck_${logTimestamp}`,
            entityType: "StatusCheck",
            observations: [
                `Project status check initiated at ${reportTimestamp}`,
                "Reading roadmap files and recent memory.",
            ]
        }]
    });

    // 3. Read Roadmap Files
    const roadmapTasksContent = await readFileContents('docs/ROADMAP_TASKS.md');
    const mainRoadmapContent = await readFileContents('docs/ASAP_DIGEST_ROADMAP.md'); // Or LLM version

    // 4. Check Recent Server Memory (e.g., Last 72h)
    // Calculate timestamp for 72 hours ago
    const recentCompletions = await searchRecentMemory('TaskCompletion', 72); // Updated lookback
    const activeErrors = await searchRecentMemory('Error', 0, ['status=active']); // Filter for active errors

    // 5. Parse and Analyze Data
    // Parse roadmapTasksContent to get all tasks with statuses and timestamps.
    // Parse mainRoadmapContent to understand task hierarchy for detailed context.
    // Identify sections based on parsing results and rules defined in Section 7.
    const reportData = parseRoadmapsAndMemory(roadmapTasksContent, mainRoadmapContent, recentCompletions, activeErrors, reportTimestamp);

    // 6. Generate Structured Report (User Facing)
    const userReport = formatUserReport(reportData, formattedReportTime); // Use formatted time

    // 7. Create status report entity in Server Memory
    await mcp_Server_Memory_create_entities({
        entities: [{
            name: `StatusReport_${logTimestamp}`,
            entityType: "StatusReport",
            observations: [
                `Report generated at ${reportTimestamp}`,
                `Summary: ${reportData.summary}`, // Store a brief summary
                `PriorityTask: ${reportData.priorityTask?.id}`,
                `PriorityReason: ${reportData.priorityTask?.reason}`,
                `BlockedTasksCount: ${reportData.blockedTasks?.length || 0}`,
                `PendingTestingCount: ${reportData.pendingTestingTasks?.length || 0}`,
                `ActiveTestingCount: ${reportData.activeTestingTasks?.length || 0}`,
            ]
        }]
    });

    // 8. Return the formatted user report
    return userReport;
}

// Helper function placeholders (implementation requires specific parsing logic)
async function readFileContents(filePath) { /* ... use read_file ... */ }
async function searchRecentMemory(entityType, hoursAgo, filters = []) { /* ... use mcp_Server_Memory_search_nodes with time filtering and provided filters ... */ }
function parseRoadmapsAndMemory(roadmapTasksContent, mainRoadmapContent, recentCompletions, activeErrors, reportTimestamp) { /* ... parsing logic ... */ }
function formatUserReport(reportData, formattedReportTime) { /* ... formatting logic using Markdown tables etc. ... */ }
````
*(Note: The JavaScript is conceptual to illustrate the flow)*

## 6. Information Sources Hierarchy
````text
1.  **Primary:** `docs/ROADMAP_TASKS.md` (for detailed task status and timestamps).
2.  **Secondary:**
    -   Server Memory:
        -   `TaskCompletion` entities (last 72h)
        -   Active `Error` entities (for priority determination and details)
        -   Potentially `Task` entities for state entry timestamps if not in roadmap.
    -   `docs/ASAP_DIGEST_ROADMAP.md` (or LLM versions): For overall context and task hierarchy (Major Task Group, Parent Subtask).
    -   Current Timestamp (`format-time.mdc`): For defining the "recent" window and report time.
````

## 7. Status Report Structure & Logic
*(Self-correction: Incorporated suggestions, using Markdown tables, clearer priority, detailed context, and consistent timestamp format)*
The user-facing output MUST follow this structure:

````markdown

---
# **`📅 Status Check Report (MM.DD.YY | HH:MM AM/PM TimeZone)`**
---

### **`✅ Recently Completed (Last 72h):`**
  *   `[Task Name]` _(Completed: MM.DD.YY | HH:MM AM/PM TimeZone)_
  *   `[Task Name]` _(Completed: MM.DD.YY | HH:MM AM/PM TimeZone)_
  *   _(If none: ✨ No tasks completed recently.)_

---

### **`🔬🧪 Testing Pipeline:`**
  *   **`🔬 Pending Initiation:`**
      *   Priority? [Yes/No] - `[Task Name]` _(Entered Queue: [MM.DD.YY | HH:MM AM/PM TimeZone])_
      *   Priority? [Yes/No] - `[Task Name]` _(Entered Queue: [MM.DD.YY | HH:MM AM/PM TimeZone])_
      *   _(If none: 👍 None pending initiation.)_
  *   **`🧪 Actively Testing:`**
      *   `[Task Name]` _(Started: [MM.DD.YY | HH:MM AM/PM TimeZone])_
      *   _(If none: 👍 None actively testing.)_

---

### **`🎯 Current Priority:`**
  *   **`[Emoji]`** **`[Task Name]`**
      *   _Reason:_ `[Determined Reason from Hierarchy Logic]`
      *   _(If Error):_ `🚨 Error Details: [Error Message Summary]`

---

### **`⏳ Upcoming Tasks (Next 3-5 Pending):`**
  *   `[Task Name]`
  *   `[Task Name]`
  *   `[Task Name]`
  *   _(If none: 👍 No pending tasks after priority.)_

---

### **`❌ Blocked Tasks:`**
  *   `[Task Name]` _(Reason: [If available])_
  *   `[Task Name]` _(Reason: [If available])_
  *   _(If none: 👍 No blocked tasks.)_

---

### **`⚙️ Overall Context:`**
  *   _Working within:_ `[Parent Subtask Name]` > **`[Priority Task Name]`**

---

````

## 8. Error Prevention and Handling
````text
-   Gracefully handle errors during file reading (`read_file`) or memory searches (`mcp_Server_Memory_search_nodes`).
-   If `ROADMAP_TASKS.md` cannot be read or parsed, the report should indicate this failure clearly.
-   Log any errors encountered during the status check itself into a relevant `Error` entity in Server Memory if possible, or include in the `StatusReport` entity's observations.
````