---
description: 
globs: 
alwaysApply: true
---
# Status Check Protocol (Project Status Report) v2.4

## 1. Protocol Restrictions
```markdown
A. Core Restrictions
- Status Check is a **READ-ONLY** operation concerning project files and state.
- Must NOT modify any project files (including roadmaps) or database.
- Must NOT initiate any work or state changes beyond its own logging.
- Must wait for explicit "IAW" or "BWS" command before any work initiation by the agent.
- **Execution Adherence:** Status Check execution MUST follow the single-response pattern for informational commands as defined in `<rule_execution_protocol>` Step 4.A.

B. Entity Creation Limits
- Only allowed to create `StatusCheck` and `StatusReport` entities in Server Memory for logging its own execution.
- The user-facing report content is derived from analyzing roadmap files and recent memory, not directly from general memory state.
- No task priority updates or external state modifications allowed.
```

## 2. Activation Methods
```text
A. Primary Triggers
- Command or alias "SC".
- Integration: Can be called by BWS/EWS protocols as part of their flow.
- Context: Used in WSMP (Work Session Management Protocol v2.10+) for state assessment.

B. Secondary Triggers
- Pre-session validation (if integrated into BWS).
- Post-session summary (if integrated into EWS).
- Ad-hoc project status queries.
```

## 3. Protocol Chain and Command Flow
```text
1. Status Check ("SC")
   - READ-ONLY operation regarding project files.
   - Creates `StatusCheck` and `StatusReport` entities for logging.
   - Reads and analyzes roadmap files (`md-docs/ROADMAP_TASKS.md` or a priority niche roadmap `[NRM:{RoadMap_Name}]`, LLM versions) and recent Server Memory using the WSMP rank-aware priority logic.
   - Reports structured project status and exits.
   - **ONLY OUTPUT THE FINAL REPORT**

2. Work Initiation (Requires explicit command)
   - Must be triggered by "IAW" or "BWS".
   - Cannot be initiated by Status Check.

3. Command Hierarchy
   Status Check < Work Session < Task Execution

4. State Modification Rules
   - Status Check: READ-ONLY (for project files/state).
   - Work Session: Can modify state after explicit command.
   - Task Execution: Can modify state within active work session.
```

## 4. Protocol Integration Layer
```text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. Status Check Protocol (This v2.4)    │
│ 2. Work Session Management Proto v2.12+ │ // Source of Rank-Aware Priority Logic
│ 3. Server Memory Rules (v2.1+)          │
│ 4. Task Tracking Protocol               │
│ 5. Software Development Meta Protocol   │
│ 6. Rule Execution Protocol              │
│ 7. Format Time Protocol                 │ // For timestamp consistency
│ 8. Cross-Protocol Comms & Verification   │
│ 9. Audit Trail System                   │
│ 10. Roadmap Syntax Validation Proto v1.0+ │ // Defines expected roadmap syntax (New)
└─────────────────────────────────────────┘
```

## 5. Status Check Implementation (Conceptual Steps - Updated for Rank Awareness and Result Limiting)

### **Default Result Limiting**
- By default, the status check report MUST return **at most the top 5 items per status** (e.g., top 5 completed, top 5 in progress, etc.), or the recently completed in the last 72 hours—whichever is more restrictive.
- The only exception is when a filter is specified (see below).
- **Never exceed the default limit unless a filter is specified.**

### **Filter Syntax**
- The status check command MAY accept a filter argument to override the default limit:
  - `SC=10` → Show the top 10 items per status.
  - `SC=10hrs` → Show items per status in the last 10 hours.
  - `SC=all` → Show all items per status (use with caution; not recommended for large projects).
- The filter is parsed from the command input and applied to all status sections.
- If both a count and a time window are specified, the more restrictive applies.

### **Implementation Steps (Updated):**
1. Parse the filter argument from the command (if present).
2. For each status section (e.g., completed, in progress, pending):
   - Collect all matching tasks.
   - If a time window filter is specified (e.g., `10hrs`), filter tasks by completion or update time.
   - If a count filter is specified (e.g., `10`), limit to that number.
   - By default, limit to 5 per status (or the time window, whichever is more restrictive).
3. Format the report, showing only the filtered/limited items per status.
4. If no tasks match the filter, display a message such as "No tasks found for this status in the specified window."

### **Helper Function Descriptions (Updated):**
- `getTopNTasksByStatus(tasks, status, n, timeWindow)`: Returns up to `n` tasks for the given status, optionally filtered by a time window.
- `parseStatusCheckFilter(input)`: Parses the filter argument from the command (e.g., `SC=10`, `SC=10hrs`).

### **Report Example (Default, Top 5 Per Status):**
```markdown
---
## **`📅 Status Check Report (MM.DD.YY | HH:MM AM/PM TimeZone)`**
---

### **`✅ Recently Completed (Last 72h, Top 5):`**
  *   `[ AUTH-1 ] Create login page • [ done:04.23.25 ]`
  *   `[ UI-2 ] Update button styles • [ done:04.22.25 ] • [ rnk:B ]`
  *   ... (up to 5 items)
  *   _(If none: ✨ No tasks completed recently.)_

---

### **`🔄 In Progress (Top 5):`**
  *   `[ WIDGET-5 ] Implement audio playback • [ rnk:C ]`
  *   ... (up to 5 items)
  *   _(If none: 👍 No tasks in progress.)_

---

### **`⏳ Pending (Top 5):`**
  *   `[ WIDGET-7 ] Create component skeleton`
  *   ... (up to 5 items)
  *   _(If none: 👍 No pending tasks.)_

---

// ... other status sections ...
```

### **Report Example (With Filter, e.g., SC=10):**
```markdown
---
## **`📅 Status Check Report (MM.DD.YY | HH:MM AM/PM TimeZone)`**
---

### **`✅ Recently Completed (Last 72h, Top 10):`**
  *   ... (up to 10 items)
```

### **Notes:**
- Never exceed the default limit unless a filter is specified.
- If a filter is specified, clearly indicate the filter in the report section headers.
- If both a count and a time window are specified, apply the more restrictive filter.

```javascript
async function executeProjectStatusCheck_v2_4() {
    // 1. Initialize timestamp for report and logging
    const reportTimestamp = await mcp_mcp-datetime_get_datetime({ format: "datetime" }); // Still get a standard format for logging
    // Use the updated format-time.mdc logic for the *user-facing* report time
    const formattedReportTime = await getFormattedTime_v1_1(); 
    const logTimestamp = await mcp_mcp-datetime_get_datetime({ format: "log_compact" });

    // 2. Create status check entity in Server Memory
    await mcp_Server_Memory_create_entities({
        entities: [{
            name: `StatusCheck_${logTimestamp}`,
            entityType: "StatusCheck",
            observations: [
                `Project status check initiated at ${reportTimestamp}`,
                "Reading roadmap files and recent memory.",
                "Applying Rank-Aware Priority Logic (v2.4)."
            ]
        }]
    });

    // 3. Read Roadmap Files
    const roadmapTasksContent = await readFileContents('md-docs/ROADMAP_TASKS.md');
    // Potentially read LLM roadmap versions if needed for hierarchy/context
    // const mainRoadmapContent = await readFileContents('md-docs/ASAP_DIGEST_ROADMAP_LLM_X.md');

    // 4. Check Recent Server Memory
    const recentCompletions = await searchRecentMemory('TaskCompletion', 72);
    const activeErrors = await searchRecentMemory('Error', 0, ['status=active']);

    // 5. Parse and Analyze Data (Rank-Aware WSMP Priority Logic)
    // Parse roadmapTasksContent to get all tasks with statuses, [ PREFIX-Num ] IDs, descriptions, AND all ` • [ key:value ]` tags (e.g., rnk, due, done, src, etc.).
    // *** BEGIN Rank-Aware Priority Logic (Ref: WSMP v2.12+, Sec 3.3) ***
    let priorityTask = null;
    let priorityReason = "No actionable tasks found.";

    // 5.1: Check Active Blocking Errors
    const blockedTaskInfo = findHighestPriorityBlockedTask(activeErrors, roadmapTasksContent); // Helper needed
    if (blockedTaskInfo) {
        priorityTask = blockedTaskInfo.task; // Assumes helper returns {task: {...}, errorSummary: "..."}
        priorityReason = `Blocked by Error: ${blockedTaskInfo.errorSummary}`;
    }

    // 5.2: Check Paused Tasks (`⏸️`)
    if (!priorityTask) {
        const pausedTask = findHighestPriorityTaskByStatus(roadmapTasksContent, '⏸️'); // Helper needed
        if (pausedTask) {
            priorityTask = pausedTask;
            priorityReason = "Paused Session";
        }
    }

    // 5.3: Check Testing Tasks (`🧪`)
    if (!priorityTask) {
        const testingTask = findHighestPriorityTaskByStatus(roadmapTasksContent, '🧪'); // Helper needed
        if (testingTask) {
            priorityTask = testingTask;
            priorityReason = "Testing Active";
        }
    }

    // 5.4: Check Highest Ranked Task (` • [ rnk:A ]` > ` • [ rnk:B ]` > ...)
    if (!priorityTask) {
        // Helper function needs to parse ` • [ rnk:X ]` tags and find the highest ranked non-completed/non-paused/non-testing task
        const rankedTask = findHighestExplicitlyRankedTask(roadmapTasksContent); // New helper needed
        if (rankedTask) {
            priorityTask = rankedTask;
            priorityReason = `Highest Ranked Task (rnk:${rankedTask.rank})`; // Include rank in reason
        }
    }

    // 5.5: Check Deepest In Progress (`🔄`) without rank
    if (!priorityTask) {
        // Helper needs modification to *exclude* tasks with a rank tag
        const inProgressTask = findDeepestTaskByStatus(roadmapTasksContent, '🔄', { excludeRanked: true }); // Modified helper needed
        if (inProgressTask) {
            priorityTask = inProgressTask;
            priorityReason = "Deepest Active Task (Unranked)"; // Clarify reason
        }
    }

    // 5.6: Check Pending Testing (`🔬`) without rank
    if (!priorityTask) {
        // Helper needs modification to *exclude* tasks with a rank tag
        const pendingTestTask = findHighestPriorityTaskByStatus(roadmapTasksContent, '🔬', { excludeRanked: true }); // Modified helper needed
        if (pendingTestTask) {
            priorityTask = pendingTestTask;
            priorityReason = "Pending Testing (Requires ST, Unranked)"; // Clarify reason
        }
    }

    // 5.7: Check Pending Tasks (`⏳`) without rank
    if (!priorityTask) {
        // Helper needs modification to *exclude* tasks with a rank tag
        const pendingTask = findHighestPriorityTaskByStatus(roadmapTasksContent, '⏳', { excludeRanked: true }); // Modified helper needed
        if (pendingTask) {
            priorityTask = pendingTask;
            priorityReason = "Next Pending Task (Unranked)"; // Clarify reason
        }
    }
    // *** END Rank-Aware Priority Logic ***

    // Extract other report data (completed, testing pipeline, blocked list etc.)
    const reportData = parseRoadmapsAndMemoryForReport(roadmapTasksContent, recentCompletions, activeErrors, priorityTask, priorityReason); // Modified Helper

    // 6. Generate Structured Report (User Facing)
    const userReport = formatUserReport_v2_4(reportData, formattedReportTime); // Use formatted time, updated report format

    // 7. Create status report entity in Server Memory
    await mcp_Server_Memory_create_entities({
        entities: [{
            name: `StatusReport_${logTimestamp}`,
            entityType: "StatusReport",
            observations: [
                `Report generated at ${reportTimestamp}`,
                `Summary: ${reportData.summary}`, // Store a brief summary
                `PriorityTask: ${reportData.priorityTask?.id || 'None'}`, 
                `PriorityReason: ${reportData.priorityReason || 'N/A'}`, 
                `DetectedRank: ${reportData.priorityTask?.rank || 'N/A'}`, // Store rank if applicable
                `BlockedTasksCount: ${reportData.blockedTasks?.length || 0}`,
                `PendingTestingCount: ${reportData.pendingTestingTasks?.length || 0}`,
                `ActiveTestingCount: ${reportData.activeTestingTasks?.length || 0}`,
            ]
        }]
    });

    // 8. Return the formatted user report
    return userReport;
}

// Helper function placeholders (implementation requires specific parsing logic, now including full tag parsing)
async function readFileContents(filePath) { /* ... use read_file ... */ }
async function searchRecentMemory(entityType, hoursAgo, filters = []) { /* ... use mcp_Server_Memory_search_nodes ... */ }
// Reference the updated formatting logic
async function getFormattedTime_v1_1() { 
    // 1. Call mcp_mcp-datetime_get_datetime({ format: "iso" })
    // 2. Format the returned ISO string to "MM.DD.YY | HH:MM AM/PM PDT"
    // 3. Return the formatted string
}
function findHighestPriorityBlockedTask(activeErrors, roadmapContent) { /* ... logic to link errors to tasks and find highest prio ... */ }
function findHighestPriorityTaskByStatus(roadmapContent, statusEmoji, options = { excludeRanked: false }) { /* ... parse roadmap, filter by emoji, EXCLUDE ranked if options.excludeRanked, find highest prio based on order, extract [ PREFIX-Num ] and all tags ... */ }
function findHighestExplicitlyRankedTask(roadmapContent) { /* ... parse roadmap, extract [ PREFIX-Num ] and all ` • [ key:value ]` tags, find highest ranked non-complete/paused/testing task ... */ }
function findDeepestTaskByStatus(roadmapContent, statusEmoji, options = { excludeRanked: false }) { /* ... parse roadmap, filter by emoji, EXCLUDE ranked if options.excludeRanked, determine hierarchy, extract [ PREFIX-Num ] and all tags ... */ }
function parseRoadmapsAndMemoryForReport(roadmapContent, recentCompletions, activeErrors, priorityTask, priorityReason) { /* ... parsing logic for report sections, now includes [ PREFIX-Num ] and all tags ... */ }
function formatUserReport_v2_4(reportData, formattedReportTime) { /* ... formatting logic using Markdown tables etc., reflect [ PREFIX-Num ] and all tags ... */ }
```

## 6. Information Sources Hierarchy
```text
1.  **Primary:** `md-docs/ROADMAP_TASKS.md` (for detailed task status, timestamps, and ` • [ rnk:X ]` tags).
2.  **Secondary:**
    -   Server Memory:
        -   `TaskCompletion` entities (last 72h)
        -   Active `Error` entities (for priority determination and details)
        -   Potentially `Task` entities for state entry timestamps if not in roadmap.
    -   `md-docs/ASAP_DIGEST_ROADMAP_LLM_*.md` (or primary if not split): For overall context and task hierarchy (Major Task Group, Parent Subtask).
    -   Current Timestamp (`format-time.mdc`): For defining the "recent" window and report time.
```

## 7. Status Report Structure & Logic (Updated)
The user-facing output MUST follow this structure, with the `📅 Status Check Report (MM.DD.YY | HH:MM AM/PM TimeZone)` heading using the timestamp generated via `format-time.mdc`. The Priority section MUST reflect the rank-aware logic and show the [ PREFIX-Num ] ID and all tags for each task.

```markdown
---
## **`📅 Status Check Report (MM.DD.YY | HH:MM AM/PM TimeZone)`**
---

### **`✅ Recently Completed (Last 72h):`**
  *   `[ AUTH-1 ] Create login page • [ done:04.23.25 ]`
  *   `[ UI-2 ] Update button styles • [ done:04.22.25 ] • [ rnk:B ]`
  *   _(If none: ✨ No tasks completed recently.)_

---

### **`🔬🧪 Testing Pipeline:`**
  *   **`🔬 Pending Initiation:`**
      *   Priority? [Yes/No] - `[ CORE-3 ] Refactor API layer • [ due:04.30.25 ] • [ rnk:A ]` _(Entered Queue: [04.21.25])_
      *   _(If none: 👍 None pending initiation.)_
  *   **`🧪 Actively Testing:`**
      *   `[ PWA-4 ] Add offline support • [ rnk:A ] • [ due:05.01.25 ]` _(Started: [04.20.25])_

---

### **`�� Current Priority:`