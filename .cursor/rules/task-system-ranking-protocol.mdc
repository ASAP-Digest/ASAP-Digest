---
description: 
globs: "md-docs/ROADMAP_TASKS.md"
alwaysApply: false
---
# Task System Ranking Protocol v1.6

## 1. Purpose & VeriDX Alignment

This protocol establishes the standard criteria and **configurable algorithms** for assigning explicit priority ranks (` • [ rnk:X ]` where X is A-Z, A=highest) to key tasks listed in `md-docs/ROADMAP_TASKS.md`.

It directly supports the VeriDX philosophy of **Systematic & Verifiable Development Acceleration** by:
- Providing structured, repeatable logic for task prioritization based on a user-selected strategy.
- Defining distinct **Development Layers:** App Shell (Layer 1), Core Functionality (Layer 2), Special Features (Layer 3), Visual Polish (Layer 4), Miscellaneous (Layer 5).
- Allowing user configuration of the prioritization strategy via the `taskSystem.rankingAlgorithm` setting, intended to reside in `veridx-config.json`.
- Leveraging available context (roadmap structure, status markers, notes, and *Future State:* Memory System DB queries for errors/paused sessions).
- Defining the priority input for the Task Management System's actionable output (`md-docs/todotasks.txt` via `generate-todotxt.js`).

This ranking guides development focus and informs WSMP fallback logic according to the **currently active algorithm**.

## 2. Protocol Integration Layer

```text
┌─────────────────────────────────────────┐
│         Protocol Integration            │
├─────────────────────────────────────────┤
│ 1. Software Development Meta Protocol   │ // Overall Guidance
│ 2. Rule Execution Protocol              │ // Executing steps herein
│ 3. Server Memory Rules (v2.1+)          │ // Defines *future* Task/Error entity state
│ 4. Status Check Protocol (v2.4+)        │ // Reads & uses ranks for reporting
│ 5. Work Session Management Proto v2.13+ │ // Uses ranks for RWS fallback logic
│ 6. Task Tracking Protocol (v1.3+)       │ // Manages roadmap file state & *future* DB sync (Updated)
│ 7. Roadmap Syntax Validation Proto v1.1+│ // Defines the rnk:X tag format
│ 8. New Rule Creation Protocol           │ // This rule's creation process
│ 9. VeriDX High-Level System Docs        │ // Overall architectural alignment
│ 10. VeriDX Configuration (`.cursor/veridx/veridx-config.json` or DB) │ // Source for active algorithm
│ 11. Task Ranking Table Reference Protocol v1.0 │ // Provides layer classification guidelines (New)
│ 12. Task System Ranking Protocol (This) │ // Self-reference v1.6 (Updated)
└─────────────────────────────────────────┘
```

## 3. Activation

Manually invoked when:
- Initially applying ranks to `md-docs/ROADMAP_TASKS.md`.
- Reviewing ranks based on triggers (Section 8).
- Upon explicit user command `Review Roadmap Ranks`.
- *(Implicitly referenced)* When applying ranks based on the configured algorithm.

## 4. Ranking Scope & Focus

- **Focus:** Apply ranks primarily to tasks crucial for unblocking work or driving progress through the selected algorithm's layer priority. Aim to rank the **top ~7 actionable (non-`✅`/`🔬`/`🧪`) tasks** plus any critical blockers.
- **Scale Availability:** A-Z available, concentrate on A-G.
- **Default:** Most tasks remain unranked.

## 5. Ranking Algorithms & Criteria (v1.5)

### 5.1. Active Algorithm Determination
- The system MUST determine the currently active ranking algorithm.
- **Configuration Source:** Read the value associated with the path `taskSystem.rankingAlgorithm` within the primary VeriDX configuration source (expected file location: `.cursor/veridx/veridx-config.json`).
  ```json
  // Example veridx-config.json structure:
  {
    "$schema": "...",
    "title": "...",
    "description": "...",
    "type": "object",
    "properties": {
      "globalSettings": {
        // ... global settings ...
      },
      "eventNotifications": {
        // ... event notifications ...
      },
      "protocolSettings": {
        // ... protocol settings ...
      },
      "taskSystem": { // <-- Note: Top-level key within properties
        "description": "Settings related to the VeriDX task management system.",
        "type": "object",
        "properties": {
          "rankingAlgorithm": { // <-- The target key
            "description": "Determines the active algorithm for assigning ranks...",
            "type": "string",
            "enum": ["PRIMARY", "SECONDARY", "TERTIARY"],
            "default": "PRIMARY"
          }
          // ... other taskSystem settings might go here ...
        },
        "required": ["rankingAlgorithm"]
      }
    },
    "required": ["globalSettings", "eventNotifications", "protocolSettings", "taskSystem"]
  }
  ```
- **Valid Values:** `PRIMARY`, `SECONDARY`, `TERTIARY`.
- **Fallback:** If the `taskSystem` object or the `rankingAlgorithm` key is missing, or the value is invalid, **MUST default to `PRIMARY`**.
- **User Notification:** When applying ranks, the agent SHOULD state which algorithm (`PRIMARY`, `SECONDARY`, or `TERTIARY`) is currently active based on the configuration (or fallback) and is being used for the ranking process.

### 5.2. Development Layer Definitions
Tasks are conceptually categorized into these layers (used by the algorithms):
- **Layer 1: App Shell:** Basic structure, navigation, layout, core styling setup.
- **Layer 2: Core Functionality:** Essential user accounts, primary data handling, critical APIs, core interaction logic.
- **Layer 3: Special Features:** Unique value-adds, specific widgets, AI integrations, complex features.
- **Layer 4: Visual Polish:** UI refinement, micro-interactions, minor design system adherence *after* functionality is stable.
- **Layer 5: Miscellaneous:** Minor bugs, non-critical docs, minor tweaks (generally remains unranked).

### 5.3. Ranking Criteria Application (Algorithm-Driven)
Evaluate actionable tasks (`⏳`, `🔄`, `❌`, `⏸️`) against the criteria below **based on the active algorithm** determined in Step 5.1. Apply the highest applicable rank (A-Z) within the focus scope (~Top 7 + Blockers).

**A. Rank A (Highest Priority):**
   - **Always Apply (Overrides Algorithm):**
     - [ ] **Blocked by Critical Error:** Task marked `❌` impacting core functionality (per note/user confirmation). *(Future: Linked Error entity)*.
   - **Algorithm-Specific Layer Focus (Apply if not blocked by error):**
     - [ ] **If `PRIMARY` Algo Active:** Task is essential for **Layer 1 (App Shell)**.
     - [ ] **If `SECONDARY` Algo Active:** Task is essential for **Layer 2 (Core Functionality)**.
     - [ ] **If `TERTIARY` Algo Active:** Task is essential for **Layer 3 (Special Features)**.

**B. Rank B (High Priority):**
   - **Always Apply (If not Rank A):**
     - [ ] **Resumption of Paused *Core* Work:** Task is `PAUSED` (`⏸️`) *and* relates to Layer 1 or Layer 2 work. *(Future: Verified via WorkSessionSave link)*.
     - [ ] **Rejected Verification (Core):** Task requires rework on a Layer 1 or Layer 2 feature due to failed verification. *(Future: Verified via REJECTED VerificationRequest)*.
     - [ ] **Key Dependency Unblocker:** Completing this task directly unblocks significant (>2-3) *high-priority* subsequent tasks (inferred from roadmap structure).
   - **Algorithm-Specific Layer Focus (Apply if not Rank A or other Rank B):**
     - [ ] **If `PRIMARY` Algo Active:** Task is essential for **Layer 2 (Core Functionality)**.
     - [ ] **If `SECONDARY` Algo Active:** Task is essential for **Layer 3 (Special Features)**.
     - [ ] **If `TERTIARY` Algo Active:** Task is essential for **Layer 4 (Visual Polish)**. *(Note: Tertiary prioritizes features AND polish before shell/core)*

**C. Rank C (Medium Priority):**
   - **Algorithm-Specific Layer Focus (Apply if not A/B, within ~Top 7 focus):**
     - [ ] **If `PRIMARY` Algo Active:** Task relates to **Layer 3 (Special Features)**.
     - [ ] **If `SECONDARY` Algo Active:** Task relates to **Layer 4 (Visual Polish)**.
     - [ ] **If `TERTIARY` Algo Active:** Task relates to **Layer 1 (App Shell)**.
   - **Also Consider (If not A/B/Algorithm C, within ~Top 7 focus):**
     - [ ] Important supporting features, key refactoring (not blocking), next sequential tasks within an active branch (that don't fit higher layer criteria for the active algo).

**D. Rank D (Lower Priority):**
   - **Algorithm-Specific Layer Focus (Apply if not A/B/C, within ~Top 7 focus):**
     - [ ] **If `PRIMARY` Algo Active:** Task relates to **Layer 4 (Visual Polish)**.
     - [ ] **If `SECONDARY` Algo Active:** Task relates to **Layer 1 (App Shell)**.
     - [ ] **If `TERTIARY` Algo Active:** Task relates to **Layer 2 (Core Functionality)**.

**E-Z / No Rank (Default / Miscellaneous):**
   - Tasks not meeting A-D criteria within the focus scope based on the active algorithm.
   - Tasks relating to **Layer 5 (Miscellaneous)**.
   - Tasks marked `🔬`, `🧪`, or `✅`.

## 6. Application Process

1.  **Determine Active Algorithm:** Read `taskSystem.rankingAlgorithm` from `.cursor/veridx/veridx-config.json` (default to `PRIMARY`). State the active algorithm.
2.  **Analyze Roadmap Structure:** Understand hierarchy, dependencies, features (`ASAP_DIGEST_ROADMAP.md`).
3.  **Analyze Task List:** Read `md-docs/ROADMAP_TASKS.md` for status, hierarchy, notes.
4.  **Gather Context:** Check for `❌` or `⏸️` markers/notes. *(Future: Query Memory System)*.
5.  **Identify Candidates:** List actionable tasks (`⏳`, `🔄`, `❌`, `⏸️`).
6.  **Classify Task Layers (Mandatory Reference):** For each candidate task, consult `@task-ranking-table-reference-and-protocol.mdc` (Section 5) to assign the appropriate Development Layer (1-5). Document the assigned layer if helpful during review.
7.  **Apply Ranking Criteria (v1.6):** Evaluate candidates against Section 5.3 based on the **active algorithm** and their assigned **Development Layer**. Document justifications referencing criteria, algorithm, and layer.
8.  **Review Proposed Ranks:** Present tasks with proposed ranks and justifications for user review.
9.  **Update Roadmap File:** Once approved, use `edit_file` to add/update ` • [ rnk:X ]` tags in `md-docs/ROADMAP_TASKS.md`. *(Future: Trigger sync to DB)*.

## 7. Maintenance & Review Triggers (Simple)

Ranks SHOULD be reviewed using this protocol when:
- **Algorithm Changed:** The `taskSystem.rankingAlgorithm` setting is modified in `veridx-config.json`.
- **Blocker Resolved:** Issue causing Rank A resolved.
- **Layer Complete:** A major layer (per the *current* algorithm's focus) is deemed substantially complete (`✅`).
- **Explicit User Request:** `Review Roadmap Ranks`.
- **(Optional Trigger):** WSMP `RWS` consistently finds no actionable tasks despite pending items.

## 8. Verification

- **Manual Review:** Verify `md-docs/ROADMAP_TASKS.md` reflects agreed ranks/justifications based on the *active* algorithm.
- **WSMP Behavior:** Observe if `RWS` fallback prioritizes according to ranks applied by the active algorithm.
- **(Future):** Verify `rank` field in Memory System `TASKS` table aligns.

## 9. Configuration Requirement

- **Dependency:** This protocol relies on the existence and correct structure of the **<< `taskSystem` >>** object and its **<< `rankingAlgorithm` >>** key within the main VeriDX configuration structure (expected file: `.cursor/veridx/veridx-config.json`). The value SHOULD be one of `PRIMARY`, `SECONDARY`, `TERTIARY`. If the object, key, or value is invalid/missing, the protocol MUST default to `PRIMARY`.
- **Responsibility:** Implementing the logic to *read and parse* the configuration file/object to retrieve this setting resides within the agent or tool executing this protocol.
